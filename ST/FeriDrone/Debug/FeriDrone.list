
FeriDrone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800c010  0800c010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b4  0800c0b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0bc  0800c0bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006628  200001e0  0800c2a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006808  0800c2a4  00026808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291c7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005046  00000000  00000000  000493d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e60  00000000  00000000  0004e420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c48  00000000  00000000  00050280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000076e6  00000000  00000000  00051ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b400  00000000  00000000  000595ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dd2f  00000000  00000000  000749ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001126dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008144  00000000  00000000  00112758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bff8 	.word	0x0800bff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bff8 	.word	0x0800bff8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <spi1_beriRegister>:
void initLSM303DLHC(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi1_beriRegister(uint8_t reg) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004f0:	71fb      	strb	r3, [r7, #7]
	buf_out = reg;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2108      	movs	r1, #8
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <spi1_beriRegister+0x50>)
 80004fe:	f001 f987 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &buf_out, (uint8_t*) &buf_in, 2,
 8000502:	f107 020c 	add.w	r2, r7, #12
 8000506:	f107 010e 	add.w	r1, r7, #14
 800050a:	2302      	movs	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2302      	movs	r3, #2
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <spi1_beriRegister+0x54>)
 8000512:	f004 ff92 	bl	800543a <HAL_SPI_TransmitReceive>
			2);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2108      	movs	r1, #8
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <spi1_beriRegister+0x50>)
 800051c:	f001 f978 	bl	8001810 <HAL_GPIO_WritePin>
	return buf_in >> 8;
 8000520:	89bb      	ldrh	r3, [r7, #12]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2db      	uxtb	r3, r3
}
 8000528:	4618      	mov	r0, r3
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	20005d74 	.word	0x20005d74

08000538 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	71bb      	strb	r3, [r7, #6]
	uint16_t buf_out;
	buf_out = reg | (vrednost << 8);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	b21a      	sxth	r2, r3
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	021b      	lsls	r3, r3, #8
 8000550:	b21b      	sxth	r3, r3
 8000552:	4313      	orrs	r3, r2
 8000554:	b21b      	sxth	r3, r3
 8000556:	b29b      	uxth	r3, r3
 8000558:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	4809      	ldr	r0, [pc, #36]	; (8000584 <spi1_pisiRegister+0x4c>)
 8000560:	f001 f956 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &buf_out, 2, 2);
 8000564:	f107 010e 	add.w	r1, r7, #14
 8000568:	2302      	movs	r3, #2
 800056a:	2202      	movs	r2, #2
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <spi1_pisiRegister+0x50>)
 800056e:	f004 fd27 	bl	8004fc0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2108      	movs	r1, #8
 8000576:	4803      	ldr	r0, [pc, #12]	; (8000584 <spi1_pisiRegister+0x4c>)
 8000578:	f001 f94a 	bl	8001810 <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	20005d74 	.word	0x20005d74

0800058c <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t *buffer, uint8_t velikost) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
	reg |= 0xC0;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <spi1_beriRegistre+0x50>)
 80005ac:	f001 f930 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 10);
 80005b0:	1df9      	adds	r1, r7, #7
 80005b2:	230a      	movs	r3, #10
 80005b4:	2201      	movs	r2, #1
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <spi1_beriRegistre+0x54>)
 80005b8:	f004 fd02 	bl	8004fc0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, velikost, velikost);
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <spi1_beriRegistre+0x54>)
 80005c6:	f004 fe2f 	bl	8005228 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2108      	movs	r1, #8
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <spi1_beriRegistre+0x50>)
 80005d0:	f001 f91e 	bl	8001810 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	20005d74 	.word	0x20005d74

080005e4 <initL3GD20>:

void initL3GD20() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t cip = spi1_beriRegister(0x0F);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f7ff ff78 	bl	80004e0 <spi1_beriRegister>
 80005f0:	4603      	mov	r3, r0
 80005f2:	71fb      	strb	r3, [r7, #7]
	if (cip != 0xD4)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2bd4      	cmp	r3, #212	; 0xd4
 80005f8:	d000      	beq.n	80005fc <initL3GD20+0x18>
		for (;;)
 80005fa:	e7fe      	b.n	80005fa <initL3GD20+0x16>
			;

	spi1_pisiRegister(0x20, 0x0F);
 80005fc:	210f      	movs	r1, #15
 80005fe:	2020      	movs	r0, #32
 8000600:	f7ff ff9a 	bl	8000538 <spi1_pisiRegister>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <i2c1_pisiRegister>:

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af04      	add	r7, sp, #16
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	460b      	mov	r3, r1
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	4613      	mov	r3, r2
 800061c:	717b      	strb	r3, [r7, #5]
	naprava <<= 1;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT,
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	b299      	uxth	r1, r3
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	b29a      	uxth	r2, r3
 800062c:	230a      	movs	r3, #10
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	1d7b      	adds	r3, r7, #5
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <i2c1_pisiRegister+0x40>)
 800063c:	f001 fa2a 	bl	8001a94 <HAL_I2C_Mem_Write>
 8000640:	4603      	mov	r3, r0
			&podatek, 1, 10);
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20005d18 	.word	0x20005d18

08000650 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t *podatek,
		uint8_t dolzina) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af04      	add	r7, sp, #16
 8000656:	603a      	str	r2, [r7, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	460b      	mov	r3, r1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	717b      	strb	r3, [r7, #5]
	if ((dolzina > 1) && (naprava == 0x19))
 8000666:	797b      	ldrb	r3, [r7, #5]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d906      	bls.n	800067a <i2c1_beriRegistre+0x2a>
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b19      	cmp	r3, #25
 8000670:	d103      	bne.n	800067a <i2c1_beriRegistre+0x2a>
		reg |= 0x80;
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000678:	71bb      	strb	r3, [r7, #6]
	naprava <<= 1;
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek,
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	b299      	uxth	r1, r3
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	b298      	uxth	r0, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	b29b      	uxth	r3, r3
 800068c:	797a      	ldrb	r2, [r7, #5]
 800068e:	9202      	str	r2, [sp, #8]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	4602      	mov	r2, r0
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <i2c1_beriRegistre+0x58>)
 800069c:	f001 faf4 	bl	8001c88 <HAL_I2C_Mem_Read>
			dolzina, dolzina);
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20005d18 	.word	0x20005d18

080006ac <initLSM303DLHC>:

void initLSM303DLHC() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f000 fe27 	bl	8001304 <HAL_Delay>
	i2c1_pisiRegister(0x19, 0x20, 0x27);
 80006b6:	2227      	movs	r2, #39	; 0x27
 80006b8:	2120      	movs	r1, #32
 80006ba:	2019      	movs	r0, #25
 80006bc:	f7ff ffa6 	bl	800060c <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x23, 0x88);
 80006c0:	2288      	movs	r2, #136	; 0x88
 80006c2:	2123      	movs	r1, #35	; 0x23
 80006c4:	2019      	movs	r0, #25
 80006c6:	f7ff ffa1 	bl	800060c <i2c1_pisiRegister>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09c      	sub	sp, #112	; 0x70
 80006d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006d6:	f000 fdd3 	bl	8001280 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006da:	f000 f867 	bl	80007ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006de:	f000 f9ab 	bl	8000a38 <MX_GPIO_Init>
	MX_I2C1_Init();
 80006e2:	f000 f8e7 	bl	80008b4 <MX_I2C1_Init>
	MX_I2S2_Init();
 80006e6:	f000 f913 	bl	8000910 <MX_I2S2_Init>
	MX_I2S3_Init();
 80006ea:	f000 f93f 	bl	800096c <MX_I2S3_Init>
	MX_SPI1_Init();
 80006ee:	f000 f96d 	bl	80009cc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	osKernelInitialize();
 80006f2:	f008 f97f 	bl	80089f4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of merjenjeNagiba */
	const osThreadAttr_t merjenjeNagiba_attributes = { .name = "merjenjeNagiba",
 80006f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006fa:	2224      	movs	r2, #36	; 0x24
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f00b fbb7 	bl	800be72 <memset>
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <main+0xb8>)
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070c:	663b      	str	r3, [r7, #96]	; 0x60
 800070e:	2318      	movs	r3, #24
 8000710:	667b      	str	r3, [r7, #100]	; 0x64
			.priority = (osPriority_t) osPriorityNormal, .stack_size = 512 };
	merjenjeNagibaHandle = osThreadNew(StartMerjenjeNagiba, NULL,
 8000712:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000716:	461a      	mov	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	481c      	ldr	r0, [pc, #112]	; (800078c <main+0xbc>)
 800071c:	f008 f9d2 	bl	8008ac4 <osThreadNew>
 8000720:	4602      	mov	r2, r0
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <main+0xc0>)
 8000724:	601a      	str	r2, [r3, #0]
			&merjenjeNagiba_attributes);

	/* definition and creation of trilateracija */
	const osThreadAttr_t trilateracija_attributes = { .name = "trilateracija",
 8000726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072a:	2224      	movs	r2, #36	; 0x24
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00b fb9f 	bl	800be72 <memset>
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <main+0xc4>)
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
 8000738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800073e:	2318      	movs	r3, #24
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
			.priority = (osPriority_t) osPriorityNormal, .stack_size = 512 };
	trilateracijaHandle = osThreadNew(StartTrilateracija, NULL,
 8000742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000746:	461a      	mov	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	4813      	ldr	r0, [pc, #76]	; (8000798 <main+0xc8>)
 800074c:	f008 f9ba 	bl	8008ac4 <osThreadNew>
 8000750:	4602      	mov	r2, r0
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0xcc>)
 8000754:	601a      	str	r2, [r3, #0]
			&trilateracija_attributes);

	/* definition and creation of pilotiranje */
	const osThreadAttr_t pilotiranje_attributes =
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2224      	movs	r2, #36	; 0x24
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f00b fb88 	bl	800be72 <memset>
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <main+0xd0>)
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	2320      	movs	r3, #32
 800076e:	61fb      	str	r3, [r7, #28]
			{ .name = "pilotiranje", .priority =
					(osPriority_t) osPriorityAboveNormal, .stack_size = 512 };
	pilotiranjeHandle = osThreadNew(StartPilotiranje, NULL,
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	461a      	mov	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <main+0xd4>)
 8000778:	f008 f9a4 	bl	8008ac4 <osThreadNew>
 800077c:	4602      	mov	r2, r0
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <main+0xd8>)
 8000780:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000782:	f008 f96b 	bl	8008a5c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000786:	e7fe      	b.n	8000786 <main+0xb6>
 8000788:	0800c010 	.word	0x0800c010
 800078c:	08000bed 	.word	0x08000bed
 8000790:	20005d70 	.word	0x20005d70
 8000794:	0800c020 	.word	0x0800c020
 8000798:	08000cf5 	.word	0x08000cf5
 800079c:	20005d14 	.word	0x20005d14
 80007a0:	0800c030 	.word	0x0800c030
 80007a4:	08000d05 	.word	0x08000d05
 80007a8:	20005d6c 	.word	0x20005d6c

080007ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09a      	sub	sp, #104	; 0x68
 80007b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00b fb59 	bl	800be72 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <SystemClock_Config+0x100>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <SystemClock_Config+0x100>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <SystemClock_Config+0x100>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <SystemClock_Config+0x104>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <SystemClock_Config+0x104>)
 8000808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <SystemClock_Config+0x104>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081a:	2301      	movs	r3, #1
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 800082e:	2304      	movs	r3, #4
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000832:	23a8      	movs	r3, #168	; 0xa8
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000836:	2304      	movs	r3, #4
 8000838:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800083a:	2307      	movs	r3, #7
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800083e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fda8 	bl	8004398 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xa6>
		Error_Handler();
 800084e:	f000 fa73 	bl	8000d38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2102      	movs	r1, #2
 800086e:	4618      	mov	r0, r3
 8000870:	f003 ffd4 	bl	800481c <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xd2>
		Error_Handler();
 800087a:	f000 fa5d 	bl	8000d38 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800087e:	2301      	movs	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000882:	23c8      	movs	r3, #200	; 0xc8
 8000884:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000886:	2305      	movs	r3, #5
 8000888:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	4618      	mov	r0, r3
 8000894:	f004 f9e2 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xf6>
		Error_Handler();
 800089e:	f000 fa4b 	bl	8000d38 <Error_Handler>
	}
}
 80008a2:	bf00      	nop
 80008a4:	3768      	adds	r7, #104	; 0x68
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_I2C1_Init+0x54>)
 80008bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_I2C1_Init+0x58>)
 80008c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_I2C1_Init+0x50>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C1_Init+0x50>)
 80008f2:	f000 ffa7 	bl	8001844 <HAL_I2C_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80008fc:	f000 fa1c 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20005d18 	.word	0x20005d18
 8000908:	40005400 	.word	0x40005400
 800090c:	00061a80 	.word	0x00061a80

08000910 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2S2_Init+0x50>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_I2S2_Init+0x54>)
 8000918:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_I2S2_Init+0x50>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2S2_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_I2S2_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_I2S2_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_I2S2_Init+0x50>)
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_I2S2_Init+0x58>)
 8000938:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_I2S2_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_I2S2_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_I2S2_Init+0x50>)
 8000948:	2201      	movs	r2, #1
 800094a:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_I2S2_Init+0x50>)
 800094e:	f001 fef9 	bl	8002744 <HAL_I2S_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2S2_Init+0x4c>
		Error_Handler();
 8000958:	f000 f9ee 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20005dcc 	.word	0x20005dcc
 8000964:	40003800 	.word	0x40003800
 8000968:	00017700 	.word	0x00017700

0800096c <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <MX_I2S3_Init+0x58>)
 8000974:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_I2S3_Init+0x54>)
 800098c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000990:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <MX_I2S3_Init+0x5c>)
 8000996:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_I2S3_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_I2S3_Init+0x54>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_I2S3_Init+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_I2S3_Init+0x54>)
 80009ac:	f001 feca 	bl	8002744 <HAL_I2S_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2S3_Init+0x4e>
		Error_Handler();
 80009b6:	f000 f9bf 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20005e14 	.word	0x20005e14
 80009c4:	40003c00 	.word	0x40003c00
 80009c8:	00017700 	.word	0x00017700

080009cc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009dc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a00:	2218      	movs	r2, #24
 8000a02:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a1e:	f004 fa6b 	bl	8004ef8 <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000a28:	f000 f986 	bl	8000d38 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20005d74 	.word	0x20005d74
 8000a34:	40013000 	.word	0x40013000

08000a38 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4b60      	ldr	r3, [pc, #384]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a5f      	ldr	r2, [pc, #380]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b5d      	ldr	r3, [pc, #372]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b59      	ldr	r3, [pc, #356]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a58      	ldr	r2, [pc, #352]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a51      	ldr	r2, [pc, #324]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b48      	ldr	r3, [pc, #288]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a3c      	ldr	r2, [pc, #240]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2108      	movs	r1, #8
 8000afa:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000afc:	f000 fe88 	bl	8001810 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000b00:	2201      	movs	r2, #1
 8000b02:	2101      	movs	r1, #1
 8000b04:	4835      	ldr	r0, [pc, #212]	; (8000bdc <MX_GPIO_Init+0x1a4>)
 8000b06:	f000 fe83 	bl	8001810 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b10:	4833      	ldr	r0, [pc, #204]	; (8000be0 <MX_GPIO_Init+0x1a8>)
 8000b12:	f000 fe7d 	bl	8001810 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : DATA_Ready_Pin */
	GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000b16:	2304      	movs	r3, #4
 8000b18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000b2a:	f000 fcef 	bl	800150c <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4824      	ldr	r0, [pc, #144]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000b46:	f000 fce1 	bl	800150c <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000b4a:	2332      	movs	r3, #50	; 0x32
 8000b4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <MX_GPIO_Init+0x1ac>)
 8000b50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000b5e:	f000 fcd5 	bl	800150c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_GPIO_Init+0x1a4>)
 8000b7a:	f000 fcc7 	bl	800150c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_GPIO_Init+0x1ac>)
 8000b84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4815      	ldr	r0, [pc, #84]	; (8000be8 <MX_GPIO_Init+0x1b0>)
 8000b92:	f000 fcbb 	bl	800150c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000b96:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0x1a8>)
 8000bb0:	f000 fcac 	bl	800150c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_GPIO_Init+0x1a8>)
 8000bc8:	f000 fca0 	bl	800150c <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020c00 	.word	0x40020c00
 8000be4:	10120000 	.word	0x10120000
 8000be8:	40020000 	.word	0x40020000

08000bec <StartMerjenjeNagiba>:
 * @brief  Function implementing the merjenjeNagiba thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMerjenjeNagiba */
void StartMerjenjeNagiba(void *argument) {
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000bf4:	f00a fc02 	bl	800b3fc <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	float freq = madgwick_freq;
 8000bf8:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <StartMerjenjeNagiba+0xf4>)
 8000bfa:	61fb      	str	r3, [r7, #28]
	float delay = 1000.0f / freq;
 8000bfc:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000ce4 <StartMerjenjeNagiba+0xf8>
 8000c00:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c08:	edc7 7a06 	vstr	s15, [r7, #24]
	uint32_t ticksDelay = (uint32_t)(delay / portTICK_PERIOD_MS);
 8000c0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c14:	ee17 3a90 	vmov	r3, s15
 8000c18:	617b      	str	r3, [r7, #20]

	__HAL_SPI_ENABLE(&hspi1);
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <StartMerjenjeNagiba+0xfc>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <StartMerjenjeNagiba+0xfc>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c28:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	482f      	ldr	r0, [pc, #188]	; (8000cec <StartMerjenjeNagiba+0x100>)
 8000c30:	f000 fdee 	bl	8001810 <HAL_GPIO_WritePin>
	initL3GD20();
 8000c34:	f7ff fcd6 	bl	80005e4 <initL3GD20>

	__HAL_I2C_ENABLE(&hi2c1);
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <StartMerjenjeNagiba+0x104>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <StartMerjenjeNagiba+0x104>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0201 	orr.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
	initLSM303DLHC();
 8000c48:	f7ff fd30 	bl	80006ac <initLSM303DLHC>

	uint8_t meritev_size = 7;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	74fb      	strb	r3, [r7, #19]
	int16_t meritev[meritev_size];
 8000c50:	7cf8      	ldrb	r0, [r7, #19]
 8000c52:	4603      	mov	r3, r0
 8000c54:	3b01      	subs	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	b2c1      	uxtb	r1, r0
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	f04f 0400 	mov.w	r4, #0
 8000c66:	0114      	lsls	r4, r2, #4
 8000c68:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000c6c:	010b      	lsls	r3, r1, #4
 8000c6e:	b2c1      	uxtb	r1, r0
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	f04f 0400 	mov.w	r4, #0
 8000c7c:	0114      	lsls	r4, r2, #4
 8000c7e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000c82:	010b      	lsls	r3, r1, #4
 8000c84:	4603      	mov	r3, r0
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	3301      	adds	r3, #1
 8000c8a:	3307      	adds	r3, #7
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	ebad 0d03 	sub.w	sp, sp, r3
 8000c94:	466b      	mov	r3, sp
 8000c96:	3301      	adds	r3, #1
 8000c98:	085b      	lsrs	r3, r3, #1
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
	meritev[0] = 0xaaab;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 8000ca4:	801a      	strh	r2, [r3, #0]
	/* Infinite loop */
	for (;;) {
		spi1_beriRegistre(0x28, (uint8_t*) &meritev[1], 6); // gyros
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	2206      	movs	r2, #6
 8000cac:	4619      	mov	r1, r3
 8000cae:	2028      	movs	r0, #40	; 0x28
 8000cb0:	f7ff fc6c 	bl	800058c <spi1_beriRegistre>
		i2c1_beriRegistre(0x19, 0x28, (uint8_t*) &meritev[4], 6); // accel
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f103 0208 	add.w	r2, r3, #8
 8000cba:	2306      	movs	r3, #6
 8000cbc:	2128      	movs	r1, #40	; 0x28
 8000cbe:	2019      	movs	r0, #25
 8000cc0:	f7ff fcc6 	bl	8000650 <i2c1_beriRegistre>
		//TODO: branje magnetometra, pretvorba podatkov, klic madgwick, kompresija podatkov
		//MadgwickAHRSupdate(-meritev[1], meritev[2], meritev[3], meritev[4], meritev[5], meritev[6], meritev[7], meritev[8], meritev[9]);

		CDC_Transmit_FS((uint8_t*) &meritev, meritev_size * sizeof(int16_t));
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	7cfb      	ldrb	r3, [r7, #19]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f00a fc51 	bl	800b578 <CDC_Transmit_FS>
		osDelay(ticksDelay);
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f007 ffa0 	bl	8008c1c <osDelay>
		spi1_beriRegistre(0x28, (uint8_t*) &meritev[1], 6); // gyros
 8000cdc:	e7e3      	b.n	8000ca6 <StartMerjenjeNagiba+0xba>
 8000cde:	bf00      	nop
 8000ce0:	42700000 	.word	0x42700000
 8000ce4:	447a0000 	.word	0x447a0000
 8000ce8:	20005d74 	.word	0x20005d74
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	20005d18 	.word	0x20005d18

08000cf4 <StartTrilateracija>:
 * @brief Function implementing the trilateracija thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTrilateracija */
void StartTrilateracija(void *argument) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTrilateracija */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f007 ff8d 	bl	8008c1c <osDelay>
 8000d02:	e7fb      	b.n	8000cfc <StartTrilateracija+0x8>

08000d04 <StartPilotiranje>:
 * @brief Function implementing the pilotiranje thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPilotiranje */
void StartPilotiranje(void *argument) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartPilotiranje */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000d0c:	2064      	movs	r0, #100	; 0x64
 8000d0e:	f007 ff85 	bl	8008c1c <osDelay>
 8000d12:	e7fb      	b.n	8000d0c <StartPilotiranje+0x8>

08000d14 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d101      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d26:	f000 facd 	bl	80012c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40014400 	.word	0x40014400

08000d38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_MspInit+0x54>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <HAL_MspInit+0x54>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x54>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_MspInit+0x54>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_MspInit+0x54>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_MspInit+0x54>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	210f      	movs	r1, #15
 8000d8a:	f06f 0001 	mvn.w	r0, #1
 8000d8e:	f000 fb93 	bl	80014b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_I2C_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12c      	bne.n	8000e1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dde:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df0:	2304      	movs	r3, #4
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <HAL_I2C_MspInit+0x8c>)
 8000dfc:	f000 fb86 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40005400 	.word	0x40005400
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400

08000e30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a59      	ldr	r2, [pc, #356]	; (8000fb4 <HAL_I2S_MspInit+0x184>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d15b      	bne.n	8000f0a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
 8000e56:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a57      	ldr	r2, [pc, #348]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	623b      	str	r3, [r7, #32]
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	483e      	ldr	r0, [pc, #248]	; (8000fbc <HAL_I2S_MspInit+0x18c>)
 8000ec2:	f000 fb23 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4836      	ldr	r0, [pc, #216]	; (8000fbc <HAL_I2S_MspInit+0x18c>)
 8000ee2:	f000 fb13 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ee6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	482f      	ldr	r0, [pc, #188]	; (8000fc0 <HAL_I2S_MspInit+0x190>)
 8000f04:	f000 fb02 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f08:	e04f      	b.n	8000faa <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a2d      	ldr	r2, [pc, #180]	; (8000fc4 <HAL_I2S_MspInit+0x194>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d14a      	bne.n	8000faa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_I2S_MspInit+0x188>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f78:	2306      	movs	r3, #6
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <HAL_I2S_MspInit+0x198>)
 8000f84:	f000 fac2 	bl	800150c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f88:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_I2S_MspInit+0x18c>)
 8000fa6:	f000 fab1 	bl	800150c <HAL_GPIO_Init>
}
 8000faa:	bf00      	nop
 8000fac:	3738      	adds	r7, #56	; 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40003800 	.word	0x40003800
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40003c00 	.word	0x40003c00
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_SPI_MspInit+0x84>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12b      	bne.n	8001046 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_SPI_MspInit+0x88>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_SPI_MspInit+0x88>)
 8000ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_SPI_MspInit+0x88>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_SPI_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_SPI_MspInit+0x88>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_SPI_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001026:	23e0      	movs	r3, #224	; 0xe0
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001036:	2305      	movs	r3, #5
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_SPI_MspInit+0x8c>)
 8001042:	f000 fa63 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40013000 	.word	0x40013000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	2019      	movs	r0, #25
 8001072:	f000 fa21 	bl	80014b8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001076:	2019      	movs	r0, #25
 8001078:	f000 fa3a 	bl	80014f0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <HAL_InitTick+0xa0>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_InitTick+0xa0>)
 8001086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108a:	6453      	str	r3, [r2, #68]	; 0x44
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_InitTick+0xa0>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001098:	f107 0210 	add.w	r2, r7, #16
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fda8 	bl	8004bf8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010a8:	f003 fd92 	bl	8004bd0 <HAL_RCC_GetPCLK2Freq>
 80010ac:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_InitTick+0xa4>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9b      	lsrs	r3, r3, #18
 80010b8:	3b01      	subs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_InitTick+0xa8>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_InitTick+0xac>)
 80010c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_InitTick+0xa8>)
 80010c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_InitTick+0xa8>)
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_InitTick+0xa8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_InitTick+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_InitTick+0xa8>)
 80010de:	f004 fc5f 	bl	80059a0 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d104      	bne.n	80010f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_InitTick+0xa8>)
 80010ea:	f004 fc8e 	bl	8005a0a <HAL_TIM_Base_Start_IT>
 80010ee:	4603      	mov	r3, r0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3730      	adds	r7, #48	; 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	431bde83 	.word	0x431bde83
 8001104:	20005e5c 	.word	0x20005e5c
 8001108:	40014400 	.word	0x40014400

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001146:	f004 fc84 	bl	8005a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20005e5c 	.word	0x20005e5c

08001154 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <OTG_FS_IRQHandler+0x10>)
 800115a:	f002 f8e3 	bl	8003324 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200063fc 	.word	0x200063fc

08001168 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <_sbrk+0x50>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x16>
		heap_end = &end;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <_sbrk+0x50>)
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <_sbrk+0x54>)
 800117c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <_sbrk+0x50>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <_sbrk+0x50>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	466a      	mov	r2, sp
 800118e:	4293      	cmp	r3, r2
 8001190:	d907      	bls.n	80011a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001192:	f00a fe29 	bl	800bde8 <__errno>
 8001196:	4602      	mov	r2, r0
 8001198:	230c      	movs	r3, #12
 800119a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	e006      	b.n	80011b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <_sbrk+0x50>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <_sbrk+0x50>)
 80011ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	20006808 	.word	0x20006808

080011c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <SystemInit+0x60>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <SystemInit+0x60>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <SystemInit+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <SystemInit+0x64>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <SystemInit+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <SystemInit+0x64>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <SystemInit+0x64>)
 80011ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <SystemInit+0x64>)
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <SystemInit+0x68>)
 80011fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <SystemInit+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <SystemInit+0x64>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SystemInit+0x60>)
 8001210:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001214:	609a      	str	r2, [r3, #8]
#endif
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	40023800 	.word	0x40023800
 8001228:	24003010 	.word	0x24003010

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001230:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001232:	e003      	b.n	800123c <LoopCopyDataInit>

08001234 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001236:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001238:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800123a:	3104      	adds	r1, #4

0800123c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001240:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001244:	d3f6      	bcc.n	8001234 <CopyDataInit>
  ldr  r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001248:	e002      	b.n	8001250 <LoopFillZerobss>

0800124a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800124a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800124c:	f842 3b04 	str.w	r3, [r2], #4

08001250 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001254:	d3f9      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001256:	f7ff ffb3 	bl	80011c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f00a fdcb 	bl	800bdf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fa37 	bl	80006d0 <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001264:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001268:	0800c0c4 	.word	0x0800c0c4
  ldr  r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001270:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001274:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001278:	20006808 	.word	0x20006808

0800127c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_Init+0x40>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_Init+0x40>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x40>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f8fa 	bl	80014a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fed4 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fd48 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000004 	.word	0x20000004
 80012e8:	20005e9c 	.word	0x20005e9c

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20005e9c 	.word	0x20005e9c

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_Delay+0x40>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000004 	.word	0x20000004

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff4c 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ca:	f7ff ff61 	bl	8001390 <__NVIC_GetPriorityGrouping>
 80014ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	6978      	ldr	r0, [r7, #20]
 80014d6:	f7ff ffb1 	bl	800143c <NVIC_EncodePriority>
 80014da:	4602      	mov	r2, r0
 80014dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff80 	bl	80013e8 <__NVIC_SetPriority>
}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff54 	bl	80013ac <__NVIC_EnableIRQ>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e159      	b.n	80017dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8148 	bne.w	80017d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x4a>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b12      	cmp	r3, #18
 8001554:	d123      	bne.n	800159e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	69b9      	ldr	r1, [r7, #24]
 800159a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0203 	and.w	r2, r3, #3
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d00b      	beq.n	80015f2 <HAL_GPIO_Init+0xe6>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e6:	2b11      	cmp	r3, #17
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d130      	bne.n	8001654 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001628:	2201      	movs	r2, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 0201 	and.w	r2, r3, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a2 	beq.w	80017d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <HAL_GPIO_Init+0x2e4>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a55      	ldr	r2, [pc, #340]	; (80017f0 <HAL_GPIO_Init+0x2e4>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_GPIO_Init+0x2e4>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_GPIO_Init+0x2e8>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x202>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a47      	ldr	r2, [pc, #284]	; (80017fc <HAL_GPIO_Init+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x1fe>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a46      	ldr	r2, [pc, #280]	; (8001800 <HAL_GPIO_Init+0x2f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x1fa>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a45      	ldr	r2, [pc, #276]	; (8001804 <HAL_GPIO_Init+0x2f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x1f6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_GPIO_Init+0x2fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x1f2>
 80016fa:	2304      	movs	r3, #4
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x204>
 80016fe:	2307      	movs	r3, #7
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x204>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x204>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x204>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x204>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4934      	ldr	r1, [pc, #208]	; (80017f4 <HAL_GPIO_Init+0x2e8>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_GPIO_Init+0x300>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001752:	4a2e      	ldr	r2, [pc, #184]	; (800180c <HAL_GPIO_Init+0x300>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001758:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_GPIO_Init+0x300>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <HAL_GPIO_Init+0x300>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_GPIO_Init+0x300>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_GPIO_Init+0x300>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_GPIO_Init+0x300>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_GPIO_Init+0x300>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f aea2 	bls.w	8001528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40021000 	.word	0x40021000
 800180c:	40013c00 	.word	0x40013c00

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e10f      	b.n	8001a76 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fa98 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001888:	f003 f98e 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 800188c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a7b      	ldr	r2, [pc, #492]	; (8001a80 <HAL_I2C_Init+0x23c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d807      	bhi.n	80018a8 <HAL_I2C_Init+0x64>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <HAL_I2C_Init+0x240>)
 800189c:	4293      	cmp	r3, r2
 800189e:	bf94      	ite	ls
 80018a0:	2301      	movls	r3, #1
 80018a2:	2300      	movhi	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e006      	b.n	80018b6 <HAL_I2C_Init+0x72>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4a77      	ldr	r2, [pc, #476]	; (8001a88 <HAL_I2C_Init+0x244>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	bf94      	ite	ls
 80018b0:	2301      	movls	r3, #1
 80018b2:	2300      	movhi	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0db      	b.n	8001a76 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_I2C_Init+0x248>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0c9b      	lsrs	r3, r3, #18
 80018c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a64      	ldr	r2, [pc, #400]	; (8001a80 <HAL_I2C_Init+0x23c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d802      	bhi.n	80018f8 <HAL_I2C_Init+0xb4>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3301      	adds	r3, #1
 80018f6:	e009      	b.n	800190c <HAL_I2C_Init+0xc8>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_I2C_Init+0x24c>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	3301      	adds	r3, #1
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800191e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4956      	ldr	r1, [pc, #344]	; (8001a80 <HAL_I2C_Init+0x23c>)
 8001928:	428b      	cmp	r3, r1
 800192a:	d80d      	bhi.n	8001948 <HAL_I2C_Init+0x104>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e59      	subs	r1, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fbb1 f3f3 	udiv	r3, r1, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	2b04      	cmp	r3, #4
 8001942:	bf38      	it	cc
 8001944:	2304      	movcc	r3, #4
 8001946:	e04f      	b.n	80019e8 <HAL_I2C_Init+0x1a4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <HAL_I2C_Init+0x130>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	440b      	add	r3, r1
 800195e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e012      	b.n	800199a <HAL_I2C_Init+0x156>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1e58      	subs	r0, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	0099      	lsls	r1, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Init+0x15e>
 800199e:	2301      	movs	r3, #1
 80019a0:	e022      	b.n	80019e8 <HAL_I2C_Init+0x1a4>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10e      	bne.n	80019c8 <HAL_I2C_Init+0x184>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1e58      	subs	r0, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	440b      	add	r3, r1
 80019b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c6:	e00f      	b.n	80019e8 <HAL_I2C_Init+0x1a4>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0099      	lsls	r1, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6911      	ldr	r1, [r2, #16]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68d2      	ldr	r2, [r2, #12]
 8001a22:	4311      	orrs	r1, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	000186a0 	.word	0x000186a0
 8001a84:	001e847f 	.word	0x001e847f
 8001a88:	003d08ff 	.word	0x003d08ff
 8001a8c:	431bde83 	.word	0x431bde83
 8001a90:	10624dd3 	.word	0x10624dd3

08001a94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	817b      	strh	r3, [r7, #10]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	813b      	strh	r3, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aae:	f7ff fc1d 	bl	80012ec <HAL_GetTick>
 8001ab2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	f040 80d9 	bne.w	8001c74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2319      	movs	r3, #25
 8001ac8:	2201      	movs	r2, #1
 8001aca:	496d      	ldr	r1, [pc, #436]	; (8001c80 <HAL_I2C_Mem_Write+0x1ec>)
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fc5b 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e0cc      	b.n	8001c76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_I2C_Mem_Write+0x56>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e0c5      	b.n	8001c76 <HAL_I2C_Mem_Write+0x1e2>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d007      	beq.n	8001b10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2221      	movs	r2, #33	; 0x21
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a4d      	ldr	r2, [pc, #308]	; (8001c84 <HAL_I2C_Mem_Write+0x1f0>)
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b52:	88f8      	ldrh	r0, [r7, #6]
 8001b54:	893a      	ldrh	r2, [r7, #8]
 8001b56:	8979      	ldrh	r1, [r7, #10]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4603      	mov	r3, r0
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fab6 	bl	80020d4 <I2C_RequestMemoryWrite>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d052      	beq.n	8001c14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e081      	b.n	8001c76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fcdc 	bl	8002534 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d107      	bne.n	8001b9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d11b      	bne.n	8001c14 <HAL_I2C_Mem_Write+0x180>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d017      	beq.n	8001c14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1aa      	bne.n	8001b72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fcc8 	bl	80025b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00d      	beq.n	8001c48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d107      	bne.n	8001c44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e016      	b.n	8001c76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e000      	b.n	8001c76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c74:	2302      	movs	r3, #2
  }
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	00100002 	.word	0x00100002
 8001c84:	ffff0000 	.word	0xffff0000

08001c88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	817b      	strh	r3, [r7, #10]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	813b      	strh	r3, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca2:	f7ff fb23 	bl	80012ec <HAL_GetTick>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	f040 8208 	bne.w	80020c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2319      	movs	r3, #25
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	497b      	ldr	r1, [pc, #492]	; (8001eac <HAL_I2C_Mem_Read+0x224>)
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fb61 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e1fb      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_I2C_Mem_Read+0x56>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e1f4      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d007      	beq.n	8001d04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2222      	movs	r2, #34	; 0x22
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a5b      	ldr	r2, [pc, #364]	; (8001eb0 <HAL_I2C_Mem_Read+0x228>)
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d46:	88f8      	ldrh	r0, [r7, #6]
 8001d48:	893a      	ldrh	r2, [r7, #8]
 8001d4a:	8979      	ldrh	r1, [r7, #10]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4603      	mov	r3, r0
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fa46 	bl	80021e8 <I2C_RequestMemoryRead>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e1b0      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d113      	bne.n	8001d96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e184      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e164      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d11b      	bne.n	8001e16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	e144      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e2c:	e138      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	f200 80f1 	bhi.w	800201a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d123      	bne.n	8001e88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fbf7 	bl	8002638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e139      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e86:	e10b      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d14e      	bne.n	8001f2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	2200      	movs	r2, #0
 8001e98:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <HAL_I2C_Mem_Read+0x22c>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fa74 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e10e      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
 8001eaa:	bf00      	nop
 8001eac:	00100002 	.word	0x00100002
 8001eb0:	ffff0000 	.word	0xffff0000
 8001eb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f2c:	e0b8      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	2200      	movs	r2, #0
 8001f36:	4966      	ldr	r1, [pc, #408]	; (80020d0 <HAL_I2C_Mem_Read+0x448>)
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fa25 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0bf      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	2200      	movs	r2, #0
 8001f92:	494f      	ldr	r1, [pc, #316]	; (80020d0 <HAL_I2C_Mem_Read+0x448>)
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f9f7 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e091      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002018:	e042      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fb0a 	bl	8002638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e04c      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d118      	bne.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f47f aec2 	bne.w	8001e2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	00010004 	.word	0x00010004

080020d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	817b      	strh	r3, [r7, #10]
 80020e6:	460b      	mov	r3, r1
 80020e8:	813b      	strh	r3, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	2200      	movs	r2, #0
 8002106:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f93c 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e05f      	b.n	80021da <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800211a:	897b      	ldrh	r3, [r7, #10]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	492d      	ldr	r1, [pc, #180]	; (80021e4 <I2C_RequestMemoryWrite+0x110>)
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f980 	bl	8002436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e04c      	b.n	80021da <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	6a39      	ldr	r1, [r7, #32]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f9ea 	bl	8002534 <I2C_WaitOnTXEFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b04      	cmp	r3, #4
 800216c:	d107      	bne.n	800217e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e02b      	b.n	80021da <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002188:	893b      	ldrh	r3, [r7, #8]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	e021      	b.n	80021d8 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002194:	893b      	ldrh	r3, [r7, #8]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b29b      	uxth	r3, r3
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	6a39      	ldr	r1, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f9c4 	bl	8002534 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d107      	bne.n	80021ca <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e005      	b.n	80021da <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ce:	893b      	ldrh	r3, [r7, #8]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	00010002 	.word	0x00010002

080021e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	817b      	strh	r3, [r7, #10]
 80021fa:	460b      	mov	r3, r1
 80021fc:	813b      	strh	r3, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002210:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2200      	movs	r2, #0
 800222a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f8aa 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e09e      	b.n	800237c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223e:	897b      	ldrh	r3, [r7, #10]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800224c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	494c      	ldr	r1, [pc, #304]	; (8002384 <I2C_RequestMemoryRead+0x19c>)
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f8ee 	bl	8002436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e08b      	b.n	800237c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f958 	bl	8002534 <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06a      	b.n	800237c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ac:	893b      	ldrh	r3, [r7, #8]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	611a      	str	r2, [r3, #16]
 80022b6:	e021      	b.n	80022fc <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022b8:	893b      	ldrh	r3, [r7, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f932 	bl	8002534 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e044      	b.n	800237c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022f2:	893b      	ldrh	r3, [r7, #8]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	6a39      	ldr	r1, [r7, #32]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f917 	bl	8002534 <I2C_WaitOnTXEFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2b04      	cmp	r3, #4
 8002312:	d107      	bne.n	8002324 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002322:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e029      	b.n	800237c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002336:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	2200      	movs	r2, #0
 8002340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f81f 	bl	8002388 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e013      	b.n	800237c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002354:	897b      	ldrh	r3, [r7, #10]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	6a3a      	ldr	r2, [r7, #32]
 8002368:	4906      	ldr	r1, [pc, #24]	; (8002384 <I2C_RequestMemoryRead+0x19c>)
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f863 	bl	8002436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	00010002 	.word	0x00010002

08002388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002398:	e025      	b.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d021      	beq.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a2:	f7fe ffa3 	bl	80012ec <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d302      	bcc.n	80023b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d116      	bne.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e023      	b.n	800242e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10d      	bne.n	800240c <I2C_WaitOnFlagUntilTimeout+0x84>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	e00c      	b.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	429a      	cmp	r2, r3
 800242a:	d0b6      	beq.n	800239a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002444:	e051      	b.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002454:	d123      	bne.n	800249e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002464:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800246e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0204 	orr.w	r2, r3, #4
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e046      	b.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d021      	beq.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a6:	f7fe ff21 	bl	80012ec <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d302      	bcc.n	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e020      	b.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10c      	bne.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4013      	ands	r3, r2
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	e00b      	b.n	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	43da      	mvns	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4013      	ands	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d18d      	bne.n	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002540:	e02d      	b.n	800259e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f8ce 	bl	80026e4 <I2C_IsAcknowledgeFailed>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e02d      	b.n	80025ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d021      	beq.n	800259e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7fe fec7 	bl	80012ec <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e007      	b.n	80025ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b80      	cmp	r3, #128	; 0x80
 80025aa:	d1ca      	bne.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025c2:	e02d      	b.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f88d 	bl	80026e4 <I2C_IsAcknowledgeFailed>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e02d      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025da:	d021      	beq.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025dc:	f7fe fe86 	bl	80012ec <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d302      	bcc.n	80025f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d116      	bne.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d1ca      	bne.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002644:	e042      	b.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d119      	bne.n	8002688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0210 	mvn.w	r2, #16
 800265c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e029      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002688:	f7fe fe30 	bl	80012ec <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	d302      	bcc.n	800269e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e007      	b.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d1b5      	bne.n	8002646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d11b      	bne.n	8002734 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002704:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0204 	orr.w	r2, r3, #4
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e128      	b.n	80029a8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a90      	ldr	r2, [pc, #576]	; (80029b0 <HAL_I2S_Init+0x26c>)
 800276e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7fe fb5d 	bl	8000e30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800278c:	f023 030f 	bic.w	r3, r3, #15
 8002790:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2202      	movs	r2, #2
 8002798:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d060      	beq.n	8002864 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027aa:	2310      	movs	r3, #16
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e001      	b.n	80027b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d802      	bhi.n	80027c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f002 fb3a 	bl	8004e3c <HAL_RCCEx_GetPeriphCLKFreq>
 80027c8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d2:	d125      	bne.n	8002820 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d010      	beq.n	80027fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	3305      	adds	r3, #5
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e01f      	b.n	800283e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	fbb2 f2f3 	udiv	r2, r2, r3
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	461a      	mov	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	3305      	adds	r3, #5
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	e00e      	b.n	800283e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fbb2 f2f3 	udiv	r2, r2, r3
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	461a      	mov	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	3305      	adds	r3, #5
 800283c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4a5c      	ldr	r2, [pc, #368]	; (80029b4 <HAL_I2S_Init+0x270>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e003      	b.n	800286c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002864:	2302      	movs	r3, #2
 8002866:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d902      	bls.n	8002878 <HAL_I2S_Init+0x134>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2bff      	cmp	r3, #255	; 0xff
 8002876:	d907      	bls.n	8002888 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e08f      	b.n	80029a8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	ea42 0103 	orr.w	r1, r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	430a      	orrs	r2, r1
 800289a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028a6:	f023 030f 	bic.w	r3, r3, #15
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6851      	ldr	r1, [r2, #4]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68d2      	ldr	r2, [r2, #12]
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6992      	ldr	r2, [r2, #24]
 80028be:	430a      	orrs	r2, r1
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d161      	bne.n	8002998 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a38      	ldr	r2, [pc, #224]	; (80029b8 <HAL_I2S_Init+0x274>)
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a37      	ldr	r2, [pc, #220]	; (80029bc <HAL_I2S_Init+0x278>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_I2S_Init+0x1a4>
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_I2S_Init+0x27c>)
 80028e6:	e001      	b.n	80028ec <HAL_I2S_Init+0x1a8>
 80028e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4932      	ldr	r1, [pc, #200]	; (80029bc <HAL_I2S_Init+0x278>)
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d101      	bne.n	80028fc <HAL_I2S_Init+0x1b8>
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_I2S_Init+0x27c>)
 80028fa:	e001      	b.n	8002900 <HAL_I2S_Init+0x1bc>
 80028fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002900:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002904:	f023 030f 	bic.w	r3, r3, #15
 8002908:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_I2S_Init+0x278>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_I2S_Init+0x1d4>
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_I2S_Init+0x27c>)
 8002916:	e001      	b.n	800291c <HAL_I2S_Init+0x1d8>
 8002918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291c:	2202      	movs	r2, #2
 800291e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_I2S_Init+0x278>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_I2S_Init+0x1ea>
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_I2S_Init+0x27c>)
 800292c:	e001      	b.n	8002932 <HAL_I2S_Init+0x1ee>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293e:	d003      	beq.n	8002948 <HAL_I2S_Init+0x204>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e001      	b.n	8002954 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	b299      	uxth	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800296a:	4303      	orrs	r3, r0
 800296c:	b29b      	uxth	r3, r3
 800296e:	430b      	orrs	r3, r1
 8002970:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002972:	4313      	orrs	r3, r2
 8002974:	b29a      	uxth	r2, r3
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	4313      	orrs	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002980:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_I2S_Init+0x278>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_I2S_Init+0x24c>
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_I2S_Init+0x27c>)
 800298e:	e001      	b.n	8002994 <HAL_I2S_Init+0x250>
 8002990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002994:	897a      	ldrh	r2, [r7, #10]
 8002996:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	08002abb 	.word	0x08002abb
 80029b4:	cccccccd 	.word	0xcccccccd
 80029b8:	08002bd1 	.word	0x08002bd1
 80029bc:	40003800 	.word	0x40003800
 80029c0:	40003400 	.word	0x40003400

080029c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10e      	bne.n	8002a54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffb8 	bl	80029c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	1c9a      	adds	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10e      	bne.n	8002ab2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aa2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff93 	bl	80029d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d13a      	bne.n	8002b4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d109      	bne.n	8002af4 <I2S_IRQHandler+0x3a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d102      	bne.n	8002af4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffb4 	bl	8002a5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d126      	bne.n	8002b4c <I2S_IRQHandler+0x92>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d11f      	bne.n	8002b4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff50 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d136      	bne.n	8002bc6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d109      	bne.n	8002b76 <I2S_IRQHandler+0xbc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d102      	bne.n	8002b76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff45 	bl	8002a00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d122      	bne.n	8002bc6 <I2S_IRQHandler+0x10c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d11b      	bne.n	8002bc6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f043 0204 	orr.w	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff13 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4aa2      	ldr	r2, [pc, #648]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bea:	4ba2      	ldr	r3, [pc, #648]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a9b      	ldr	r2, [pc, #620]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c08:	4b9a      	ldr	r3, [pc, #616]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c0a:	e001      	b.n	8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1c:	d004      	beq.n	8002c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8099 	bne.w	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d107      	bne.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f925 	bl	8002e8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9c8 	bl	8002fec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d13a      	bne.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d035      	beq.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c7a:	4b7e      	ldr	r3, [pc, #504]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c7c:	e001      	b.n	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4979      	ldr	r1, [pc, #484]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c8a:	428b      	cmp	r3, r1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c8e:	4b79      	ldr	r3, [pc, #484]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c90:	e001      	b.n	8002c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002caa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fe88 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	f040 80be 	bne.w	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80b8 	beq.w	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a59      	ldr	r2, [pc, #356]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d10:	e001      	b.n	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4954      	ldr	r1, [pc, #336]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d1e:	428b      	cmp	r3, r1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d24:	e001      	b.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fe4a 	bl	80029ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d58:	e084      	b.n	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d107      	bne.n	8002d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8be 	bl	8002ef0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8fd 	bl	8002f88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d12f      	bne.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02a      	beq.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002db0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dbe:	e001      	b.n	8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4929      	ldr	r1, [pc, #164]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dd2:	e001      	b.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ddc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fdfa 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d131      	bne.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02c      	beq.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e18:	e001      	b.n	8002e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4912      	ldr	r1, [pc, #72]	; (8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e26:	428b      	cmp	r3, r1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e2c:	e001      	b.n	8002e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e46:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f043 0204 	orr.w	r2, r3, #4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fdc5 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e62:	e000      	b.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e64:	bf00      	nop
}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40003800 	.word	0x40003800
 8002e74:	40003400 	.word	0x40003400

08002e78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	1c99      	adds	r1, r3, #2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6251      	str	r1, [r2, #36]	; 0x24
 8002e9e:	881a      	ldrh	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ecc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffc9 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	1c99      	adds	r1, r3, #2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6251      	str	r1, [r2, #36]	; 0x24
 8002f02:	8819      	ldrh	r1, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <I2SEx_TxISR_I2SExt+0x90>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <I2SEx_TxISR_I2SExt+0x22>
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <I2SEx_TxISR_I2SExt+0x94>)
 8002f10:	e001      	b.n	8002f16 <I2SEx_TxISR_I2SExt+0x26>
 8002f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f16:	460a      	mov	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d121      	bne.n	8002f76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <I2SEx_TxISR_I2SExt+0x90>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d101      	bne.n	8002f40 <I2SEx_TxISR_I2SExt+0x50>
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <I2SEx_TxISR_I2SExt+0x94>)
 8002f3e:	e001      	b.n	8002f44 <I2SEx_TxISR_I2SExt+0x54>
 8002f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	490d      	ldr	r1, [pc, #52]	; (8002f80 <I2SEx_TxISR_I2SExt+0x90>)
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d101      	bne.n	8002f54 <I2SEx_TxISR_I2SExt+0x64>
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <I2SEx_TxISR_I2SExt+0x94>)
 8002f52:	e001      	b.n	8002f58 <I2SEx_TxISR_I2SExt+0x68>
 8002f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff81 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40003800 	.word	0x40003800
 8002f84:	40003400 	.word	0x40003400

08002f88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68d8      	ldr	r0, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	1c99      	adds	r1, r3, #2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fa0:	b282      	uxth	r2, r0
 8002fa2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d113      	bne.n	8002fe4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff4a 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <I2SEx_RxISR_I2SExt+0x90>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <I2SEx_RxISR_I2SExt+0x16>
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <I2SEx_RxISR_I2SExt+0x94>)
 8003000:	e001      	b.n	8003006 <I2SEx_RxISR_I2SExt+0x1a>
 8003002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003006:	68d8      	ldr	r0, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	1c99      	adds	r1, r3, #2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003012:	b282      	uxth	r2, r0
 8003014:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d121      	bne.n	8003072 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <I2SEx_RxISR_I2SExt+0x90>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <I2SEx_RxISR_I2SExt+0x50>
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <I2SEx_RxISR_I2SExt+0x94>)
 800303a:	e001      	b.n	8003040 <I2SEx_RxISR_I2SExt+0x54>
 800303c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <I2SEx_RxISR_I2SExt+0x90>)
 8003048:	428b      	cmp	r3, r1
 800304a:	d101      	bne.n	8003050 <I2SEx_RxISR_I2SExt+0x64>
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <I2SEx_RxISR_I2SExt+0x94>)
 800304e:	e001      	b.n	8003054 <I2SEx_RxISR_I2SExt+0x68>
 8003050:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003058:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff03 	bl	8002e78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40003800 	.word	0x40003800
 8003080:	40003400 	.word	0x40003400

08003084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003086:	b08f      	sub	sp, #60	; 0x3c
 8003088:	af0a      	add	r7, sp, #40	; 0x28
 800308a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e10f      	b.n	80032b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f008 fb95 	bl	800b7e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 ff96 	bl	8006006 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	687e      	ldr	r6, [r7, #4]
 80030e2:	466d      	mov	r5, sp
 80030e4:	f106 0410 	add.w	r4, r6, #16
 80030e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f8:	1d33      	adds	r3, r6, #4
 80030fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fc:	6838      	ldr	r0, [r7, #0]
 80030fe:	f002 fe6d 	bl	8005ddc <USB_CoreInit>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0d0      	b.n	80032b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f002 ff84 	bl	8006028 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e04a      	b.n	80031bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	333d      	adds	r3, #61	; 0x3d
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	333c      	adds	r3, #60	; 0x3c
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	b298      	uxth	r0, r3
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3342      	adds	r3, #66	; 0x42
 8003162:	4602      	mov	r2, r0
 8003164:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	333f      	adds	r3, #63	; 0x3f
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3344      	adds	r3, #68	; 0x44
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	3348      	adds	r3, #72	; 0x48
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3350      	adds	r3, #80	; 0x50
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	3301      	adds	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3af      	bcc.n	8003126 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
 80031ca:	e044      	b.n	8003256 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	3301      	adds	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d3b5      	bcc.n	80031cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	687e      	ldr	r6, [r7, #4]
 8003268:	466d      	mov	r5, sp
 800326a:	f106 0410 	add.w	r4, r6, #16
 800326e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800327a:	e885 0003 	stmia.w	r5, {r0, r1}
 800327e:	1d33      	adds	r3, r6, #4
 8003280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003282:	6838      	ldr	r0, [r7, #0]
 8003284:	f002 fefa 	bl	800607c <USB_DevInit>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e00d      	b.n	80032b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 feef 	bl	8007092 <USB_DevDisconnect>

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_PCD_Start+0x1c>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e020      	b.n	800331c <HAL_PCD_Start+0x5e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d109      	bne.n	80032fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d005      	beq.n	80032fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fead 	bl	8007062 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f002 fe69 	bl	8005fe4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b08d      	sub	sp, #52	; 0x34
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f003 ff54 	bl	80071e8 <USB_GetMode>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 838e 	bne.w	8003a64 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 feb8 	bl	80070c2 <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8384 	beq.w	8003a62 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f003 feaf 	bl	80070c2 <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d107      	bne.n	800337e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f002 0202 	and.w	r2, r2, #2
 800337c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f003 fe9d 	bl	80070c2 <USB_ReadInterrupts>
 8003388:	4603      	mov	r3, r0
 800338a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003392:	d17b      	bne.n	800348c <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 fea3 	bl	80070e8 <USB_ReadDevAllOutEpInterrupt>
 80033a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033a4:	e06f      	b.n	8003486 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d064      	beq.n	800347a <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fec8 	bl	8007150 <USB_ReadDevOutEPInterrupt>
 80033c0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00c      	beq.n	80033e6 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	2301      	movs	r3, #1
 80033dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fe0d 	bl	8004000 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 ff0c 	bl	8004210 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	2308      	movs	r3, #8
 8003408:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	2310      	movs	r3, #16
 8003424:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d108      	bne.n	800344a <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003442:	461a      	mov	r2, r3
 8003444:	2101      	movs	r1, #1
 8003446:	f003 ff13 	bl	8007270 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	2320      	movs	r3, #32
 800345a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003478:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	3301      	adds	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d18c      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f003 fe16 	bl	80070c2 <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a0:	f040 80c4 	bne.w	800362c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f003 fe37 	bl	800711c <USB_ReadDevAllInEpInterrupt>
 80034ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034b4:	e0b6      	b.n	8003624 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80ab 	beq.w	8003618 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fe5d 	bl	800718c <USB_ReadDevInEPInterrupt>
 80034d2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d05b      	beq.n	8003596 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	2201      	movs	r2, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69f9      	ldr	r1, [r7, #28]
 80034fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034fe:	4013      	ands	r3, r2
 8003500:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	461a      	mov	r2, r3
 8003510:	2301      	movs	r3, #1
 8003512:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d11b      	bne.n	8003554 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	3348      	adds	r3, #72	; 0x48
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4403      	add	r3, r0
 800353c:	3344      	adds	r3, #68	; 0x44
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4419      	add	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4403      	add	r3, r0
 8003550:	3348      	adds	r3, #72	; 0x48
 8003552:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f008 f9cf 	bl	800b8fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d116      	bne.n	8003596 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d113      	bne.n	8003596 <HAL_PCD_IRQHandler+0x272>
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3350      	adds	r3, #80	; 0x50
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d108      	bne.n	8003596 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800358e:	461a      	mov	r2, r3
 8003590:	2101      	movs	r1, #1
 8003592:	f003 fe6d 	bl	8007270 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2308      	movs	r3, #8
 80035b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c8:	461a      	mov	r2, r3
 80035ca:	2310      	movs	r3, #16
 80035cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e4:	461a      	mov	r2, r3
 80035e6:	2340      	movs	r3, #64	; 0x40
 80035e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003600:	461a      	mov	r2, r3
 8003602:	2302      	movs	r3, #2
 8003604:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fc67 	bl	8003ee6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	3301      	adds	r3, #1
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	f47f af45 	bne.w	80034b6 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f003 fd46 	bl	80070c2 <USB_ReadInterrupts>
 8003636:	4603      	mov	r3, r0
 8003638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800363c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003640:	d122      	bne.n	8003688 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800365c:	2b01      	cmp	r3, #1
 800365e:	d108      	bne.n	8003672 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003668:	2100      	movs	r1, #0
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fe88 	bl	8004380 <HAL_PCDEx_LPM_Callback>
 8003670:	e002      	b.n	8003678 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f008 f9b0 	bl	800b9d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f003 fd18 	bl	80070c2 <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d112      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d102      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f008 f96c 	bl	800b98c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fcfa 	bl	80070c2 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d8:	f040 80a7 	bne.w	800382a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2110      	movs	r1, #16
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 fe32 	bl	8006360 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003700:	e036      	b.n	8003770 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	461a      	mov	r2, r3
 8003710:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003714:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	440a      	add	r2, r1
 800372c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003730:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003734:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003742:	461a      	mov	r2, r3
 8003744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003748:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375a:	0151      	lsls	r1, r2, #5
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	440a      	add	r2, r1
 8003760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003764:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003768:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	3301      	adds	r3, #1
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003776:	429a      	cmp	r2, r3
 8003778:	d3c3      	bcc.n	8003702 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003788:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800378c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a6:	f043 030b 	orr.w	r3, r3, #11
 80037aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037bc:	f043 030b 	orr.w	r3, r3, #11
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	e015      	b.n	80037f0 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ea:	f043 030b 	orr.w	r3, r3, #11
 80037ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003802:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003814:	461a      	mov	r2, r3
 8003816:	f003 fd2b 	bl	8007270 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f003 fc47 	bl	80070c2 <USB_ReadInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d124      	bne.n	800388a <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fcdd 	bl	8007204 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f002 fde7 	bl	8006422 <USB_GetDevSpeed>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681c      	ldr	r4, [r3, #0]
 8003860:	f001 f996 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8003864:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	4620      	mov	r0, r4
 8003870:	f002 fb16 	bl	8005ea0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f008 f86a 	bl	800b94e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003888:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fc17 	bl	80070c2 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b10      	cmp	r3, #16
 800389c:	d161      	bne.n	8003962 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0210 	bic.w	r2, r2, #16
 80038ac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 020f 	and.w	r2, r3, #15
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	3304      	adds	r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	0c5b      	lsrs	r3, r3, #17
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d124      	bne.n	8003924 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d035      	beq.n	8003952 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	6a38      	ldr	r0, [r7, #32]
 80038fa:	f003 fa8f 	bl	8006e1c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800390a:	441a      	add	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800391c:	441a      	add	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	619a      	str	r2, [r3, #24]
 8003922:	e016      	b.n	8003952 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	0c5b      	lsrs	r3, r3, #17
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	2b06      	cmp	r3, #6
 800392e:	d110      	bne.n	8003952 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003936:	2208      	movs	r2, #8
 8003938:	4619      	mov	r1, r3
 800393a:	6a38      	ldr	r0, [r7, #32]
 800393c:	f003 fa6e 	bl	8006e1c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800394c:	441a      	add	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0210 	orr.w	r2, r2, #16
 8003960:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f003 fbab 	bl	80070c2 <USB_ReadInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b08      	cmp	r3, #8
 8003974:	d10a      	bne.n	800398c <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f007 ffdb 	bl	800b932 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f002 0208 	and.w	r2, r2, #8
 800398a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f003 fb96 	bl	80070c2 <USB_ReadInterrupts>
 8003996:	4603      	mov	r3, r0
 8003998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a0:	d10f      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f008 f833 	bl	800ba18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 fb7b 	bl	80070c2 <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d6:	d10f      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f008 f806 	bl	800b9f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fb60 	bl	80070c2 <USB_ReadInterrupts>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d10a      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f008 f814 	bl	800ba3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 fb4a 	bl	80070c2 <USB_ReadInterrupts>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d115      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f008 f804 	bl	800ba58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	e000      	b.n	8003a64 <HAL_PCD_IRQHandler+0x740>
      return;
 8003a62:	bf00      	nop
    }
  }
}
 8003a64:	3734      	adds	r7, #52	; 0x34
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}

08003a6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_SetAddress+0x1a>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e013      	b.n	8003aac <HAL_PCD_SetAddress+0x42>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 faba 	bl	8007016 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	70fb      	strb	r3, [r7, #3]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	803b      	strh	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da0f      	bge.n	8003afa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3338      	adds	r3, #56	; 0x38
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	705a      	strb	r2, [r3, #1]
 8003af8:	e00f      	b.n	8003b1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	3304      	adds	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b26:	883a      	ldrh	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	78ba      	ldrb	r2, [r7, #2]
 8003b30:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b44:	78bb      	ldrb	r3, [r7, #2]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d102      	bne.n	8003b50 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_PCD_EP_Open+0xaa>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e00e      	b.n	8003b7c <HAL_PCD_EP_Open+0xc8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 fc7d 	bl	800646c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	da0f      	bge.n	8003bb8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 020f 	and.w	r2, r3, #15
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	3338      	adds	r3, #56	; 0x38
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	3304      	adds	r3, #4
 8003bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	705a      	strb	r2, [r3, #1]
 8003bb6:	e00f      	b.n	8003bd8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_PCD_EP_Close+0x6e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e00e      	b.n	8003c10 <HAL_PCD_EP_Close+0x8c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f002 fcbb 	bl	800657c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	460b      	mov	r3, r1
 8003c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3304      	adds	r3, #4
 8003c40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d102      	bne.n	8003c74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	f002 ff3e 	bl	8006b0c <USB_EP0StartXfer>
 8003c90:	e008      	b.n	8003ca4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	f002 fcf0 	bl	8006684 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cd0:	681b      	ldr	r3, [r3, #0]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	460b      	mov	r3, r1
 8003cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	3338      	adds	r3, #56	; 0x38
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	3304      	adds	r3, #4
 8003d04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d102      	bne.n	8003d38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6979      	ldr	r1, [r7, #20]
 8003d50:	f002 fedc 	bl	8006b0c <USB_EP0StartXfer>
 8003d54:	e008      	b.n	8003d68 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	6979      	ldr	r1, [r7, #20]
 8003d64:	f002 fc8e 	bl	8006684 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 020f 	and.w	r2, r3, #15
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d901      	bls.n	8003d90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e050      	b.n	8003e32 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da0f      	bge.n	8003db8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 020f 	and.w	r2, r3, #15
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	3338      	adds	r3, #56	; 0x38
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	705a      	strb	r2, [r3, #1]
 8003db6:	e00d      	b.n	8003dd4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_PCD_EP_SetStall+0x82>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e01e      	b.n	8003e32 <HAL_PCD_EP_SetStall+0xc0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f003 f833 	bl	8006e6e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	b2d9      	uxtb	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e22:	461a      	mov	r2, r3
 8003e24:	f003 fa24 	bl	8007270 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d901      	bls.n	8003e58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e042      	b.n	8003ede <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da0f      	bge.n	8003e80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3338      	adds	r3, #56	; 0x38
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	705a      	strb	r2, [r3, #1]
 8003e7e:	e00f      	b.n	8003ea0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	f003 020f 	and.w	r2, r3, #15
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	3304      	adds	r3, #4
 8003e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_PCD_EP_ClrStall+0x86>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e00e      	b.n	8003ede <HAL_PCD_EP_ClrStall+0xa4>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 f83b 	bl	8006f4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b08a      	sub	sp, #40	; 0x28
 8003eea:	af02      	add	r7, sp, #8
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	3338      	adds	r3, #56	; 0x38
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d901      	bls.n	8003f1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06c      	b.n	8003ff8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d902      	bls.n	8003f3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3303      	adds	r3, #3
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f42:	e02b      	b.n	8003f9c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d902      	bls.n	8003f60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3303      	adds	r3, #3
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68d9      	ldr	r1, [r3, #12]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	6978      	ldr	r0, [r7, #20]
 8003f80:	f002 ff17 	bl	8006db2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	441a      	add	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	441a      	add	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d809      	bhi.n	8003fc6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d203      	bcs.n	8003fc6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1be      	bne.n	8003f44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d811      	bhi.n	8003ff6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	2201      	movs	r2, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	6939      	ldr	r1, [r7, #16]
 8003fee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	333c      	adds	r3, #60	; 0x3c
 8004018:	3304      	adds	r3, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b01      	cmp	r3, #1
 8004034:	f040 80b3 	bne.w	800419e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d028      	beq.n	8004094 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a70      	ldr	r2, [pc, #448]	; (8004208 <PCD_EP_OutXfrComplete_int+0x208>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d90e      	bls.n	8004068 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f007 fc1b 	bl	800b8a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004078:	461a      	mov	r2, r3
 800407a:	2101      	movs	r1, #1
 800407c:	f003 f8f8 	bl	8007270 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	2308      	movs	r3, #8
 8004090:	6093      	str	r3, [r2, #8]
 8004092:	e0b3      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	461a      	mov	r2, r3
 80040ac:	2320      	movs	r3, #32
 80040ae:	6093      	str	r3, [r2, #8]
 80040b0:	e0a4      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 809f 	bne.w	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a51      	ldr	r2, [pc, #324]	; (8004208 <PCD_EP_OutXfrComplete_int+0x208>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d90f      	bls.n	80040e6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040dc:	461a      	mov	r2, r3
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	6093      	str	r3, [r2, #8]
 80040e4:	e08a      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040f8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	0159      	lsls	r1, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	440b      	add	r3, r1
 8004102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800410c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4403      	add	r3, r0
 800411c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004120:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4403      	add	r3, r0
 8004144:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4419      	add	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4403      	add	r3, r0
 800415a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800415e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f007 fbae 	bl	800b8c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d144      	bne.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d138      	bne.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004194:	461a      	mov	r2, r3
 8004196:	2101      	movs	r1, #1
 8004198:	f003 f86a 	bl	8007270 <USB_EP0_OutStart>
 800419c:	e02e      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <PCD_EP_OutXfrComplete_int+0x20c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d124      	bne.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	e01a      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	2320      	movs	r3, #32
 80041e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f007 fb6d 	bl	800b8c8 <HAL_PCD_DataOutStageCallback>
 80041ee:	e005      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f007 fb66 	bl	800b8c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	4f54300a 	.word	0x4f54300a
 800420c:	4f54310a 	.word	0x4f54310a

08004210 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	333c      	adds	r3, #60	; 0x3c
 8004228:	3304      	adds	r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d113      	bne.n	800426e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a1f      	ldr	r2, [pc, #124]	; (80042c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d922      	bls.n	8004294 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01d      	beq.n	8004294 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426a:	6093      	str	r3, [r2, #8]
 800426c:	e012      	b.n	8004294 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a16      	ldr	r2, [pc, #88]	; (80042cc <PCD_EP_OutSetupPacket_int+0xbc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10e      	bne.n	8004294 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004292:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f007 fb05 	bl	800b8a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d90c      	bls.n	80042bc <PCD_EP_OutSetupPacket_int+0xac>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d108      	bne.n	80042bc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042b4:	461a      	mov	r2, r3
 80042b6:	2101      	movs	r1, #1
 80042b8:	f002 ffda 	bl	8007270 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	4f54300a 	.word	0x4f54300a
 80042cc:	4f54310a 	.word	0x4f54310a

080042d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
 80042dc:	4613      	mov	r3, r2
 80042de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ee:	883b      	ldrh	r3, [r7, #0]
 80042f0:	0419      	lsls	r1, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
 80042fc:	e028      	b.n	8004350 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e00d      	b.n	800432e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	3340      	adds	r3, #64	; 0x40
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4413      	add	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	3301      	adds	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	3b01      	subs	r3, #1
 8004334:	429a      	cmp	r2, r3
 8004336:	d3ec      	bcc.n	8004312 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004338:	883b      	ldrh	r3, [r7, #0]
 800433a:	0418      	lsls	r0, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	3b01      	subs	r3, #1
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	4302      	orrs	r2, r0
 8004348:	3340      	adds	r3, #64	; 0x40
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e22d      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d075      	beq.n	80044a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	4ba3      	ldr	r3, [pc, #652]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d00c      	beq.n	80043dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c2:	4ba0      	ldr	r3, [pc, #640]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d112      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b9d      	ldr	r3, [pc, #628]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043da:	d10b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	4b99      	ldr	r3, [pc, #612]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d05b      	beq.n	80044a0 <HAL_RCC_OscConfig+0x108>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d157      	bne.n	80044a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e208      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x74>
 80043fe:	4b91      	ldr	r3, [pc, #580]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a90      	ldr	r2, [pc, #576]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x98>
 8004416:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a8a      	ldr	r2, [pc, #552]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b88      	ldr	r3, [pc, #544]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a87      	ldr	r2, [pc, #540]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 8004430:	4b84      	ldr	r3, [pc, #528]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a83      	ldr	r2, [pc, #524]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b81      	ldr	r3, [pc, #516]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a80      	ldr	r2, [pc, #512]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fc ff4c 	bl	80012ec <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fc ff48 	bl	80012ec <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1cd      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b76      	ldr	r3, [pc, #472]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xc0>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fc ff38 	bl	80012ec <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fc ff34 	bl	80012ec <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1b9      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0xe8>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d063      	beq.n	8004576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	4b65      	ldr	r3, [pc, #404]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b62      	ldr	r3, [pc, #392]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e18d      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b56      	ldr	r3, [pc, #344]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4952      	ldr	r1, [pc, #328]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e03a      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <HAL_RCC_OscConfig+0x2b0>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fc feed 	bl	80012ec <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004516:	f7fc fee9 	bl	80012ec <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e16e      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4940      	ldr	r1, [pc, #256]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	e015      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCC_OscConfig+0x2b0>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fc fecc 	bl	80012ec <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004558:	f7fc fec8 	bl	80012ec <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e14d      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b36      	ldr	r3, [pc, #216]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d030      	beq.n	80045e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_RCC_OscConfig+0x2b4>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fc feac 	bl	80012ec <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fc fea8 	bl	80012ec <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e12d      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b26      	ldr	r3, [pc, #152]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x200>
 80045b6:	e015      	b.n	80045e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x2b4>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fc fe95 	bl	80012ec <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fc fe91 	bl	80012ec <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e116      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80045da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a0 	beq.w	8004732 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004610:	6413      	str	r3, [r2, #64]	; 0x40
 8004612:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800461e:	2301      	movs	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_OscConfig+0x2b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d121      	bne.n	8004672 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCC_OscConfig+0x2b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <HAL_RCC_OscConfig+0x2b8>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463a:	f7fc fe57 	bl	80012ec <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	e011      	b.n	8004666 <HAL_RCC_OscConfig+0x2ce>
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	42470000 	.word	0x42470000
 800464c:	42470e80 	.word	0x42470e80
 8004650:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fc fe4a 	bl	80012ec <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e0cf      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004666:	4b6a      	ldr	r3, [pc, #424]	; (8004810 <HAL_RCC_OscConfig+0x478>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d106      	bne.n	8004688 <HAL_RCC_OscConfig+0x2f0>
 800467a:	4b66      	ldr	r3, [pc, #408]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4a65      	ldr	r2, [pc, #404]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6713      	str	r3, [r2, #112]	; 0x70
 8004686:	e01c      	b.n	80046c2 <HAL_RCC_OscConfig+0x32a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d10c      	bne.n	80046aa <HAL_RCC_OscConfig+0x312>
 8004690:	4b60      	ldr	r3, [pc, #384]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	4a5f      	ldr	r2, [pc, #380]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 8004696:	f043 0304 	orr.w	r3, r3, #4
 800469a:	6713      	str	r3, [r2, #112]	; 0x70
 800469c:	4b5d      	ldr	r3, [pc, #372]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a5c      	ldr	r2, [pc, #368]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	e00b      	b.n	80046c2 <HAL_RCC_OscConfig+0x32a>
 80046aa:	4b5a      	ldr	r3, [pc, #360]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a59      	ldr	r2, [pc, #356]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	4b57      	ldr	r3, [pc, #348]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a56      	ldr	r2, [pc, #344]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d015      	beq.n	80046f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ca:	f7fc fe0f 	bl	80012ec <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fc fe0b 	bl	80012ec <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e08e      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ee      	beq.n	80046d2 <HAL_RCC_OscConfig+0x33a>
 80046f4:	e014      	b.n	8004720 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fc fdf9 	bl	80012ec <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fc fdf5 	bl	80012ec <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e078      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004714:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ee      	bne.n	80046fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	4a3a      	ldr	r2, [pc, #232]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004730:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d064      	beq.n	8004804 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b08      	cmp	r3, #8
 8004744:	d05c      	beq.n	8004800 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d141      	bne.n	80047d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCC_OscConfig+0x480>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fc fdca 	bl	80012ec <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475c:	f7fc fdc6 	bl	80012ec <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e04b      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	4b29      	ldr	r3, [pc, #164]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	3b01      	subs	r3, #1
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	491d      	ldr	r1, [pc, #116]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCC_OscConfig+0x480>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fc fd9f 	bl	80012ec <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fc fd9b 	bl	80012ec <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e020      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x41a>
 80047d0:	e018      	b.n	8004804 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <HAL_RCC_OscConfig+0x480>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fc fd88 	bl	80012ec <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fc fd84 	bl	80012ec <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e009      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_RCC_OscConfig+0x47c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x448>
 80047fe:	e001      	b.n	8004804 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40007000 	.word	0x40007000
 8004814:	40023800 	.word	0x40023800
 8004818:	42470060 	.word	0x42470060

0800481c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0ca      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90c      	bls.n	8004858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b64      	ldr	r3, [pc, #400]	; (80049d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b62      	ldr	r3, [pc, #392]	; (80049d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0b6      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004870:	4b58      	ldr	r3, [pc, #352]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a57      	ldr	r2, [pc, #348]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800487a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004888:	4b52      	ldr	r3, [pc, #328]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a51      	ldr	r2, [pc, #324]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004894:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	494c      	ldr	r1, [pc, #304]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d044      	beq.n	800493c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d119      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07d      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d003      	beq.n	80048da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e06d      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ea:	4b3a      	ldr	r3, [pc, #232]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e065      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4933      	ldr	r1, [pc, #204]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800490c:	f7fc fcee 	bl	80012ec <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	e00a      	b.n	800492a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004914:	f7fc fcea 	bl	80012ec <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e04d      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b2a      	ldr	r3, [pc, #168]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 020c 	and.w	r2, r3, #12
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d1eb      	bne.n	8004914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_ClockConfig+0x1b4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d20c      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <HAL_RCC_ClockConfig+0x1b4>)
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e030      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4915      	ldr	r1, [pc, #84]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	490d      	ldr	r1, [pc, #52]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049a2:	f000 f81d 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 80049a6:	4601      	mov	r1, r0
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	fa21 f303 	lsr.w	r3, r1, r3
 80049ba:	4a08      	ldr	r2, [pc, #32]	; (80049dc <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fc fb4c 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00
 80049d4:	40023800 	.word	0x40023800
 80049d8:	0800c09c 	.word	0x0800c09c
 80049dc:	20000000 	.word	0x20000000

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	2300      	movs	r3, #0
 80049f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f6:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d007      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0x32>
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d008      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x38>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 80b4 	bne.w	8004b74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b5e      	ldr	r3, [pc, #376]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a0e:	60bb      	str	r3, [r7, #8]
       break;
 8004a10:	e0b3      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a12:	4b5e      	ldr	r3, [pc, #376]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a14:	60bb      	str	r3, [r7, #8]
      break;
 8004a16:	e0b0      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a18:	4b5a      	ldr	r3, [pc, #360]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a22:	4b58      	ldr	r3, [pc, #352]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04a      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b55      	ldr	r3, [pc, #340]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	f04f 0400 	mov.w	r4, #0
 8004a38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	ea03 0501 	and.w	r5, r3, r1
 8004a44:	ea04 0602 	and.w	r6, r4, r2
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4632      	mov	r2, r6
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	f04f 0400 	mov.w	r4, #0
 8004a54:	0154      	lsls	r4, r2, #5
 8004a56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a5a:	014b      	lsls	r3, r1, #5
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4622      	mov	r2, r4
 8004a60:	1b49      	subs	r1, r1, r5
 8004a62:	eb62 0206 	sbc.w	r2, r2, r6
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	f04f 0400 	mov.w	r4, #0
 8004a6e:	0194      	lsls	r4, r2, #6
 8004a70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a74:	018b      	lsls	r3, r1, #6
 8004a76:	1a5b      	subs	r3, r3, r1
 8004a78:	eb64 0402 	sbc.w	r4, r4, r2
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	00e2      	lsls	r2, r4, #3
 8004a86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a8a:	00d9      	lsls	r1, r3, #3
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4614      	mov	r4, r2
 8004a90:	195b      	adds	r3, r3, r5
 8004a92:	eb44 0406 	adc.w	r4, r4, r6
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	0262      	lsls	r2, r4, #9
 8004aa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004aa4:	0259      	lsls	r1, r3, #9
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	4621      	mov	r1, r4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	f7fb fb92 	bl	80001e0 <__aeabi_uldivmod>
 8004abc:	4603      	mov	r3, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e049      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac4:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	ea03 0501 	and.w	r5, r3, r1
 8004ada:	ea04 0602 	and.w	r6, r4, r2
 8004ade:	4629      	mov	r1, r5
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	f04f 0400 	mov.w	r4, #0
 8004aea:	0154      	lsls	r4, r2, #5
 8004aec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004af0:	014b      	lsls	r3, r1, #5
 8004af2:	4619      	mov	r1, r3
 8004af4:	4622      	mov	r2, r4
 8004af6:	1b49      	subs	r1, r1, r5
 8004af8:	eb62 0206 	sbc.w	r2, r2, r6
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	0194      	lsls	r4, r2, #6
 8004b06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b0a:	018b      	lsls	r3, r1, #6
 8004b0c:	1a5b      	subs	r3, r3, r1
 8004b0e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	00e2      	lsls	r2, r4, #3
 8004b1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b20:	00d9      	lsls	r1, r3, #3
 8004b22:	460b      	mov	r3, r1
 8004b24:	4614      	mov	r4, r2
 8004b26:	195b      	adds	r3, r3, r5
 8004b28:	eb44 0406 	adc.w	r4, r4, r6
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	02a2      	lsls	r2, r4, #10
 8004b36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b3a:	0299      	lsls	r1, r3, #10
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4614      	mov	r4, r2
 8004b40:	4618      	mov	r0, r3
 8004b42:	4621      	mov	r1, r4
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f04f 0400 	mov.w	r4, #0
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	f7fb fb47 	bl	80001e0 <__aeabi_uldivmod>
 8004b52:	4603      	mov	r3, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	3301      	adds	r3, #1
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	60bb      	str	r3, [r7, #8]
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b74:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b76:	60bb      	str	r3, [r7, #8]
      break;
 8004b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b84:	40023800 	.word	0x40023800
 8004b88:	00f42400 	.word	0x00f42400
 8004b8c:	007a1200 	.word	0x007a1200

08004b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000000 	.word	0x20000000

08004ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bac:	f7ff fff0 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	0a9b      	lsrs	r3, r3, #10
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4a03      	ldr	r2, [pc, #12]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bbe:	5cd3      	ldrb	r3, [r2, r3]
 8004bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800c0ac 	.word	0x0800c0ac

08004bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd4:	f7ff ffdc 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4601      	mov	r1, r0
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0b5b      	lsrs	r3, r3, #13
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4a03      	ldr	r2, [pc, #12]	; (8004bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	0800c0ac 	.word	0x0800c0ac

08004bf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	220f      	movs	r2, #15
 8004c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0203 	and.w	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCC_GetClockConfig+0x60>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40023c00 	.word	0x40023c00

08004c5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d038      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c84:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8a:	f7fc fb2f 	bl	80012ec <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c92:	f7fc fb2b 	bl	80012ec <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0bd      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca4:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	495a      	ldr	r1, [pc, #360]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cca:	4b57      	ldr	r3, [pc, #348]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd0:	f7fc fb0c 	bl	80012ec <HAL_GetTick>
 8004cd4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cd8:	f7fc fb08 	bl	80012ec <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e09a      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cea:	4b50      	ldr	r3, [pc, #320]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8083 	beq.w	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	4a47      	ldr	r2, [pc, #284]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d12:	6413      	str	r3, [r2, #64]	; 0x40
 8004d14:	4b45      	ldr	r3, [pc, #276]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a42      	ldr	r2, [pc, #264]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2c:	f7fc fade 	bl	80012ec <HAL_GetTick>
 8004d30:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d34:	f7fc fada 	bl	80012ec <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e06c      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d46:	4b3a      	ldr	r3, [pc, #232]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d52:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02f      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d028      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d70:	4b2e      	ldr	r3, [pc, #184]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d78:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d7a:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d80:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d86:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d8c:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d114      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fc faa8 	bl	80012ec <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fc faa4 	bl	80012ec <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e034      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0ee      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dce:	d10d      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004dd0:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	4911      	ldr	r1, [pc, #68]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
 8004dea:	e005      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004df6:	6093      	str	r3, [r2, #8]
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e04:	4909      	ldr	r1, [pc, #36]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7d1a      	ldrb	r2, [r3, #20]
 8004e1a:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e1c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	42470068 	.word	0x42470068
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40007000 	.word	0x40007000
 8004e34:	42470e40 	.word	0x42470e40
 8004e38:	424711e0 	.word	0x424711e0

08004e3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d13f      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e62:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d004      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d131      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e70:	617b      	str	r3, [r7, #20]
          break;
 8004e72:	e031      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e74:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e80:	d109      	bne.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e82:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8c:	4a18      	ldr	r2, [pc, #96]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	e008      	b.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea0:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec2:	0f1b      	lsrs	r3, r3, #28
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	617b      	str	r3, [r7, #20]
          break;
 8004ed0:	e002      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
          break;
 8004ed6:	bf00      	nop
        }
      }
      break;
 8004ed8:	bf00      	nop
    }
  }
  return frequency;
 8004eda:	697b      	ldr	r3, [r7, #20]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	00bb8000 	.word	0x00bb8000
 8004ef0:	007a1200 	.word	0x007a1200
 8004ef4:	00f42400 	.word	0x00f42400

08004ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e056      	b.n	8004fb8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fc f851 	bl	8000fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	ea42 0103 	orr.w	r1, r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	0c1b      	lsrs	r3, r3, #16
 8004f88:	f003 0104 	and.w	r1, r3, #4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_SPI_Transmit+0x22>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e11e      	b.n	8005220 <HAL_SPI_Transmit+0x260>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fea:	f7fc f97f 	bl	80012ec <HAL_GetTick>
 8004fee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d002      	beq.n	8005006 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005000:	2302      	movs	r3, #2
 8005002:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005004:	e103      	b.n	800520e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_SPI_Transmit+0x52>
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005016:	e0fa      	b.n	800520e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2203      	movs	r2, #3
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505e:	d107      	bne.n	8005070 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d007      	beq.n	800508e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005096:	d14b      	bne.n	8005130 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_SPI_Transmit+0xe6>
 80050a0:	8afb      	ldrh	r3, [r7, #22]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d13e      	bne.n	8005124 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	881a      	ldrh	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	1c9a      	adds	r2, r3, #2
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050ca:	e02b      	b.n	8005124 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d112      	bne.n	8005100 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80050fe:	e011      	b.n	8005124 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005100:	f7fc f8f4 	bl	80012ec <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d803      	bhi.n	8005118 <HAL_SPI_Transmit+0x158>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d102      	bne.n	800511e <HAL_SPI_Transmit+0x15e>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005122:	e074      	b.n	800520e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ce      	bne.n	80050cc <HAL_SPI_Transmit+0x10c>
 800512e:	e04c      	b.n	80051ca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Transmit+0x17e>
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d140      	bne.n	80051c0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005164:	e02c      	b.n	80051c0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d113      	bne.n	800519c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	330c      	adds	r3, #12
 800517e:	7812      	ldrb	r2, [r2, #0]
 8005180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36
 800519a:	e011      	b.n	80051c0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800519c:	f7fc f8a6 	bl	80012ec <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d803      	bhi.n	80051b4 <HAL_SPI_Transmit+0x1f4>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d102      	bne.n	80051ba <HAL_SPI_Transmit+0x1fa>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d102      	bne.n	80051c0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051be:	e026      	b.n	800520e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1cd      	bne.n	8005166 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fba4 	bl	800591c <SPI_EndRxTxTransaction>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	77fb      	strb	r3, [r7, #31]
 800520a:	e000      	b.n	800520e <HAL_SPI_Transmit+0x24e>
  }

error:
 800520c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800521e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005244:	d112      	bne.n	800526c <HAL_SPI_Receive+0x44>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10e      	bne.n	800526c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2204      	movs	r2, #4
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f8e9 	bl	800543a <HAL_SPI_TransmitReceive>
 8005268:	4603      	mov	r3, r0
 800526a:	e0e2      	b.n	8005432 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_SPI_Receive+0x52>
 8005276:	2302      	movs	r3, #2
 8005278:	e0db      	b.n	8005432 <HAL_SPI_Receive+0x20a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005282:	f7fc f833 	bl	80012ec <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	d002      	beq.n	800529a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005294:	2302      	movs	r3, #2
 8005296:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005298:	e0c2      	b.n	8005420 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_SPI_Receive+0x7e>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052aa:	e0b9      	b.n	8005420 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2204      	movs	r2, #4
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f2:	d107      	bne.n	8005304 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530e:	2b40      	cmp	r3, #64	; 0x40
 8005310:	d007      	beq.n	8005322 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005320:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d162      	bne.n	80053f0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800532a:	e02e      	b.n	800538a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b01      	cmp	r3, #1
 8005338:	d115      	bne.n	8005366 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f103 020c 	add.w	r2, r3, #12
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	7812      	ldrb	r2, [r2, #0]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005364:	e011      	b.n	800538a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005366:	f7fb ffc1 	bl	80012ec <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d803      	bhi.n	800537e <HAL_SPI_Receive+0x156>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d102      	bne.n	8005384 <HAL_SPI_Receive+0x15c>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005388:	e04a      	b.n	8005420 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1cb      	bne.n	800532c <HAL_SPI_Receive+0x104>
 8005394:	e031      	b.n	80053fa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d113      	bne.n	80053cc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	b292      	uxth	r2, r2
 80053b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	1c9a      	adds	r2, r3, #2
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ca:	e011      	b.n	80053f0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053cc:	f7fb ff8e 	bl	80012ec <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d803      	bhi.n	80053e4 <HAL_SPI_Receive+0x1bc>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d102      	bne.n	80053ea <HAL_SPI_Receive+0x1c2>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053ee:	e017      	b.n	8005420 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1cd      	bne.n	8005396 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fa27 	bl	8005852 <SPI_EndRxTransaction>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	75fb      	strb	r3, [r7, #23]
 800541c:	e000      	b.n	8005420 <HAL_SPI_Receive+0x1f8>
  }

error :
 800541e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b08c      	sub	sp, #48	; 0x30
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005448:	2301      	movs	r3, #1
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x26>
 800545c:	2302      	movs	r3, #2
 800545e:	e18a      	b.n	8005776 <HAL_SPI_TransmitReceive+0x33c>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005468:	f7fb ff40 	bl	80012ec <HAL_GetTick>
 800546c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005486:	2b01      	cmp	r3, #1
 8005488:	d00f      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x70>
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005490:	d107      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x68>
 800549a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d003      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
 80054a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054a8:	e15b      	b.n	8005762 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x82>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x82>
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054c2:	e14e      	b.n	8005762 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d003      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2205      	movs	r2, #5
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	887a      	ldrh	r2, [r7, #2]
 80054ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	887a      	ldrh	r2, [r7, #2]
 80054fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d007      	beq.n	800552c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005534:	d178      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_SPI_TransmitReceive+0x10a>
 800553e:	8b7b      	ldrh	r3, [r7, #26]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d166      	bne.n	8005612 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	881a      	ldrh	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	1c9a      	adds	r2, r3, #2
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005568:	e053      	b.n	8005612 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d11b      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x176>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d016      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x176>
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d113      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	881a      	ldrh	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	1c9a      	adds	r2, r3, #2
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d119      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x1b8>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d014      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	b292      	uxth	r2, r2
 80055d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ee:	2301      	movs	r3, #1
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055f2:	f7fb fe7b 	bl	80012ec <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fe:	429a      	cmp	r2, r3
 8005600:	d807      	bhi.n	8005612 <HAL_SPI_TransmitReceive+0x1d8>
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d003      	beq.n	8005612 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005610:	e0a7      	b.n	8005762 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1a6      	bne.n	800556a <HAL_SPI_TransmitReceive+0x130>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1a1      	bne.n	800556a <HAL_SPI_TransmitReceive+0x130>
 8005626:	e07c      	b.n	8005722 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x1fc>
 8005630:	8b7b      	ldrh	r3, [r7, #26]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d16b      	bne.n	800570e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565c:	e057      	b.n	800570e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d11c      	bne.n	80056a6 <HAL_SPI_TransmitReceive+0x26c>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d017      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x26c>
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d114      	bne.n	80056a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	7812      	ldrb	r2, [r2, #0]
 8005688:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d119      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x2ae>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d014      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056e4:	2301      	movs	r3, #1
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056e8:	f7fb fe00 	bl	80012ec <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d803      	bhi.n	8005700 <HAL_SPI_TransmitReceive+0x2c6>
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d102      	bne.n	8005706 <HAL_SPI_TransmitReceive+0x2cc>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800570c:	e029      	b.n	8005762 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1a2      	bne.n	800565e <HAL_SPI_TransmitReceive+0x224>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d19d      	bne.n	800565e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f8f8 	bl	800591c <SPI_EndRxTxTransaction>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800573e:	e010      	b.n	8005762 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	e000      	b.n	8005762 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005760:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005772:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005776:	4618      	mov	r0, r3
 8005778:	3730      	adds	r7, #48	; 0x30
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800578e:	e04c      	b.n	800582a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d048      	beq.n	800582a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005798:	f7fb fda8 	bl	80012ec <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d902      	bls.n	80057ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d13d      	bne.n	800582a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c6:	d111      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d0:	d004      	beq.n	80057dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057da:	d107      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d10f      	bne.n	8005816 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005814:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e00f      	b.n	800584a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4013      	ands	r3, r2
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	bf0c      	ite	eq
 800583a:	2301      	moveq	r3, #1
 800583c:	2300      	movne	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	429a      	cmp	r2, r3
 8005846:	d1a3      	bne.n	8005790 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af02      	add	r7, sp, #8
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005866:	d111      	bne.n	800588c <SPI_EndRxTransaction+0x3a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005870:	d004      	beq.n	800587c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587a:	d107      	bne.n	800588c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005894:	d12a      	bne.n	80058ec <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589e:	d012      	beq.n	80058c6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff ff67 	bl	800577e <SPI_WaitFlagStateUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02d      	beq.n	8005912 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e026      	b.n	8005914 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2101      	movs	r1, #1
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff ff54 	bl	800577e <SPI_WaitFlagStateUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01a      	beq.n	8005912 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e013      	b.n	8005914 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	2101      	movs	r1, #1
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff ff41 	bl	800577e <SPI_WaitFlagStateUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e000      	b.n	8005914 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <SPI_EndRxTxTransaction+0x7c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <SPI_EndRxTxTransaction+0x80>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	0d5b      	lsrs	r3, r3, #21
 8005934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005946:	d112      	bne.n	800596e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	2180      	movs	r1, #128	; 0x80
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ff13 	bl	800577e <SPI_WaitFlagStateUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e00f      	b.n	800598e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	3b01      	subs	r3, #1
 8005978:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d0f2      	beq.n	800596e <SPI_EndRxTxTransaction+0x52>
 8005988:	e000      	b.n	800598c <SPI_EndRxTxTransaction+0x70>
        break;
 800598a:	bf00      	nop
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000000 	.word	0x20000000
 800599c:	165e9f81 	.word	0x165e9f81

080059a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e01d      	b.n	80059ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f815 	bl	80059f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f000 f968 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0201 	orr.w	r2, r2, #1
 8005a20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d007      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d122      	bne.n	8005aae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d11b      	bne.n	8005aae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f06f 0202 	mvn.w	r2, #2
 8005a7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8ee 	bl	8005c76 <HAL_TIM_IC_CaptureCallback>
 8005a9a:	e005      	b.n	8005aa8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f8e0 	bl	8005c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8f1 	bl	8005c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d122      	bne.n	8005b02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d11b      	bne.n	8005b02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0204 	mvn.w	r2, #4
 8005ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f8c4 	bl	8005c76 <HAL_TIM_IC_CaptureCallback>
 8005aee:	e005      	b.n	8005afc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f8b6 	bl	8005c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8c7 	bl	8005c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d122      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d11b      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f06f 0208 	mvn.w	r2, #8
 8005b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f89a 	bl	8005c76 <HAL_TIM_IC_CaptureCallback>
 8005b42:	e005      	b.n	8005b50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f88c 	bl	8005c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f89d 	bl	8005c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d122      	bne.n	8005baa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d11b      	bne.n	8005baa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 0210 	mvn.w	r2, #16
 8005b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2208      	movs	r2, #8
 8005b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f870 	bl	8005c76 <HAL_TIM_IC_CaptureCallback>
 8005b96:	e005      	b.n	8005ba4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f862 	bl	8005c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f873 	bl	8005c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d10e      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d107      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f06f 0201 	mvn.w	r2, #1
 8005bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fb f89f 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be0:	2b80      	cmp	r3, #128	; 0x80
 8005be2:	d10e      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d107      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8e3 	bl	8005dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b40      	cmp	r3, #64	; 0x40
 8005c0e:	d10e      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d107      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f838 	bl	8005c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d10e      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d107      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f06f 0220 	mvn.w	r2, #32
 8005c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8ad 	bl	8005db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a34      	ldr	r2, [pc, #208]	; (8005d98 <TIM_Base_SetConfig+0xe4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00f      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d00b      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a31      	ldr	r2, [pc, #196]	; (8005d9c <TIM_Base_SetConfig+0xe8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <TIM_Base_SetConfig+0xec>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a2f      	ldr	r2, [pc, #188]	; (8005da4 <TIM_Base_SetConfig+0xf0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d108      	bne.n	8005cfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <TIM_Base_SetConfig+0xe4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01b      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0c:	d017      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a22      	ldr	r2, [pc, #136]	; (8005d9c <TIM_Base_SetConfig+0xe8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <TIM_Base_SetConfig+0xec>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00f      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a20      	ldr	r2, [pc, #128]	; (8005da4 <TIM_Base_SetConfig+0xf0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <TIM_Base_SetConfig+0xf4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <TIM_Base_SetConfig+0xf8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <TIM_Base_SetConfig+0xfc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <TIM_Base_SetConfig+0xe4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ddc:	b084      	sub	sp, #16
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	f107 001c 	add.w	r0, r7, #28
 8005dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d122      	bne.n	8005e3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d105      	bne.n	8005e2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fa7c 	bl	800732c <USB_CoreReset>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
 8005e38:	e01a      	b.n	8005e70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 fa70 	bl	800732c <USB_CoreReset>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
 8005e62:	e005      	b.n	8005e70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10b      	bne.n	8005e8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f043 0206 	orr.w	r2, r3, #6
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e9a:	b004      	add	sp, #16
 8005e9c:	4770      	bx	lr
	...

08005ea0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d165      	bne.n	8005f80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4a41      	ldr	r2, [pc, #260]	; (8005fbc <USB_SetTurnaroundTime+0x11c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d906      	bls.n	8005eca <USB_SetTurnaroundTime+0x2a>
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4a40      	ldr	r2, [pc, #256]	; (8005fc0 <USB_SetTurnaroundTime+0x120>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d802      	bhi.n	8005eca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ec4:	230f      	movs	r3, #15
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e062      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <USB_SetTurnaroundTime+0x120>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d906      	bls.n	8005ee0 <USB_SetTurnaroundTime+0x40>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4a3b      	ldr	r2, [pc, #236]	; (8005fc4 <USB_SetTurnaroundTime+0x124>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d802      	bhi.n	8005ee0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005eda:	230e      	movs	r3, #14
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e057      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4a38      	ldr	r2, [pc, #224]	; (8005fc4 <USB_SetTurnaroundTime+0x124>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d906      	bls.n	8005ef6 <USB_SetTurnaroundTime+0x56>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4a37      	ldr	r2, [pc, #220]	; (8005fc8 <USB_SetTurnaroundTime+0x128>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d802      	bhi.n	8005ef6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ef0:	230d      	movs	r3, #13
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e04c      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4a33      	ldr	r2, [pc, #204]	; (8005fc8 <USB_SetTurnaroundTime+0x128>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d906      	bls.n	8005f0c <USB_SetTurnaroundTime+0x6c>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	4a32      	ldr	r2, [pc, #200]	; (8005fcc <USB_SetTurnaroundTime+0x12c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d802      	bhi.n	8005f0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f06:	230c      	movs	r3, #12
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e041      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4a2f      	ldr	r2, [pc, #188]	; (8005fcc <USB_SetTurnaroundTime+0x12c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d906      	bls.n	8005f22 <USB_SetTurnaroundTime+0x82>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4a2e      	ldr	r2, [pc, #184]	; (8005fd0 <USB_SetTurnaroundTime+0x130>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d802      	bhi.n	8005f22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f1c:	230b      	movs	r3, #11
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e036      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4a2a      	ldr	r2, [pc, #168]	; (8005fd0 <USB_SetTurnaroundTime+0x130>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d906      	bls.n	8005f38 <USB_SetTurnaroundTime+0x98>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <USB_SetTurnaroundTime+0x134>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d802      	bhi.n	8005f38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f32:	230a      	movs	r3, #10
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e02b      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <USB_SetTurnaroundTime+0x134>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d906      	bls.n	8005f4e <USB_SetTurnaroundTime+0xae>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <USB_SetTurnaroundTime+0x138>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d802      	bhi.n	8005f4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f48:	2309      	movs	r3, #9
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e020      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <USB_SetTurnaroundTime+0x138>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d906      	bls.n	8005f64 <USB_SetTurnaroundTime+0xc4>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <USB_SetTurnaroundTime+0x13c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d802      	bhi.n	8005f64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f5e:	2308      	movs	r3, #8
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e015      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a1d      	ldr	r2, [pc, #116]	; (8005fdc <USB_SetTurnaroundTime+0x13c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d906      	bls.n	8005f7a <USB_SetTurnaroundTime+0xda>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <USB_SetTurnaroundTime+0x140>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d802      	bhi.n	8005f7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f74:	2307      	movs	r3, #7
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e00a      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f7a:	2306      	movs	r3, #6
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	e007      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f86:	2309      	movs	r3, #9
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	e001      	b.n	8005f90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f8c:	2309      	movs	r3, #9
 8005f8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	029b      	lsls	r3, r3, #10
 8005fa4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	00d8acbf 	.word	0x00d8acbf
 8005fc0:	00e4e1bf 	.word	0x00e4e1bf
 8005fc4:	00f423ff 	.word	0x00f423ff
 8005fc8:	0106737f 	.word	0x0106737f
 8005fcc:	011a499f 	.word	0x011a499f
 8005fd0:	01312cff 	.word	0x01312cff
 8005fd4:	014ca43f 	.word	0x014ca43f
 8005fd8:	016e35ff 	.word	0x016e35ff
 8005fdc:	01a6ab1f 	.word	0x01a6ab1f
 8005fe0:	01e847ff 	.word	0x01e847ff

08005fe4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f043 0201 	orr.w	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d106      	bne.n	8006054 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	e00b      	b.n	800606c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]
 8006066:	e001      	b.n	800606c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e003      	b.n	8006074 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800606c:	2032      	movs	r0, #50	; 0x32
 800606e:	f7fb f949 	bl	8001304 <HAL_Delay>

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800607c:	b084      	sub	sp, #16
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800608a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	e009      	b.n	80060b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	3340      	adds	r3, #64	; 0x40
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b0e      	cmp	r3, #14
 80060b4:	d9f2      	bls.n	800609c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d112      	bne.n	80060e2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
 80060e0:	e00b      	b.n	80060fa <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610c:	4619      	mov	r1, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	461a      	mov	r2, r3
 8006116:	680b      	ldr	r3, [r1, #0]
 8006118:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10c      	bne.n	800613a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006126:	2100      	movs	r1, #0
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f961 	bl	80063f0 <USB_SetDevSpeed>
 800612e:	e008      	b.n	8006142 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006130:	2101      	movs	r1, #1
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f95c 	bl	80063f0 <USB_SetDevSpeed>
 8006138:	e003      	b.n	8006142 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800613a:	2103      	movs	r1, #3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f957 	bl	80063f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006142:	2110      	movs	r1, #16
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f90b 	bl	8006360 <USB_FlushTxFifo>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f929 	bl	80063ac <USB_FlushRxFifo>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	461a      	mov	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	461a      	mov	r2, r3
 8006184:	2300      	movs	r3, #0
 8006186:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	e043      	b.n	8006216 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a4:	d118      	bne.n	80061d8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	461a      	mov	r2, r3
 80061ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	e013      	b.n	80061ea <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	461a      	mov	r2, r3
 80061d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e008      	b.n	80061ea <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	461a      	mov	r2, r3
 80061e6:	2300      	movs	r3, #0
 80061e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	461a      	mov	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	461a      	mov	r2, r3
 800620a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800620e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	3301      	adds	r3, #1
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	429a      	cmp	r2, r3
 800621c:	d3b7      	bcc.n	800618e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e043      	b.n	80062ac <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800623a:	d118      	bne.n	800626e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	461a      	mov	r2, r3
 8006250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e013      	b.n	8006280 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e008      	b.n	8006280 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	461a      	mov	r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	461a      	mov	r2, r3
 800628e:	2300      	movs	r3, #0
 8006290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629e:	461a      	mov	r2, r3
 80062a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	3301      	adds	r3, #1
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d3b7      	bcc.n	8006224 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d111      	bne.n	80062f2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	461a      	mov	r2, r3
 80062d6:	4b20      	ldr	r3, [pc, #128]	; (8006358 <USB_DevInit+0x2dc>)
 80062d8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ec:	f043 0303 	orr.w	r3, r3, #3
 80062f0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f043 0210 	orr.w	r2, r3, #16
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <USB_DevInit+0x2e0>)
 8006318:	4313      	orrs	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800631e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f043 0208 	orr.w	r2, r3, #8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006332:	2b01      	cmp	r3, #1
 8006334:	d107      	bne.n	8006346 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800633e:	f043 0304 	orr.w	r3, r3, #4
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006352:	b004      	add	sp, #16
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	00800100 	.word	0x00800100
 800635c:	803c3800 	.word	0x803c3800

08006360 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	019b      	lsls	r3, r3, #6
 8006372:	f043 0220 	orr.w	r2, r3, #32
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <USB_FlushTxFifo+0x48>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e006      	b.n	800639a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b20      	cmp	r3, #32
 8006396:	d0f0      	beq.n	800637a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	00030d40 	.word	0x00030d40

080063ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2210      	movs	r2, #16
 80063bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <USB_FlushRxFifo+0x40>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e006      	b.n	80063de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d0f0      	beq.n	80063be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	00030d40 	.word	0x00030d40

080063f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006410:	4313      	orrs	r3, r2
 8006412:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0306 	and.w	r3, r3, #6
 800643a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
 8006446:	e00a      	b.n	800645e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d002      	beq.n	8006454 <USB_GetDevSpeed+0x32>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b06      	cmp	r3, #6
 8006452:	d102      	bne.n	800645a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006454:	2302      	movs	r3, #2
 8006456:	75fb      	strb	r3, [r7, #23]
 8006458:	e001      	b.n	800645e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800645a:	230f      	movs	r3, #15
 800645c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006460:	4618      	mov	r0, r3
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d13a      	bne.n	80064fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	2101      	movs	r1, #1
 800649a:	fa01 f303 	lsl.w	r3, r1, r3
 800649e:	b29b      	uxth	r3, r3
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a6:	4313      	orrs	r3, r2
 80064a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d155      	bne.n	800656c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	78db      	ldrb	r3, [r3, #3]
 80064da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	059b      	lsls	r3, r3, #22
 80064e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064e4:	4313      	orrs	r3, r2
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	e036      	b.n	800656c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	2101      	movs	r1, #1
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	041b      	lsls	r3, r3, #16
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800651c:	4313      	orrs	r3, r2
 800651e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d11a      	bne.n	800656c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	78db      	ldrb	r3, [r3, #3]
 8006550:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006552:	430b      	orrs	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	440a      	add	r2, r1
 800655e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d135      	bne.n	8006604 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	2101      	movs	r1, #1
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	43db      	mvns	r3, r3
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b8:	4013      	ands	r3, r2
 80065ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	2101      	movs	r1, #1
 80065ce:	fa01 f303 	lsl.w	r3, r1, r3
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065dc:	4013      	ands	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	0159      	lsls	r1, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	440b      	add	r3, r1
 80065f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fa:	4619      	mov	r1, r3
 80065fc:	4b1f      	ldr	r3, [pc, #124]	; (800667c <USB_DeactivateEndpoint+0x100>)
 80065fe:	4013      	ands	r3, r2
 8006600:	600b      	str	r3, [r1, #0]
 8006602:	e034      	b.n	800666e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	2101      	movs	r1, #1
 8006616:	fa01 f303 	lsl.w	r3, r1, r3
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	43db      	mvns	r3, r3
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006624:	4013      	ands	r3, r2
 8006626:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	2101      	movs	r1, #1
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	43db      	mvns	r3, r3
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006648:	4013      	ands	r3, r2
 800664a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	0159      	lsls	r1, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	440b      	add	r3, r1
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	4619      	mov	r1, r3
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <USB_DeactivateEndpoint+0x104>)
 800666a:	4013      	ands	r3, r2
 800666c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	ec337800 	.word	0xec337800
 8006680:	eff37800 	.word	0xeff37800

08006684 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	; 0x28
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	f040 815c 	bne.w	800695e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d132      	bne.n	8006714 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670c:	0cdb      	lsrs	r3, r3, #19
 800670e:	04db      	lsls	r3, r3, #19
 8006710:	6113      	str	r3, [r2, #16]
 8006712:	e074      	b.n	80067fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672e:	0cdb      	lsrs	r3, r3, #19
 8006730:	04db      	lsls	r3, r3, #19
 8006732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006752:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6959      	ldr	r1, [r3, #20]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	440b      	add	r3, r1
 8006770:	1e59      	subs	r1, r3, #1
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	fbb1 f3f3 	udiv	r3, r1, r3
 800677a:	04d9      	lsls	r1, r3, #19
 800677c:	4b9d      	ldr	r3, [pc, #628]	; (80069f4 <USB_EPStartXfer+0x370>)
 800677e:	400b      	ands	r3, r1
 8006780:	69b9      	ldr	r1, [r7, #24]
 8006782:	0148      	lsls	r0, r1, #5
 8006784:	69f9      	ldr	r1, [r7, #28]
 8006786:	4401      	add	r1, r0
 8006788:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800678c:	4313      	orrs	r3, r2
 800678e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a6:	69b9      	ldr	r1, [r7, #24]
 80067a8:	0148      	lsls	r0, r1, #5
 80067aa:	69f9      	ldr	r1, [r7, #28]
 80067ac:	4401      	add	r1, r0
 80067ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067b2:	4313      	orrs	r3, r2
 80067b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	78db      	ldrb	r3, [r3, #3]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d11f      	bne.n	80067fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d14b      	bne.n	800689c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d009      	beq.n	8006820 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	78db      	ldrb	r3, [r3, #3]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d128      	bne.n	800687a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d110      	bne.n	800685a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e00f      	b.n	800687a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006878:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e12f      	b.n	8006afc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	78db      	ldrb	r3, [r3, #3]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d015      	beq.n	80068f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8117 	beq.w	8006afc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	2101      	movs	r1, #1
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	69f9      	ldr	r1, [r7, #28]
 80068e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ea:	4313      	orrs	r3, r2
 80068ec:	634b      	str	r3, [r1, #52]	; 0x34
 80068ee:	e105      	b.n	8006afc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d110      	bne.n	8006922 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	e00f      	b.n	8006942 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006940:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	68d9      	ldr	r1, [r3, #12]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781a      	ldrb	r2, [r3, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	b298      	uxth	r0, r3
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4603      	mov	r3, r0
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fa2b 	bl	8006db2 <USB_WritePacket>
 800695c:	e0ce      	b.n	8006afc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006978:	0cdb      	lsrs	r3, r3, #19
 800697a:	04db      	lsls	r3, r3, #19
 800697c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800699c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d126      	bne.n	80069f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	0148      	lsls	r0, r1, #5
 80069c4:	69f9      	ldr	r1, [r7, #28]
 80069c6:	4401      	add	r1, r0
 80069c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069cc:	4313      	orrs	r3, r2
 80069ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ee:	6113      	str	r3, [r2, #16]
 80069f0:	e036      	b.n	8006a60 <USB_EPStartXfer+0x3dc>
 80069f2:	bf00      	nop
 80069f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	695a      	ldr	r2, [r3, #20]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	1e5a      	subs	r2, r3, #1
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	8afb      	ldrh	r3, [r7, #22]
 8006a1e:	04d9      	lsls	r1, r3, #19
 8006a20:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <USB_EPStartXfer+0x484>)
 8006a22:	400b      	ands	r3, r1
 8006a24:	69b9      	ldr	r1, [r7, #24]
 8006a26:	0148      	lsls	r0, r1, #5
 8006a28:	69f9      	ldr	r1, [r7, #28]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	8af9      	ldrh	r1, [r7, #22]
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	0148      	lsls	r0, r1, #5
 8006a54:	69f9      	ldr	r1, [r7, #28]
 8006a56:	4401      	add	r1, r0
 8006a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10d      	bne.n	8006a82 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	68d9      	ldr	r1, [r3, #12]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	460a      	mov	r2, r1
 8006a80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	78db      	ldrb	r3, [r3, #3]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d128      	bne.n	8006adc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e00f      	b.n	8006adc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ada:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	1ff80000 	.word	0x1ff80000

08006b0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	f040 80cd 	bne.w	8006cc8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d132      	bne.n	8006b9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	0cdb      	lsrs	r3, r3, #19
 8006b96:	04db      	lsls	r3, r3, #19
 8006b98:	6113      	str	r3, [r2, #16]
 8006b9a:	e04e      	b.n	8006c3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb6:	0cdb      	lsrs	r3, r3, #19
 8006bb8:	04db      	lsls	r3, r3, #19
 8006bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d903      	bls.n	8006bf4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2a:	6939      	ldr	r1, [r7, #16]
 8006c2c:	0148      	lsls	r0, r1, #5
 8006c2e:	6979      	ldr	r1, [r7, #20]
 8006c30:	4401      	add	r1, r0
 8006c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c36:	4313      	orrs	r3, r2
 8006c38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d11e      	bne.n	8006c7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e092      	b.n	8006da4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d07e      	beq.n	8006da4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbc:	6979      	ldr	r1, [r7, #20]
 8006cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	634b      	str	r3, [r1, #52]	; 0x34
 8006cc6:	e06d      	b.n	8006da4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce2:	0cdb      	lsrs	r3, r3, #19
 8006ce4:	04db      	lsls	r3, r3, #19
 8006ce6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d52:	6939      	ldr	r1, [r7, #16]
 8006d54:	0148      	lsls	r0, r1, #5
 8006d56:	6979      	ldr	r1, [r7, #20]
 8006d58:	4401      	add	r1, r0
 8006d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d10d      	bne.n	8006d84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	68d9      	ldr	r1, [r3, #12]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	460a      	mov	r2, r1
 8006d82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b089      	sub	sp, #36	; 0x24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	71fb      	strb	r3, [r7, #7]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006dd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d11a      	bne.n	8006e0e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dd8:	88bb      	ldrh	r3, [r7, #4]
 8006dda:	3303      	adds	r3, #3
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	e00f      	b.n	8006e06 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	031a      	lsls	r2, r3, #12
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df2:	461a      	mov	r2, r3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	3301      	adds	r3, #1
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d3eb      	bcc.n	8006de6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3724      	adds	r7, #36	; 0x24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	3303      	adds	r3, #3
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	e00b      	b.n	8006e58 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	3301      	adds	r3, #1
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d3ef      	bcc.n	8006e40 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e60:	69fb      	ldr	r3, [r7, #28]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3724      	adds	r7, #36	; 0x24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d12c      	bne.n	8006ee4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db12      	blt.n	8006ec2 <USB_EPSetStall+0x54>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00f      	beq.n	8006ec2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	0151      	lsls	r1, r2, #5
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ebc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ec0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006edc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e02b      	b.n	8006f3c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	db12      	blt.n	8006f1c <USB_EPSetStall+0xae>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00f      	beq.n	8006f1c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	0151      	lsls	r1, r2, #5
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	440a      	add	r2, r1
 8006f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f1a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d128      	bne.n	8006fb8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	78db      	ldrb	r3, [r3, #3]
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d003      	beq.n	8006f96 <USB_EPClearStall+0x4c>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	78db      	ldrb	r3, [r3, #3]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d138      	bne.n	8007008 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e027      	b.n	8007008 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	78db      	ldrb	r3, [r3, #3]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d003      	beq.n	8006fe8 <USB_EPClearStall+0x9e>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	78db      	ldrb	r3, [r3, #3]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d10f      	bne.n	8007008 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007006:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007034:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007038:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800707c:	f023 0302 	bic.w	r3, r3, #2
 8007080:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007082:	2003      	movs	r0, #3
 8007084:	f7fa f93e 	bl	8001304 <HAL_Delay>

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ac:	f043 0302 	orr.w	r3, r3, #2
 80070b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80070b2:	2003      	movs	r0, #3
 80070b4:	f7fa f926 	bl	8001304 <HAL_Delay>

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4013      	ands	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	4013      	ands	r3, r2
 800710a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	0c1b      	lsrs	r3, r3, #16
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	4013      	ands	r3, r2
 800713e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	b29b      	uxth	r3, r3
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	4013      	ands	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800717e:	68bb      	ldr	r3, [r7, #8]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	fa22 f303 	lsr.w	r3, r2, r3
 80071bc:	01db      	lsls	r3, r3, #7
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4013      	ands	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071da:	68bb      	ldr	r3, [r7, #8]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	f003 0301 	and.w	r3, r3, #1
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007222:	f023 0307 	bic.w	r3, r3, #7
 8007226:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0306 	and.w	r3, r3, #6
 8007234:	2b04      	cmp	r3, #4
 8007236:	d109      	bne.n	800724c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007246:	f043 0303 	orr.w	r3, r3, #3
 800724a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800725a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	460b      	mov	r3, r1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	333c      	adds	r3, #60	; 0x3c
 8007286:	3304      	adds	r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	4a26      	ldr	r2, [pc, #152]	; (8007328 <USB_EP0_OutStart+0xb8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d90a      	bls.n	80072aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a4:	d101      	bne.n	80072aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e037      	b.n	800731a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	461a      	mov	r2, r3
 80072b2:	2300      	movs	r3, #0
 80072b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d8:	f043 0318 	orr.w	r3, r3, #24
 80072dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80072f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d10f      	bne.n	8007318 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007312:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	4f54300a 	.word	0x4f54300a

0800732c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a13      	ldr	r2, [pc, #76]	; (8007390 <USB_CoreReset+0x64>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e01b      	b.n	8007382 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	daf2      	bge.n	8007338 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f043 0201 	orr.w	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a09      	ldr	r2, [pc, #36]	; (8007390 <USB_CoreReset+0x64>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d901      	bls.n	8007374 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e006      	b.n	8007382 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d0f0      	beq.n	8007362 <USB_CoreReset+0x36>

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	00030d40 	.word	0x00030d40

08007394 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7c1b      	ldrb	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d115      	bne.n	80073d8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b0:	2202      	movs	r2, #2
 80073b2:	2181      	movs	r1, #129	; 0x81
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f004 fbc4 	bl	800bb42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c4:	2202      	movs	r2, #2
 80073c6:	2101      	movs	r1, #1
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f004 fbba 	bl	800bb42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80073d6:	e012      	b.n	80073fe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073d8:	2340      	movs	r3, #64	; 0x40
 80073da:	2202      	movs	r2, #2
 80073dc:	2181      	movs	r1, #129	; 0x81
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f004 fbaf 	bl	800bb42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	2202      	movs	r2, #2
 80073ee:	2101      	movs	r1, #1
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f004 fba6 	bl	800bb42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073fe:	2308      	movs	r3, #8
 8007400:	2203      	movs	r2, #3
 8007402:	2182      	movs	r1, #130	; 0x82
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f004 fb9c 	bl	800bb42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007410:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007414:	f004 fd12 	bl	800be3c <malloc>
 8007418:	4603      	mov	r3, r0
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	e026      	b.n	8007480 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007438:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7c1b      	ldrb	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007466:	2101      	movs	r1, #1
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f004 fc5b 	bl	800bd24 <USBD_LL_PrepareReceive>
 800746e:	e007      	b.n	8007480 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007476:	2340      	movs	r3, #64	; 0x40
 8007478:	2101      	movs	r1, #1
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f004 fc52 	bl	800bd24 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800749a:	2181      	movs	r1, #129	; 0x81
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f004 fb76 	bl	800bb8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074a8:	2101      	movs	r1, #1
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f004 fb6f 	bl	800bb8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074b8:	2182      	movs	r1, #130	; 0x82
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f004 fb67 	bl	800bb8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074e0:	4618      	mov	r0, r3
 80074e2:	f004 fcb3 	bl	800be4c <free>
    pdev->pClassData = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007508:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751e:	2b00      	cmp	r3, #0
 8007520:	d039      	beq.n	8007596 <USBD_CDC_Setup+0x9e>
 8007522:	2b20      	cmp	r3, #32
 8007524:	d17c      	bne.n	8007620 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d029      	beq.n	8007582 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	b25b      	sxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	da11      	bge.n	800755c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007544:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	88d2      	ldrh	r2, [r2, #6]
 800754a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800754c:	6939      	ldr	r1, [r7, #16]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	88db      	ldrh	r3, [r3, #6]
 8007552:	461a      	mov	r2, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f9c9 	bl	80088ec <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800755a:	e068      	b.n	800762e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	785a      	ldrb	r2, [r3, #1]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	88db      	ldrh	r3, [r3, #6]
 800756a:	b2da      	uxtb	r2, r3
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007572:	6939      	ldr	r1, [r7, #16]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	88db      	ldrh	r3, [r3, #6]
 8007578:	461a      	mov	r2, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 f9e4 	bl	8008948 <USBD_CtlPrepareRx>
    break;
 8007580:	e055      	b.n	800762e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	7850      	ldrb	r0, [r2, #1]
 800758e:	2200      	movs	r2, #0
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	4798      	blx	r3
    break;
 8007594:	e04b      	b.n	800762e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b0a      	cmp	r3, #10
 800759c:	d017      	beq.n	80075ce <USBD_CDC_Setup+0xd6>
 800759e:	2b0b      	cmp	r3, #11
 80075a0:	d029      	beq.n	80075f6 <USBD_CDC_Setup+0xfe>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d133      	bne.n	800760e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d107      	bne.n	80075c0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80075b0:	f107 030c 	add.w	r3, r7, #12
 80075b4:	2202      	movs	r2, #2
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 f997 	bl	80088ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80075be:	e02e      	b.n	800761e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 f927 	bl	8008816 <USBD_CtlError>
			  ret = USBD_FAIL;
 80075c8:	2302      	movs	r3, #2
 80075ca:	75fb      	strb	r3, [r7, #23]
      break;
 80075cc:	e027      	b.n	800761e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d107      	bne.n	80075e8 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80075d8:	f107 030f 	add.w	r3, r7, #15
 80075dc:	2201      	movs	r2, #1
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f983 	bl	80088ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80075e6:	e01a      	b.n	800761e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f913 	bl	8008816 <USBD_CtlError>
			  ret = USBD_FAIL;
 80075f0:	2302      	movs	r3, #2
 80075f2:	75fb      	strb	r3, [r7, #23]
      break;
 80075f4:	e013      	b.n	800761e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d00d      	beq.n	800761c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 f907 	bl	8008816 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007608:	2302      	movs	r3, #2
 800760a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800760c:	e006      	b.n	800761c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 f900 	bl	8008816 <USBD_CtlError>
      ret = USBD_FAIL;
 8007616:	2302      	movs	r3, #2
 8007618:	75fb      	strb	r3, [r7, #23]
      break;
 800761a:	e000      	b.n	800761e <USBD_CDC_Setup+0x126>
      break;
 800761c:	bf00      	nop
    }
    break;
 800761e:	e006      	b.n	800762e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 f8f7 	bl	8008816 <USBD_CtlError>
    ret = USBD_FAIL;
 8007628:	2302      	movs	r3, #2
 800762a:	75fb      	strb	r3, [r7, #23]
    break;
 800762c:	bf00      	nop
  }

  return ret;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800764a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007652:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800765a:	2b00      	cmp	r3, #0
 800765c:	d03a      	beq.n	80076d4 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800765e:	78fa      	ldrb	r2, [r7, #3]
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	331c      	adds	r3, #28
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d029      	beq.n	80076c8 <USBD_CDC_DataIn+0x90>
 8007674:	78fa      	ldrb	r2, [r7, #3]
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	331c      	adds	r3, #28
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	78f9      	ldrb	r1, [r7, #3]
 8007688:	68b8      	ldr	r0, [r7, #8]
 800768a:	460b      	mov	r3, r1
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	1a5b      	subs	r3, r3, r1
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4403      	add	r3, r0
 8007694:	3344      	adds	r3, #68	; 0x44
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	fbb2 f1f3 	udiv	r1, r2, r3
 800769c:	fb03 f301 	mul.w	r3, r3, r1
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d110      	bne.n	80076c8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076a6:	78fa      	ldrb	r2, [r7, #3]
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	331c      	adds	r3, #28
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80076ba:	78f9      	ldrb	r1, [r7, #3]
 80076bc:	2300      	movs	r3, #0
 80076be:	2200      	movs	r2, #0
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f004 fb0c 	bl	800bcde <USBD_LL_Transmit>
 80076c6:	e003      	b.n	80076d0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f004 fb37 	bl	800bd6a <USBD_LL_GetRxDataSize>
 80076fc:	4602      	mov	r2, r0
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007722:	4611      	mov	r1, r2
 8007724:	4798      	blx	r3

    return USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	e000      	b.n	800772c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800772a:	2302      	movs	r3, #2
  }
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007742:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800774a:	2b00      	cmp	r3, #0
 800774c:	d015      	beq.n	800777a <USBD_CDC_EP0_RxReady+0x46>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007754:	2bff      	cmp	r3, #255	; 0xff
 8007756:	d010      	beq.n	800777a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007766:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800776e:	b292      	uxth	r2, r2
 8007770:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	22ff      	movs	r2, #255	; 0xff
 8007776:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2243      	movs	r2, #67	; 0x43
 8007790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007792:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	20000090 	.word	0x20000090

080077a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2243      	movs	r2, #67	; 0x43
 80077b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077b2:	4b03      	ldr	r3, [pc, #12]	; (80077c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	2000004c 	.word	0x2000004c

080077c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2243      	movs	r2, #67	; 0x43
 80077d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077d2:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	200000d4 	.word	0x200000d4

080077e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	220a      	movs	r2, #10
 80077f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80077f2:	4b03      	ldr	r3, [pc, #12]	; (8007800 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20000008 	.word	0x20000008

08007804 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800780e:	2302      	movs	r3, #2
 8007810:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007832:	b480      	push	{r7}
 8007834:	b087      	sub	sp, #28
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007846:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007850:	88fa      	ldrh	r2, [r7, #6]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007876:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800789c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01c      	beq.n	80078e2 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d115      	bne.n	80078de <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2181      	movs	r1, #129	; 0x81
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f004 fa02 	bl	800bcde <USBD_LL_Transmit>

      return USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	e002      	b.n	80078e4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80078e2:	2302      	movs	r3, #2
  }
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007902:	2b00      	cmp	r3, #0
 8007904:	d017      	beq.n	8007936 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7c1b      	ldrb	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007918:	2101      	movs	r1, #1
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f004 fa02 	bl	800bd24 <USBD_LL_PrepareReceive>
 8007920:	e007      	b.n	8007932 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007928:	2340      	movs	r3, #64	; 0x40
 800792a:	2101      	movs	r1, #1
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f004 f9f9 	bl	800bd24 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007936:	2302      	movs	r3, #2
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007954:	2302      	movs	r3, #2
 8007956:	e01a      	b.n	800798e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	79fa      	ldrb	r2, [r7, #7]
 8007984:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f004 f874 	bl	800ba74 <USBD_LL_Init>

  return USBD_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d006      	beq.n	80079b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
 80079b6:	e001      	b.n	80079bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079b8:	2302      	movs	r3, #2
 80079ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f004 f89a 	bl	800bb0c <USBD_LL_Start>

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007a04:	2302      	movs	r3, #2
 8007a06:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	78fa      	ldrb	r2, [r7, #3]
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	4798      	blx	r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
  return USBD_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fe94 	bl	800879c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d00c      	beq.n	8007ab2 <USBD_LL_SetupStage+0x56>
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d302      	bcc.n	8007aa2 <USBD_LL_SetupStage+0x46>
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d010      	beq.n	8007ac2 <USBD_LL_SetupStage+0x66>
 8007aa0:	e017      	b.n	8007ad2 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa04 	bl	8007eb8 <USBD_StdDevReq>
    break;
 8007ab0:	e01a      	b.n	8007ae8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa66 	bl	8007f8c <USBD_StdItfReq>
    break;
 8007ac0:	e012      	b.n	8007ae8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 faa4 	bl	8008018 <USBD_StdEPReq>
    break;
 8007ad0:	e00a      	b.n	8007ae8 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f004 f873 	bl	800bbcc <USBD_LL_StallEP>
    break;
 8007ae6:	bf00      	nop
  }

  return USBD_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	460b      	mov	r3, r1
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d14b      	bne.n	8007b9e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007b0c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d134      	bne.n	8007b82 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d919      	bls.n	8007b58 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	1ad2      	subs	r2, r2, r3
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d203      	bcs.n	8007b46 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	e002      	b.n	8007b4c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 ff17 	bl	8008984 <USBD_CtlContinueRx>
 8007b56:	e038      	b.n	8007bca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d105      	bne.n	8007b7a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 ff14 	bl	80089a8 <USBD_CtlSendStatus>
 8007b80:	e023      	b.n	8007bca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	d11e      	bne.n	8007bca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007b94:	2100      	movs	r1, #0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f004 f818 	bl	800bbcc <USBD_LL_StallEP>
 8007b9c:	e015      	b.n	8007bca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00d      	beq.n	8007bc6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d108      	bne.n	8007bc6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	7afa      	ldrb	r2, [r7, #11]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	4798      	blx	r3
 8007bc4:	e001      	b.n	8007bca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e000      	b.n	8007bcc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d17f      	bne.n	8007ce8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3314      	adds	r3, #20
 8007bec:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d15c      	bne.n	8007cb2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d915      	bls.n	8007c30 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	1ad2      	subs	r2, r2, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fe81 	bl	8008924 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007c22:	2300      	movs	r3, #0
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f004 f87b 	bl	800bd24 <USBD_LL_PrepareReceive>
 8007c2e:	e04e      	b.n	8007cce <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	6912      	ldr	r2, [r2, #16]
 8007c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c3c:	fb02 f201 	mul.w	r2, r2, r1
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d11c      	bne.n	8007c80 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d316      	bcc.n	8007c80 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d20f      	bcs.n	8007c80 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c60:	2200      	movs	r2, #0
 8007c62:	2100      	movs	r1, #0
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fe5d 	bl	8008924 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007c72:	2300      	movs	r3, #0
 8007c74:	2200      	movs	r2, #0
 8007c76:	2100      	movs	r1, #0
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f004 f853 	bl	800bd24 <USBD_LL_PrepareReceive>
 8007c7e:	e026      	b.n	8007cce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d105      	bne.n	8007ca2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ca2:	2180      	movs	r1, #128	; 0x80
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f003 ff91 	bl	800bbcc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fe8f 	bl	80089ce <USBD_CtlReceiveStatus>
 8007cb0:	e00d      	b.n	8007cce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d004      	beq.n	8007cc6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d103      	bne.n	8007cce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007cc6:	2180      	movs	r1, #128	; 0x80
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f003 ff7f 	bl	800bbcc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d11d      	bne.n	8007d14 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff fe82 	bl	80079e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007ce6:	e015      	b.n	8007d14 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00d      	beq.n	8007d10 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d108      	bne.n	8007d10 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	7afa      	ldrb	r2, [r7, #11]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	4798      	blx	r3
 8007d0e:	e001      	b.n	8007d14 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d10:	2302      	movs	r3, #2
 8007d12:	e000      	b.n	8007d16 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f003 ff08 	bl	800bb42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2240      	movs	r2, #64	; 0x40
 8007d3e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	2200      	movs	r2, #0
 8007d46:	2180      	movs	r1, #128	; 0x80
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f003 fefa 	bl	800bb42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2240      	movs	r2, #64	; 0x40
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	6852      	ldr	r2, [r2, #4]
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	4611      	mov	r1, r2
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
  }

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d10b      	bne.n	8007e36 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6852      	ldr	r2, [r2, #4]
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3

  return USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d004      	beq.n	8007edc <USBD_StdDevReq+0x24>
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d002      	beq.n	8007edc <USBD_StdDevReq+0x24>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <USBD_StdDevReq+0x34>
 8007eda:	e04c      	b.n	8007f76 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
    break;
 8007eea:	e049      	b.n	8007f80 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b09      	cmp	r3, #9
 8007ef2:	d83a      	bhi.n	8007f6a <USBD_StdDevReq+0xb2>
 8007ef4:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <USBD_StdDevReq+0x44>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007f4d 	.word	0x08007f4d
 8007f00:	08007f61 	.word	0x08007f61
 8007f04:	08007f6b 	.word	0x08007f6b
 8007f08:	08007f57 	.word	0x08007f57
 8007f0c:	08007f6b 	.word	0x08007f6b
 8007f10:	08007f2f 	.word	0x08007f2f
 8007f14:	08007f25 	.word	0x08007f25
 8007f18:	08007f6b 	.word	0x08007f6b
 8007f1c:	08007f43 	.word	0x08007f43
 8007f20:	08007f39 	.word	0x08007f39
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f9d2 	bl	80082d0 <USBD_GetDescriptor>
      break;
 8007f2c:	e022      	b.n	8007f74 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fac7 	bl	80084c4 <USBD_SetAddress>
      break;
 8007f36:	e01d      	b.n	8007f74 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fb04 	bl	8008548 <USBD_SetConfig>
      break;
 8007f40:	e018      	b.n	8007f74 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fb8d 	bl	8008664 <USBD_GetConfig>
      break;
 8007f4a:	e013      	b.n	8007f74 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fbbc 	bl	80086cc <USBD_GetStatus>
      break;
 8007f54:	e00e      	b.n	8007f74 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fbea 	bl	8008732 <USBD_SetFeature>
      break;
 8007f5e:	e009      	b.n	8007f74 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fbf9 	bl	800875a <USBD_ClrFeature>
      break;
 8007f68:	e004      	b.n	8007f74 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc52 	bl	8008816 <USBD_CtlError>
      break;
 8007f72:	bf00      	nop
    }
    break;
 8007f74:	e004      	b.n	8007f80 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fc4c 	bl	8008816 <USBD_CtlError>
    break;
 8007f7e:	bf00      	nop
  }

  return ret;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop

08007f8c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d003      	beq.n	8007fae <USBD_StdItfReq+0x22>
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d001      	beq.n	8007fae <USBD_StdItfReq+0x22>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d12a      	bne.n	8008004 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d81d      	bhi.n	8007ff6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	889b      	ldrh	r3, [r3, #4]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d813      	bhi.n	8007fec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d110      	bne.n	8008000 <USBD_StdItfReq+0x74>
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10d      	bne.n	8008000 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fcdf 	bl	80089a8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007fea:	e009      	b.n	8008000 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fc11 	bl	8008816 <USBD_CtlError>
      break;
 8007ff4:	e004      	b.n	8008000 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fc0c 	bl	8008816 <USBD_CtlError>
      break;
 8007ffe:	e000      	b.n	8008002 <USBD_StdItfReq+0x76>
      break;
 8008000:	bf00      	nop
    }
    break;
 8008002:	e004      	b.n	800800e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fc05 	bl	8008816 <USBD_CtlError>
    break;
 800800c:	bf00      	nop
  }

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	889b      	ldrh	r3, [r3, #4]
 800802a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008034:	2b20      	cmp	r3, #32
 8008036:	d004      	beq.n	8008042 <USBD_StdEPReq+0x2a>
 8008038:	2b40      	cmp	r3, #64	; 0x40
 800803a:	d002      	beq.n	8008042 <USBD_StdEPReq+0x2a>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <USBD_StdEPReq+0x3a>
 8008040:	e13b      	b.n	80082ba <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	4798      	blx	r3
    break;
 8008050:	e138      	b.n	80082c4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800805a:	2b20      	cmp	r3, #32
 800805c:	d10a      	bne.n	8008074 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	4798      	blx	r3
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	e128      	b.n	80082c6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d03e      	beq.n	80080fa <USBD_StdEPReq+0xe2>
 800807c:	2b03      	cmp	r3, #3
 800807e:	d002      	beq.n	8008086 <USBD_StdEPReq+0x6e>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d070      	beq.n	8008166 <USBD_StdEPReq+0x14e>
 8008084:	e113      	b.n	80082ae <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800808c:	2b02      	cmp	r3, #2
 800808e:	d002      	beq.n	8008096 <USBD_StdEPReq+0x7e>
 8008090:	2b03      	cmp	r3, #3
 8008092:	d015      	beq.n	80080c0 <USBD_StdEPReq+0xa8>
 8008094:	e02b      	b.n	80080ee <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00c      	beq.n	80080b6 <USBD_StdEPReq+0x9e>
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	d009      	beq.n	80080b6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f003 fd90 	bl	800bbcc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80080ac:	2180      	movs	r1, #128	; 0x80
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f003 fd8c 	bl	800bbcc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80080b4:	e020      	b.n	80080f8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fbac 	bl	8008816 <USBD_CtlError>
        break;
 80080be:	e01b      	b.n	80080f8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	885b      	ldrh	r3, [r3, #2]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10e      	bne.n	80080e6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00b      	beq.n	80080e6 <USBD_StdEPReq+0xce>
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b80      	cmp	r3, #128	; 0x80
 80080d2:	d008      	beq.n	80080e6 <USBD_StdEPReq+0xce>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	88db      	ldrh	r3, [r3, #6]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d104      	bne.n	80080e6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f003 fd73 	bl	800bbcc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fc5e 	bl	80089a8 <USBD_CtlSendStatus>

        break;
 80080ec:	e004      	b.n	80080f8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb90 	bl	8008816 <USBD_CtlError>
        break;
 80080f6:	bf00      	nop
      }
      break;
 80080f8:	e0de      	b.n	80082b8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008100:	2b02      	cmp	r3, #2
 8008102:	d002      	beq.n	800810a <USBD_StdEPReq+0xf2>
 8008104:	2b03      	cmp	r3, #3
 8008106:	d015      	beq.n	8008134 <USBD_StdEPReq+0x11c>
 8008108:	e026      	b.n	8008158 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00c      	beq.n	800812a <USBD_StdEPReq+0x112>
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d009      	beq.n	800812a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f003 fd56 	bl	800bbcc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008120:	2180      	movs	r1, #128	; 0x80
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f003 fd52 	bl	800bbcc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008128:	e01c      	b.n	8008164 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fb72 	bl	8008816 <USBD_CtlError>
        break;
 8008132:	e017      	b.n	8008164 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	885b      	ldrh	r3, [r3, #2]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d112      	bne.n	8008162 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f003 fd5d 	bl	800bc0a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc29 	bl	80089a8 <USBD_CtlSendStatus>
        }
        break;
 8008156:	e004      	b.n	8008162 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fb5b 	bl	8008816 <USBD_CtlError>
        break;
 8008160:	e000      	b.n	8008164 <USBD_StdEPReq+0x14c>
        break;
 8008162:	bf00      	nop
      }
      break;
 8008164:	e0a8      	b.n	80082b8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800816c:	2b02      	cmp	r3, #2
 800816e:	d002      	beq.n	8008176 <USBD_StdEPReq+0x15e>
 8008170:	2b03      	cmp	r3, #3
 8008172:	d031      	beq.n	80081d8 <USBD_StdEPReq+0x1c0>
 8008174:	e095      	b.n	80082a2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <USBD_StdEPReq+0x174>
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b80      	cmp	r3, #128	; 0x80
 8008180:	d004      	beq.n	800818c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fb46 	bl	8008816 <USBD_CtlError>
          break;
 800818a:	e08f      	b.n	80082ac <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800818c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008190:	2b00      	cmp	r3, #0
 8008192:	da0b      	bge.n	80081ac <USBD_StdEPReq+0x194>
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	3310      	adds	r3, #16
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	3304      	adds	r3, #4
 80081aa:	e00a      	b.n	80081c2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2202      	movs	r2, #2
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fb8b 	bl	80088ec <USBD_CtlSendData>
          break;
 80081d6:	e069      	b.n	80082ac <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80081d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	da11      	bge.n	8008204 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	f003 020f 	and.w	r2, r3, #15
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3318      	adds	r3, #24
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d117      	bne.n	800822a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fb0a 	bl	8008816 <USBD_CtlError>
            break;
 8008202:	e053      	b.n	80082ac <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 faf7 	bl	8008816 <USBD_CtlError>
            break;
 8008228:	e040      	b.n	80082ac <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800822a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800822e:	2b00      	cmp	r3, #0
 8008230:	da0b      	bge.n	800824a <USBD_StdEPReq+0x232>
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	3310      	adds	r3, #16
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	4413      	add	r3, r2
 8008246:	3304      	adds	r3, #4
 8008248:	e00a      	b.n	8008260 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	4413      	add	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <USBD_StdEPReq+0x256>
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b80      	cmp	r3, #128	; 0x80
 800826c:	d103      	bne.n	8008276 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	e00e      	b.n	8008294 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f003 fce4 	bl	800bc48 <USBD_LL_IsStallEP>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2201      	movs	r2, #1
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e002      	b.n	8008294 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2202      	movs	r2, #2
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fb26 	bl	80088ec <USBD_CtlSendData>
          break;
 80082a0:	e004      	b.n	80082ac <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fab6 	bl	8008816 <USBD_CtlError>
        break;
 80082aa:	bf00      	nop
      }
      break;
 80082ac:	e004      	b.n	80082b8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fab0 	bl	8008816 <USBD_CtlError>
      break;
 80082b6:	bf00      	nop
    }
    break;
 80082b8:	e004      	b.n	80082c4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 faaa 	bl	8008816 <USBD_CtlError>
    break;
 80082c2:	bf00      	nop
  }

  return ret;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	0a1b      	lsrs	r3, r3, #8
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2b06      	cmp	r3, #6
 80082e6:	f200 80c9 	bhi.w	800847c <USBD_GetDescriptor+0x1ac>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <USBD_GetDescriptor+0x20>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	0800830d 	.word	0x0800830d
 80082f4:	08008325 	.word	0x08008325
 80082f8:	08008365 	.word	0x08008365
 80082fc:	0800847d 	.word	0x0800847d
 8008300:	0800847d 	.word	0x0800847d
 8008304:	08008429 	.word	0x08008429
 8008308:	0800844f 	.word	0x0800844f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	7c12      	ldrb	r2, [r2, #16]
 8008318:	f107 010a 	add.w	r1, r7, #10
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	60f8      	str	r0, [r7, #12]
    break;
 8008322:	e0b0      	b.n	8008486 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7c1b      	ldrb	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10d      	bne.n	8008348 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	f107 020a 	add.w	r2, r7, #10
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
 800833c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	2202      	movs	r2, #2
 8008344:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008346:	e09e      	b.n	8008486 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	f107 020a 	add.w	r2, r7, #10
 8008354:	4610      	mov	r0, r2
 8008356:	4798      	blx	r3
 8008358:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	2202      	movs	r2, #2
 8008360:	701a      	strb	r2, [r3, #0]
    break;
 8008362:	e090      	b.n	8008486 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	885b      	ldrh	r3, [r3, #2]
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b05      	cmp	r3, #5
 800836c:	d856      	bhi.n	800841c <USBD_GetDescriptor+0x14c>
 800836e:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <USBD_GetDescriptor+0xa4>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	0800838d 	.word	0x0800838d
 8008378:	080083a5 	.word	0x080083a5
 800837c:	080083bd 	.word	0x080083bd
 8008380:	080083d5 	.word	0x080083d5
 8008384:	080083ed 	.word	0x080083ed
 8008388:	08008405 	.word	0x08008405
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	7c12      	ldrb	r2, [r2, #16]
 8008398:	f107 010a 	add.w	r1, r7, #10
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
 80083a0:	60f8      	str	r0, [r7, #12]
      break;
 80083a2:	e040      	b.n	8008426 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	7c12      	ldrb	r2, [r2, #16]
 80083b0:	f107 010a 	add.w	r1, r7, #10
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
      break;
 80083ba:	e034      	b.n	8008426 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 010a 	add.w	r1, r7, #10
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
      break;
 80083d2:	e028      	b.n	8008426 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	7c12      	ldrb	r2, [r2, #16]
 80083e0:	f107 010a 	add.w	r1, r7, #10
 80083e4:	4610      	mov	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	60f8      	str	r0, [r7, #12]
      break;
 80083ea:	e01c      	b.n	8008426 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 010a 	add.w	r1, r7, #10
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
      break;
 8008402:	e010      	b.n	8008426 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	7c12      	ldrb	r2, [r2, #16]
 8008410:	f107 010a 	add.w	r1, r7, #10
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	60f8      	str	r0, [r7, #12]
      break;
 800841a:	e004      	b.n	8008426 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f9f9 	bl	8008816 <USBD_CtlError>
      return;
 8008424:	e04b      	b.n	80084be <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008426:	e02e      	b.n	8008486 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7c1b      	ldrb	r3, [r3, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d109      	bne.n	8008444 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	f107 020a 	add.w	r2, r7, #10
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
      break;
 8008442:	e020      	b.n	8008486 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9e5 	bl	8008816 <USBD_CtlError>
      return;
 800844c:	e037      	b.n	80084be <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	7c1b      	ldrb	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10d      	bne.n	8008472 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	f107 020a 	add.w	r2, r7, #10
 8008462:	4610      	mov	r0, r2
 8008464:	4798      	blx	r3
 8008466:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3301      	adds	r3, #1
 800846c:	2207      	movs	r2, #7
 800846e:	701a      	strb	r2, [r3, #0]
      break;
 8008470:	e009      	b.n	8008486 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f9ce 	bl	8008816 <USBD_CtlError>
      return;
 800847a:	e020      	b.n	80084be <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9c9 	bl	8008816 <USBD_CtlError>
    return;
 8008484:	e01b      	b.n	80084be <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008486:	897b      	ldrh	r3, [r7, #10]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d011      	beq.n	80084b0 <USBD_GetDescriptor+0x1e0>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	88db      	ldrh	r3, [r3, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00d      	beq.n	80084b0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	88da      	ldrh	r2, [r3, #6]
 8008498:	897b      	ldrh	r3, [r7, #10]
 800849a:	4293      	cmp	r3, r2
 800849c:	bf28      	it	cs
 800849e:	4613      	movcs	r3, r2
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80084a4:	897b      	ldrh	r3, [r7, #10]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68f9      	ldr	r1, [r7, #12]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa1e 	bl	80088ec <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	88db      	ldrh	r3, [r3, #6]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fa75 	bl	80089a8 <USBD_CtlSendStatus>
  }
}
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	889b      	ldrh	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d130      	bne.n	8008538 <USBD_SetAddress+0x74>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	88db      	ldrh	r3, [r3, #6]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d12c      	bne.n	8008538 <USBD_SetAddress+0x74>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	885b      	ldrh	r3, [r3, #2]
 80084e2:	2b7f      	cmp	r3, #127	; 0x7f
 80084e4:	d828      	bhi.n	8008538 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	885b      	ldrh	r3, [r3, #2]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d104      	bne.n	8008506 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f989 	bl	8008816 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008504:	e01c      	b.n	8008540 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	7bfa      	ldrb	r2, [r7, #15]
 800850a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f003 fbc4 	bl	800bca0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fa45 	bl	80089a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852c:	e008      	b.n	8008540 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008536:	e003      	b.n	8008540 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f96b 	bl	8008816 <USBD_CtlError>
  }
}
 8008540:	bf00      	nop
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	885b      	ldrh	r3, [r3, #2]
 8008556:	b2da      	uxtb	r2, r3
 8008558:	4b41      	ldr	r3, [pc, #260]	; (8008660 <USBD_SetConfig+0x118>)
 800855a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800855c:	4b40      	ldr	r3, [pc, #256]	; (8008660 <USBD_SetConfig+0x118>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d904      	bls.n	800856e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f955 	bl	8008816 <USBD_CtlError>
 800856c:	e075      	b.n	800865a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008574:	2b02      	cmp	r3, #2
 8008576:	d002      	beq.n	800857e <USBD_SetConfig+0x36>
 8008578:	2b03      	cmp	r3, #3
 800857a:	d023      	beq.n	80085c4 <USBD_SetConfig+0x7c>
 800857c:	e062      	b.n	8008644 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800857e:	4b38      	ldr	r3, [pc, #224]	; (8008660 <USBD_SetConfig+0x118>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d01a      	beq.n	80085bc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008586:	4b36      	ldr	r3, [pc, #216]	; (8008660 <USBD_SetConfig+0x118>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2203      	movs	r2, #3
 8008594:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008598:	4b31      	ldr	r3, [pc, #196]	; (8008660 <USBD_SetConfig+0x118>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fa2a 	bl	80079f8 <USBD_SetClassConfig>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d104      	bne.n	80085b4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f932 	bl	8008816 <USBD_CtlError>
          return;
 80085b2:	e052      	b.n	800865a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f9f7 	bl	80089a8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80085ba:	e04e      	b.n	800865a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f9f3 	bl	80089a8 <USBD_CtlSendStatus>
      break;
 80085c2:	e04a      	b.n	800865a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085c4:	4b26      	ldr	r3, [pc, #152]	; (8008660 <USBD_SetConfig+0x118>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d112      	bne.n	80085f2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80085d4:	4b22      	ldr	r3, [pc, #136]	; (8008660 <USBD_SetConfig+0x118>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80085de:	4b20      	ldr	r3, [pc, #128]	; (8008660 <USBD_SetConfig+0x118>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff fa26 	bl	8007a36 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f9dc 	bl	80089a8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80085f0:	e033      	b.n	800865a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80085f2:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <USBD_SetConfig+0x118>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d01d      	beq.n	800863c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff fa14 	bl	8007a36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800860e:	4b14      	ldr	r3, [pc, #80]	; (8008660 <USBD_SetConfig+0x118>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <USBD_SetConfig+0x118>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff f9ea 	bl	80079f8 <USBD_SetClassConfig>
 8008624:	4603      	mov	r3, r0
 8008626:	2b02      	cmp	r3, #2
 8008628:	d104      	bne.n	8008634 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f8f2 	bl	8008816 <USBD_CtlError>
          return;
 8008632:	e012      	b.n	800865a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f9b7 	bl	80089a8 <USBD_CtlSendStatus>
      break;
 800863a:	e00e      	b.n	800865a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f9b3 	bl	80089a8 <USBD_CtlSendStatus>
      break;
 8008642:	e00a      	b.n	800865a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f8e5 	bl	8008816 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800864c:	4b04      	ldr	r3, [pc, #16]	; (8008660 <USBD_SetConfig+0x118>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff f9ef 	bl	8007a36 <USBD_ClrClassConfig>
      break;
 8008658:	bf00      	nop
    }
  }
}
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000200 	.word	0x20000200

08008664 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	88db      	ldrh	r3, [r3, #6]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d004      	beq.n	8008680 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8cc 	bl	8008816 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800867e:	e021      	b.n	80086c4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008686:	2b01      	cmp	r3, #1
 8008688:	db17      	blt.n	80086ba <USBD_GetConfig+0x56>
 800868a:	2b02      	cmp	r3, #2
 800868c:	dd02      	ble.n	8008694 <USBD_GetConfig+0x30>
 800868e:	2b03      	cmp	r3, #3
 8008690:	d00b      	beq.n	80086aa <USBD_GetConfig+0x46>
 8008692:	e012      	b.n	80086ba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3308      	adds	r3, #8
 800869e:	2201      	movs	r2, #1
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f922 	bl	80088ec <USBD_CtlSendData>
      break;
 80086a8:	e00c      	b.n	80086c4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3304      	adds	r3, #4
 80086ae:	2201      	movs	r2, #1
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f91a 	bl	80088ec <USBD_CtlSendData>
      break;
 80086b8:	e004      	b.n	80086c4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f8aa 	bl	8008816 <USBD_CtlError>
      break;
 80086c2:	bf00      	nop
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086dc:	3b01      	subs	r3, #1
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d81e      	bhi.n	8008720 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d004      	beq.n	80086f4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f892 	bl	8008816 <USBD_CtlError>
      break;
 80086f2:	e01a      	b.n	800872a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f043 0202 	orr.w	r2, r3, #2
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	330c      	adds	r3, #12
 8008714:	2202      	movs	r2, #2
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f8e7 	bl	80088ec <USBD_CtlSendData>
    break;
 800871e:	e004      	b.n	800872a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f877 	bl	8008816 <USBD_CtlError>
    break;
 8008728:	bf00      	nop
  }
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d106      	bne.n	8008752 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f92b 	bl	80089a8 <USBD_CtlSendStatus>
  }

}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800876a:	3b01      	subs	r3, #1
 800876c:	2b02      	cmp	r3, #2
 800876e:	d80b      	bhi.n	8008788 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	885b      	ldrh	r3, [r3, #2]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d10c      	bne.n	8008792 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f911 	bl	80089a8 <USBD_CtlSendStatus>
    }
    break;
 8008786:	e004      	b.n	8008792 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f843 	bl	8008816 <USBD_CtlError>
    break;
 8008790:	e000      	b.n	8008794 <USBD_ClrFeature+0x3a>
    break;
 8008792:	bf00      	nop
  }
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781a      	ldrb	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	785a      	ldrb	r2, [r3, #1]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	3302      	adds	r3, #2
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	b29a      	uxth	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	3303      	adds	r3, #3
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	021b      	lsls	r3, r3, #8
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4413      	add	r3, r2
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	3304      	adds	r3, #4
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	b29a      	uxth	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	3305      	adds	r3, #5
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	3306      	adds	r3, #6
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	3307      	adds	r3, #7
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	4413      	add	r3, r2
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	80da      	strh	r2, [r3, #6]

}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008820:	2180      	movs	r1, #128	; 0x80
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f003 f9d2 	bl	800bbcc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008828:	2100      	movs	r1, #0
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f003 f9ce 	bl	800bbcc <USBD_LL_StallEP>
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d032      	beq.n	80088b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f834 	bl	80088bc <USBD_GetLen>
 8008854:	4603      	mov	r3, r0
 8008856:	3301      	adds	r3, #1
 8008858:	b29b      	uxth	r3, r3
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	75fa      	strb	r2, [r7, #23]
 8008868:	461a      	mov	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	4413      	add	r3, r2
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	7812      	ldrb	r2, [r2, #0]
 8008872:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	75fa      	strb	r2, [r7, #23]
 800887a:	461a      	mov	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4413      	add	r3, r2
 8008880:	2203      	movs	r2, #3
 8008882:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008884:	e012      	b.n	80088ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	60fa      	str	r2, [r7, #12]
 800888c:	7dfa      	ldrb	r2, [r7, #23]
 800888e:	1c51      	adds	r1, r2, #1
 8008890:	75f9      	strb	r1, [r7, #23]
 8008892:	4611      	mov	r1, r2
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	440a      	add	r2, r1
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	75fa      	strb	r2, [r7, #23]
 80088a2:	461a      	mov	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4413      	add	r3, r2
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e8      	bne.n	8008886 <USBD_GetString+0x4e>
    }
  }
}
 80088b4:	bf00      	nop
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80088c8:	e005      	b.n	80088d6 <USBD_GetLen+0x1a>
    {
        len++;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	3301      	adds	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
        buf++;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3301      	adds	r3, #1
 80088d4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f5      	bne.n	80088ca <USBD_GetLen+0xe>
    }

    return len;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2202      	movs	r2, #2
 80088fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008908:	88fa      	ldrh	r2, [r7, #6]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	2100      	movs	r1, #0
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f003 f9e2 	bl	800bcde <USBD_LL_Transmit>

  return USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008932:	88fb      	ldrh	r3, [r7, #6]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	2100      	movs	r1, #0
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f003 f9d0 	bl	800bcde <USBD_LL_Transmit>

  return USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2203      	movs	r2, #3
 800895a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008966:	88fa      	ldrh	r2, [r7, #6]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	2100      	movs	r1, #0
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f003 f9d5 	bl	800bd24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	4613      	mov	r3, r2
 8008990:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f003 f9c3 	bl	800bd24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2204      	movs	r2, #4
 80089b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089b8:	2300      	movs	r3, #0
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f003 f98d 	bl	800bcde <USBD_LL_Transmit>

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2205      	movs	r2, #5
 80089da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80089de:	2300      	movs	r3, #0
 80089e0:	2200      	movs	r2, #0
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f003 f99d 	bl	800bd24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089fa:	f3ef 8305 	mrs	r3, IPSR
 80089fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10f      	bne.n	8008a26 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a06:	f3ef 8310 	mrs	r3, PRIMASK
 8008a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <osKernelInitialize+0x32>
 8008a12:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <osKernelInitialize+0x64>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d109      	bne.n	8008a2e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8008a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008a26:	f06f 0305 	mvn.w	r3, #5
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	e00c      	b.n	8008a48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a2e:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <osKernelInitialize+0x64>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008a36:	4b08      	ldr	r3, [pc, #32]	; (8008a58 <osKernelInitialize+0x64>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e002      	b.n	8008a48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295
 8008a46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a48:	68fb      	ldr	r3, [r7, #12]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000204 	.word	0x20000204

08008a5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a62:	f3ef 8305 	mrs	r3, IPSR
 8008a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10f      	bne.n	8008a8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a72:	607b      	str	r3, [r7, #4]
  return(result);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <osKernelStart+0x32>
 8008a7a:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <osKernelStart+0x64>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d109      	bne.n	8008a96 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a82:	f3ef 8311 	mrs	r3, BASEPRI
 8008a86:	603b      	str	r3, [r7, #0]
  return(result);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008a8e:	f06f 0305 	mvn.w	r3, #5
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e00e      	b.n	8008ab4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a96:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <osKernelStart+0x64>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d107      	bne.n	8008aae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008a9e:	4b08      	ldr	r3, [pc, #32]	; (8008ac0 <osKernelStart+0x64>)
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008aa4:	f001 f86c 	bl	8009b80 <vTaskStartScheduler>
      stat = osOK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	e002      	b.n	8008ab4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008aae:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000204 	.word	0x20000204

08008ac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b092      	sub	sp, #72	; 0x48
 8008ac8:	af04      	add	r7, sp, #16
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ad4:	f3ef 8305 	mrs	r3, IPSR
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 8095 	bne.w	8008c0c <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ae6:	623b      	str	r3, [r7, #32]
  return(result);
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f040 808e 	bne.w	8008c0c <osThreadNew+0x148>
 8008af0:	4b49      	ldr	r3, [pc, #292]	; (8008c18 <osThreadNew+0x154>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d106      	bne.n	8008b06 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008af8:	f3ef 8311 	mrs	r3, BASEPRI
 8008afc:	61fb      	str	r3, [r7, #28]
  return(result);
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f040 8083 	bne.w	8008c0c <osThreadNew+0x148>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d07f      	beq.n	8008c0c <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8008b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b10:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008b12:	2318      	movs	r3, #24
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008b16:	2300      	movs	r3, #0
 8008b18:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008b1a:	f107 031b 	add.w	r3, r7, #27
 8008b1e:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008b20:	f04f 33ff 	mov.w	r3, #4294967295
 8008b24:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d045      	beq.n	8008bb8 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <osThreadNew+0x76>
        name = attr->name;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d008      	beq.n	8008b60 <osThreadNew+0x9c>
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	2b38      	cmp	r3, #56	; 0x38
 8008b52:	d805      	bhi.n	8008b60 <osThreadNew+0x9c>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <osThreadNew+0xa0>
        return (NULL);
 8008b60:	2300      	movs	r3, #0
 8008b62:	e054      	b.n	8008c0e <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	089b      	lsrs	r3, r3, #2
 8008b72:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00e      	beq.n	8008b9a <osThreadNew+0xd6>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b5b      	cmp	r3, #91	; 0x5b
 8008b82:	d90a      	bls.n	8008b9a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d006      	beq.n	8008b9a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <osThreadNew+0xd6>
        mem = 1;
 8008b94:	2301      	movs	r3, #1
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b98:	e010      	b.n	8008bbc <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10c      	bne.n	8008bbc <osThreadNew+0xf8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d108      	bne.n	8008bbc <osThreadNew+0xf8>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d104      	bne.n	8008bbc <osThreadNew+0xf8>
          mem = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb6:	e001      	b.n	8008bbc <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d110      	bne.n	8008be4 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bca:	9202      	str	r2, [sp, #8]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fe09 	bl	80097f0 <xTaskCreateStatic>
 8008bde:	4603      	mov	r3, r0
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	e013      	b.n	8008c0c <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d110      	bne.n	8008c0c <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	f107 0314 	add.w	r3, r7, #20
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fe50 	bl	80098a2 <xTaskCreate>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d001      	beq.n	8008c0c <osThreadNew+0x148>
          hTask = NULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c0c:	697b      	ldr	r3, [r7, #20]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3738      	adds	r7, #56	; 0x38
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000204 	.word	0x20000204

08008c1c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c24:	f3ef 8305 	mrs	r3, IPSR
 8008c28:	613b      	str	r3, [r7, #16]
  return(result);
 8008c2a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10f      	bne.n	8008c50 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c30:	f3ef 8310 	mrs	r3, PRIMASK
 8008c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d109      	bne.n	8008c50 <osDelay+0x34>
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <osDelay+0x58>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d109      	bne.n	8008c58 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c44:	f3ef 8311 	mrs	r3, BASEPRI
 8008c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <osDelay+0x3c>
    stat = osErrorISR;
 8008c50:	f06f 0305 	mvn.w	r3, #5
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e007      	b.n	8008c68 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 ff58 	bl	8009b18 <vTaskDelay>
    }
  }

  return (stat);
 8008c68:	697b      	ldr	r3, [r7, #20]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000204 	.word	0x20000204

08008c78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4a07      	ldr	r2, [pc, #28]	; (8008ca4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	4a06      	ldr	r2, [pc, #24]	; (8008ca8 <vApplicationGetIdleTaskMemory+0x30>)
 8008c8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c96:	601a      	str	r2, [r3, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	20000208 	.word	0x20000208
 8008ca8:	20000264 	.word	0x20000264

08008cac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4a07      	ldr	r2, [pc, #28]	; (8008cd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008cbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	4a06      	ldr	r2, [pc, #24]	; (8008cdc <vApplicationGetTimerTaskMemory+0x30>)
 8008cc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cca:	601a      	str	r2, [r3, #0]
}
 8008ccc:	bf00      	nop
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	20000a64 	.word	0x20000a64
 8008cdc:	20000ac0 	.word	0x20000ac0

08008ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f103 0208 	add.w	r2, r3, #8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f103 0208 	add.w	r2, r3, #8
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f103 0208 	add.w	r2, r3, #8
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	601a      	str	r2, [r3, #0]
}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d82:	b480      	push	{r7}
 8008d84:	b085      	sub	sp, #20
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d103      	bne.n	8008da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	e00c      	b.n	8008dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3308      	adds	r3, #8
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e002      	b.n	8008db0 <vListInsert+0x2e>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d2f6      	bcs.n	8008daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]
}
 8008de8:	bf00      	nop
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6892      	ldr	r2, [r2, #8]
 8008e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6852      	ldr	r2, [r2, #4]
 8008e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d103      	bne.n	8008e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	1e5a      	subs	r2, r3, #1
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d109      	bne.n	8008e70 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60bb      	str	r3, [r7, #8]
 8008e6e:	e7fe      	b.n	8008e6e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008e70:	f001 ffd4 	bl	800ae1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7c:	68f9      	ldr	r1, [r7, #12]
 8008e7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e80:	fb01 f303 	mul.w	r3, r1, r3
 8008e84:	441a      	add	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ea6:	fb01 f303 	mul.w	r3, r1, r3
 8008eaa:	441a      	add	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	22ff      	movs	r2, #255	; 0xff
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	22ff      	movs	r2, #255	; 0xff
 8008ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d114      	bne.n	8008ef0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01a      	beq.n	8008f04 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3310      	adds	r3, #16
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 f8da 	bl	800a08c <xTaskRemoveFromEventList>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d012      	beq.n	8008f04 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ede:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <xQueueGenericReset+0xcc>)
 8008ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	e009      	b.n	8008f04 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3310      	adds	r3, #16
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fef3 	bl	8008ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3324      	adds	r3, #36	; 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff feee 	bl	8008ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f04:	f001 ffb8 	bl	800ae78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f08:	2301      	movs	r3, #1
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	e000ed04 	.word	0xe000ed04

08008f18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08e      	sub	sp, #56	; 0x38
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <xQueueGenericCreateStatic+0x28>
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f3e:	e7fe      	b.n	8008f3e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <xQueueGenericCreateStatic+0x42>
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
 8008f58:	e7fe      	b.n	8008f58 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <xQueueGenericCreateStatic+0x4e>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <xQueueGenericCreateStatic+0x52>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <xQueueGenericCreateStatic+0x54>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <xQueueGenericCreateStatic+0x6c>
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	623b      	str	r3, [r7, #32]
 8008f82:	e7fe      	b.n	8008f82 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <xQueueGenericCreateStatic+0x78>
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <xQueueGenericCreateStatic+0x7c>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <xQueueGenericCreateStatic+0x7e>
 8008f94:	2300      	movs	r3, #0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <xQueueGenericCreateStatic+0x96>
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	e7fe      	b.n	8008fac <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fae:	2350      	movs	r3, #80	; 0x50
 8008fb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b50      	cmp	r3, #80	; 0x50
 8008fb6:	d009      	beq.n	8008fcc <xQueueGenericCreateStatic+0xb4>
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	e7fe      	b.n	8008fca <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00d      	beq.n	8008ff2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f805 	bl	8008ffc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3730      	adds	r7, #48	; 0x30
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	e002      	b.n	800901e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800902a:	2101      	movs	r1, #1
 800902c:	69b8      	ldr	r0, [r7, #24]
 800902e:	f7ff ff0b 	bl	8008e48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	78fa      	ldrb	r2, [r7, #3]
 8009036:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	; 0x38
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009052:	2300      	movs	r3, #0
 8009054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <xQueueGenericSend+0x30>
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	62bb      	str	r3, [r7, #40]	; 0x28
 8009072:	e7fe      	b.n	8009072 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <xQueueGenericSend+0x3e>
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <xQueueGenericSend+0x42>
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <xQueueGenericSend+0x44>
 8009086:	2300      	movs	r3, #0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d109      	bne.n	80090a0 <xQueueGenericSend+0x5c>
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
 800909e:	e7fe      	b.n	800909e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d103      	bne.n	80090ae <xQueueGenericSend+0x6a>
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d101      	bne.n	80090b2 <xQueueGenericSend+0x6e>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <xQueueGenericSend+0x70>
 80090b2:	2300      	movs	r3, #0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d109      	bne.n	80090cc <xQueueGenericSend+0x88>
 80090b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	623b      	str	r3, [r7, #32]
 80090ca:	e7fe      	b.n	80090ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090cc:	f001 f99a 	bl	800a404 <xTaskGetSchedulerState>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <xQueueGenericSend+0x98>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <xQueueGenericSend+0x9c>
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <xQueueGenericSend+0x9e>
 80090e0:	2300      	movs	r3, #0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <xQueueGenericSend+0xb6>
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	61fb      	str	r3, [r7, #28]
 80090f8:	e7fe      	b.n	80090f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090fa:	f001 fe8f 	bl	800ae1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009106:	429a      	cmp	r2, r3
 8009108:	d302      	bcc.n	8009110 <xQueueGenericSend+0xcc>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b02      	cmp	r3, #2
 800910e:	d129      	bne.n	8009164 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009116:	f000 f9ff 	bl	8009518 <prvCopyDataToQueue>
 800911a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	d010      	beq.n	8009146 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	3324      	adds	r3, #36	; 0x24
 8009128:	4618      	mov	r0, r3
 800912a:	f000 ffaf 	bl	800a08c <xTaskRemoveFromEventList>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d013      	beq.n	800915c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009134:	4b3f      	ldr	r3, [pc, #252]	; (8009234 <xQueueGenericSend+0x1f0>)
 8009136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	e00a      	b.n	800915c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	2b00      	cmp	r3, #0
 800914a:	d007      	beq.n	800915c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800914c:	4b39      	ldr	r3, [pc, #228]	; (8009234 <xQueueGenericSend+0x1f0>)
 800914e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800915c:	f001 fe8c 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 8009160:	2301      	movs	r3, #1
 8009162:	e063      	b.n	800922c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d103      	bne.n	8009172 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800916a:	f001 fe85 	bl	800ae78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800916e:	2300      	movs	r3, #0
 8009170:	e05c      	b.n	800922c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009178:	f107 0314 	add.w	r3, r7, #20
 800917c:	4618      	mov	r0, r3
 800917e:	f000 ffe7 	bl	800a150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009182:	2301      	movs	r3, #1
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009186:	f001 fe77 	bl	800ae78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800918a:	f000 fd5d 	bl	8009c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800918e:	f001 fe45 	bl	800ae1c <vPortEnterCritical>
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009198:	b25b      	sxtb	r3, r3
 800919a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919e:	d103      	bne.n	80091a8 <xQueueGenericSend+0x164>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ae:	b25b      	sxtb	r3, r3
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d103      	bne.n	80091be <xQueueGenericSend+0x17a>
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091be:	f001 fe5b 	bl	800ae78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091c2:	1d3a      	adds	r2, r7, #4
 80091c4:	f107 0314 	add.w	r3, r7, #20
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 ffd6 	bl	800a17c <xTaskCheckForTimeOut>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d124      	bne.n	8009220 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091d8:	f000 fa96 	bl	8009708 <prvIsQueueFull>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d018      	beq.n	8009214 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	3310      	adds	r3, #16
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	4611      	mov	r1, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 ff00 	bl	8009ff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091f2:	f000 fa21 	bl	8009638 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091f6:	f000 fd35 	bl	8009c64 <xTaskResumeAll>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f47f af7c 	bne.w	80090fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <xQueueGenericSend+0x1f0>)
 8009204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	e772      	b.n	80090fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009216:	f000 fa0f 	bl	8009638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800921a:	f000 fd23 	bl	8009c64 <xTaskResumeAll>
 800921e:	e76c      	b.n	80090fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009222:	f000 fa09 	bl	8009638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009226:	f000 fd1d 	bl	8009c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800922a:	2300      	movs	r3, #0
		}
	}
}
 800922c:	4618      	mov	r0, r3
 800922e:	3738      	adds	r7, #56	; 0x38
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	e000ed04 	.word	0xe000ed04

08009238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	; 0x38
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <xQueueGenericSendFromISR+0x2c>
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
 8009262:	e7fe      	b.n	8009262 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <xQueueGenericSendFromISR+0x3a>
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <xQueueGenericSendFromISR+0x3e>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <xQueueGenericSendFromISR+0x40>
 8009276:	2300      	movs	r3, #0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d109      	bne.n	8009290 <xQueueGenericSendFromISR+0x58>
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	623b      	str	r3, [r7, #32]
 800928e:	e7fe      	b.n	800928e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d103      	bne.n	800929e <xQueueGenericSendFromISR+0x66>
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <xQueueGenericSendFromISR+0x6a>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <xQueueGenericSendFromISR+0x6c>
 80092a2:	2300      	movs	r3, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <xQueueGenericSendFromISR+0x84>
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	e7fe      	b.n	80092ba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092bc:	f001 fe8a 	bl	800afd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092c0:	f3ef 8211 	mrs	r2, BASEPRI
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	61ba      	str	r2, [r7, #24]
 80092d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <xQueueGenericSendFromISR+0xb6>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d12c      	bne.n	8009348 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092fe:	f000 f90b 	bl	8009518 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009302:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930a:	d112      	bne.n	8009332 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	d016      	beq.n	8009342 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	3324      	adds	r3, #36	; 0x24
 8009318:	4618      	mov	r0, r3
 800931a:	f000 feb7 	bl	800a08c <xTaskRemoveFromEventList>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00e      	beq.n	8009342 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00b      	beq.n	8009342 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	e007      	b.n	8009342 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009336:	3301      	adds	r3, #1
 8009338:	b2db      	uxtb	r3, r3
 800933a:	b25a      	sxtb	r2, r3
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009342:	2301      	movs	r3, #1
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009346:	e001      	b.n	800934c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009348:	2300      	movs	r3, #0
 800934a:	637b      	str	r3, [r7, #52]	; 0x34
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009358:	4618      	mov	r0, r3
 800935a:	3738      	adds	r7, #56	; 0x38
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08c      	sub	sp, #48	; 0x30
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800936c:	2300      	movs	r3, #0
 800936e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d109      	bne.n	800938e <xQueueReceive+0x2e>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	623b      	str	r3, [r7, #32]
 800938c:	e7fe      	b.n	800938c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d103      	bne.n	800939c <xQueueReceive+0x3c>
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <xQueueReceive+0x40>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <xQueueReceive+0x42>
 80093a0:	2300      	movs	r3, #0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <xQueueReceive+0x5a>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	e7fe      	b.n	80093b8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093ba:	f001 f823 	bl	800a404 <xTaskGetSchedulerState>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <xQueueReceive+0x6a>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <xQueueReceive+0x6e>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <xQueueReceive+0x70>
 80093ce:	2300      	movs	r3, #0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <xQueueReceive+0x88>
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	61bb      	str	r3, [r7, #24]
 80093e6:	e7fe      	b.n	80093e6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80093e8:	f001 fd18 	bl	800ae1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01f      	beq.n	8009438 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093fc:	f000 f8f6 	bl	80095ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	1e5a      	subs	r2, r3, #1
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00f      	beq.n	8009430 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	3310      	adds	r3, #16
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fe39 	bl	800a08c <xTaskRemoveFromEventList>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d007      	beq.n	8009430 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009420:	4b3c      	ldr	r3, [pc, #240]	; (8009514 <xQueueReceive+0x1b4>)
 8009422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009430:	f001 fd22 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 8009434:	2301      	movs	r3, #1
 8009436:	e069      	b.n	800950c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d103      	bne.n	8009446 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800943e:	f001 fd1b 	bl	800ae78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009442:	2300      	movs	r3, #0
 8009444:	e062      	b.n	800950c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d106      	bne.n	800945a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800944c:	f107 0310 	add.w	r3, r7, #16
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fe7d 	bl	800a150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009456:	2301      	movs	r3, #1
 8009458:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800945a:	f001 fd0d 	bl	800ae78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800945e:	f000 fbf3 	bl	8009c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009462:	f001 fcdb 	bl	800ae1c <vPortEnterCritical>
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800946c:	b25b      	sxtb	r3, r3
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	d103      	bne.n	800947c <xQueueReceive+0x11c>
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009482:	b25b      	sxtb	r3, r3
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d103      	bne.n	8009492 <xQueueReceive+0x132>
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009492:	f001 fcf1 	bl	800ae78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009496:	1d3a      	adds	r2, r7, #4
 8009498:	f107 0310 	add.w	r3, r7, #16
 800949c:	4611      	mov	r1, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fe6c 	bl	800a17c <xTaskCheckForTimeOut>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d123      	bne.n	80094f2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ac:	f000 f916 	bl	80096dc <prvIsQueueEmpty>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d017      	beq.n	80094e6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	3324      	adds	r3, #36	; 0x24
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fd96 	bl	8009ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c6:	f000 f8b7 	bl	8009638 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094ca:	f000 fbcb 	bl	8009c64 <xTaskResumeAll>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d189      	bne.n	80093e8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80094d4:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <xQueueReceive+0x1b4>)
 80094d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	e780      	b.n	80093e8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094e8:	f000 f8a6 	bl	8009638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094ec:	f000 fbba 	bl	8009c64 <xTaskResumeAll>
 80094f0:	e77a      	b.n	80093e8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f4:	f000 f8a0 	bl	8009638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094f8:	f000 fbb4 	bl	8009c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094fe:	f000 f8ed 	bl	80096dc <prvIsQueueEmpty>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f43f af6f 	beq.w	80093e8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800950a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800950c:	4618      	mov	r0, r3
 800950e:	3730      	adds	r7, #48	; 0x30
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	e000ed04 	.word	0xe000ed04

08009518 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009524:	2300      	movs	r3, #0
 8009526:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10d      	bne.n	8009552 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d14d      	bne.n	80095da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 ff7c 	bl	800a440 <xTaskPriorityDisinherit>
 8009548:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	605a      	str	r2, [r3, #4]
 8009550:	e043      	b.n	80095da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d119      	bne.n	800958c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6898      	ldr	r0, [r3, #8]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009560:	461a      	mov	r2, r3
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	f002 fc7a 	bl	800be5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	441a      	add	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	429a      	cmp	r2, r3
 8009580:	d32b      	bcc.n	80095da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	609a      	str	r2, [r3, #8]
 800958a:	e026      	b.n	80095da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68d8      	ldr	r0, [r3, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	461a      	mov	r2, r3
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	f002 fc60 	bl	800be5c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a4:	425b      	negs	r3, r3
 80095a6:	441a      	add	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d207      	bcs.n	80095c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c0:	425b      	negs	r3, r3
 80095c2:	441a      	add	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d105      	bne.n	80095da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095e2:	697b      	ldr	r3, [r7, #20]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d018      	beq.n	8009630 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	441a      	add	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	429a      	cmp	r2, r3
 8009616:	d303      	bcc.n	8009620 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68d9      	ldr	r1, [r3, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	461a      	mov	r2, r3
 800962a:	6838      	ldr	r0, [r7, #0]
 800962c:	f002 fc16 	bl	800be5c <memcpy>
	}
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009640:	f001 fbec 	bl	800ae1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800964a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800964c:	e011      	b.n	8009672 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	2b00      	cmp	r3, #0
 8009654:	d012      	beq.n	800967c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3324      	adds	r3, #36	; 0x24
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fd16 	bl	800a08c <xTaskRemoveFromEventList>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009666:	f000 fde9 	bl	800a23c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	3b01      	subs	r3, #1
 800966e:	b2db      	uxtb	r3, r3
 8009670:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009676:	2b00      	cmp	r3, #0
 8009678:	dce9      	bgt.n	800964e <prvUnlockQueue+0x16>
 800967a:	e000      	b.n	800967e <prvUnlockQueue+0x46>
					break;
 800967c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	22ff      	movs	r2, #255	; 0xff
 8009682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009686:	f001 fbf7 	bl	800ae78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800968a:	f001 fbc7 	bl	800ae1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009694:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009696:	e011      	b.n	80096bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d012      	beq.n	80096c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	3310      	adds	r3, #16
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fcf1 	bl	800a08c <xTaskRemoveFromEventList>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80096b0:	f000 fdc4 	bl	800a23c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dce9      	bgt.n	8009698 <prvUnlockQueue+0x60>
 80096c4:	e000      	b.n	80096c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	22ff      	movs	r2, #255	; 0xff
 80096cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096d0:	f001 fbd2 	bl	800ae78 <vPortExitCritical>
}
 80096d4:	bf00      	nop
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096e4:	f001 fb9a 	bl	800ae1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096f0:	2301      	movs	r3, #1
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	e001      	b.n	80096fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096fa:	f001 fbbd 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 80096fe:	68fb      	ldr	r3, [r7, #12]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009710:	f001 fb84 	bl	800ae1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971c:	429a      	cmp	r2, r3
 800971e:	d102      	bne.n	8009726 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	e001      	b.n	800972a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800972a:	f001 fba5 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 800972e:	68fb      	ldr	r3, [r7, #12]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	e014      	b.n	8009772 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009748:	4a0e      	ldr	r2, [pc, #56]	; (8009784 <vQueueAddToRegistry+0x4c>)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10b      	bne.n	800976c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009754:	490b      	ldr	r1, [pc, #44]	; (8009784 <vQueueAddToRegistry+0x4c>)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800975e:	4a09      	ldr	r2, [pc, #36]	; (8009784 <vQueueAddToRegistry+0x4c>)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	4413      	add	r3, r2
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800976a:	e005      	b.n	8009778 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3301      	adds	r3, #1
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b07      	cmp	r3, #7
 8009776:	d9e7      	bls.n	8009748 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009778:	bf00      	nop
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	20005ea0 	.word	0x20005ea0

08009788 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009798:	f001 fb40 	bl	800ae1c <vPortEnterCritical>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097a2:	b25b      	sxtb	r3, r3
 80097a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a8:	d103      	bne.n	80097b2 <vQueueWaitForMessageRestricted+0x2a>
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097b8:	b25b      	sxtb	r3, r3
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d103      	bne.n	80097c8 <vQueueWaitForMessageRestricted+0x40>
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097c8:	f001 fb56 	bl	800ae78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	3324      	adds	r3, #36	; 0x24
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	68b9      	ldr	r1, [r7, #8]
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fc2b 	bl	800a038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097e2:	6978      	ldr	r0, [r7, #20]
 80097e4:	f7ff ff28 	bl	8009638 <prvUnlockQueue>
	}
 80097e8:	bf00      	nop
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08e      	sub	sp, #56	; 0x38
 80097f4:	af04      	add	r7, sp, #16
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <xTaskCreateStatic+0x28>
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	623b      	str	r3, [r7, #32]
 8009816:	e7fe      	b.n	8009816 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	2b00      	cmp	r3, #0
 800981c:	d109      	bne.n	8009832 <xTaskCreateStatic+0x42>
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	61fb      	str	r3, [r7, #28]
 8009830:	e7fe      	b.n	8009830 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009832:	235c      	movs	r3, #92	; 0x5c
 8009834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2b5c      	cmp	r3, #92	; 0x5c
 800983a:	d009      	beq.n	8009850 <xTaskCreateStatic+0x60>
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	e7fe      	b.n	800984e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	2b00      	cmp	r3, #0
 8009854:	d01e      	beq.n	8009894 <xTaskCreateStatic+0xa4>
 8009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01b      	beq.n	8009894 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009864:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	2202      	movs	r2, #2
 800986a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800986e:	2300      	movs	r3, #0
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	9302      	str	r3, [sp, #8]
 8009876:	f107 0314 	add.w	r3, r7, #20
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f850 	bl	800992c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800988c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800988e:	f000 f8d3 	bl	8009a38 <prvAddNewTaskToReadyList>
 8009892:	e001      	b.n	8009898 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009898:	697b      	ldr	r3, [r7, #20]
	}
 800989a:	4618      	mov	r0, r3
 800989c:	3728      	adds	r7, #40	; 0x28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b08c      	sub	sp, #48	; 0x30
 80098a6:	af04      	add	r7, sp, #16
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	603b      	str	r3, [r7, #0]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 fbca 	bl	800b050 <pvPortMalloc>
 80098bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00e      	beq.n	80098e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80098c4:	205c      	movs	r0, #92	; 0x5c
 80098c6:	f001 fbc3 	bl	800b050 <pvPortMalloc>
 80098ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	631a      	str	r2, [r3, #48]	; 0x30
 80098d8:	e005      	b.n	80098e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098da:	6978      	ldr	r0, [r7, #20]
 80098dc:	f001 fc7a 	bl	800b1d4 <vPortFree>
 80098e0:	e001      	b.n	80098e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098f4:	88fa      	ldrh	r2, [r7, #6]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f80e 	bl	800992c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009910:	69f8      	ldr	r0, [r7, #28]
 8009912:	f000 f891 	bl	8009a38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009916:	2301      	movs	r3, #1
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e002      	b.n	8009922 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800991c:	f04f 33ff 	mov.w	r3, #4294967295
 8009920:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009922:	69bb      	ldr	r3, [r7, #24]
	}
 8009924:	4618      	mov	r0, r3
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	461a      	mov	r2, r3
 8009944:	21a5      	movs	r1, #165	; 0xa5
 8009946:	f002 fa94 	bl	800be72 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009954:	3b01      	subs	r3, #1
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	f023 0307 	bic.w	r3, r3, #7
 8009962:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <prvInitialiseNewTask+0x56>
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	e7fe      	b.n	8009980 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009982:	2300      	movs	r3, #0
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	e012      	b.n	80099ae <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	7819      	ldrb	r1, [r3, #0]
 8009990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	3334      	adds	r3, #52	; 0x34
 8009998:	460a      	mov	r2, r1
 800999a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d006      	beq.n	80099b6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	3301      	adds	r3, #1
 80099ac:	61fb      	str	r3, [r7, #28]
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	2b0f      	cmp	r3, #15
 80099b2:	d9e9      	bls.n	8009988 <prvInitialiseNewTask+0x5c>
 80099b4:	e000      	b.n	80099b8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80099b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	2b37      	cmp	r3, #55	; 0x37
 80099c4:	d901      	bls.n	80099ca <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099c6:	2337      	movs	r3, #55	; 0x37
 80099c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	2200      	movs	r2, #0
 80099da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	3304      	adds	r3, #4
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff f99d 	bl	8008d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	3318      	adds	r3, #24
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff f998 	bl	8008d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	2200      	movs	r2, #0
 8009a0a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	69b8      	ldr	r0, [r7, #24]
 8009a1a:	f001 f8db 	bl	800abd4 <pxPortInitialiseStack>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a30:	bf00      	nop
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a40:	f001 f9ec 	bl	800ae1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a44:	4b2d      	ldr	r3, [pc, #180]	; (8009afc <prvAddNewTaskToReadyList+0xc4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	4a2c      	ldr	r2, [pc, #176]	; (8009afc <prvAddNewTaskToReadyList+0xc4>)
 8009a4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a4e:	4b2c      	ldr	r3, [pc, #176]	; (8009b00 <prvAddNewTaskToReadyList+0xc8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a56:	4a2a      	ldr	r2, [pc, #168]	; (8009b00 <prvAddNewTaskToReadyList+0xc8>)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a5c:	4b27      	ldr	r3, [pc, #156]	; (8009afc <prvAddNewTaskToReadyList+0xc4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d110      	bne.n	8009a86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a64:	f000 fc0e 	bl	800a284 <prvInitialiseTaskLists>
 8009a68:	e00d      	b.n	8009a86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a6a:	4b26      	ldr	r3, [pc, #152]	; (8009b04 <prvAddNewTaskToReadyList+0xcc>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d109      	bne.n	8009a86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a72:	4b23      	ldr	r3, [pc, #140]	; (8009b00 <prvAddNewTaskToReadyList+0xc8>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d802      	bhi.n	8009a86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a80:	4a1f      	ldr	r2, [pc, #124]	; (8009b00 <prvAddNewTaskToReadyList+0xc8>)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a86:	4b20      	ldr	r3, [pc, #128]	; (8009b08 <prvAddNewTaskToReadyList+0xd0>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	4a1e      	ldr	r2, [pc, #120]	; (8009b08 <prvAddNewTaskToReadyList+0xd0>)
 8009a8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a90:	4b1d      	ldr	r3, [pc, #116]	; (8009b08 <prvAddNewTaskToReadyList+0xd0>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9c:	4b1b      	ldr	r3, [pc, #108]	; (8009b0c <prvAddNewTaskToReadyList+0xd4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d903      	bls.n	8009aac <prvAddNewTaskToReadyList+0x74>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	4a18      	ldr	r2, [pc, #96]	; (8009b0c <prvAddNewTaskToReadyList+0xd4>)
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4a15      	ldr	r2, [pc, #84]	; (8009b10 <prvAddNewTaskToReadyList+0xd8>)
 8009aba:	441a      	add	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7ff f939 	bl	8008d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ac8:	f001 f9d6 	bl	800ae78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009acc:	4b0d      	ldr	r3, [pc, #52]	; (8009b04 <prvAddNewTaskToReadyList+0xcc>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00e      	beq.n	8009af2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <prvAddNewTaskToReadyList+0xc8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d207      	bcs.n	8009af2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <prvAddNewTaskToReadyList+0xdc>)
 8009ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20001f94 	.word	0x20001f94
 8009b00:	20001ac0 	.word	0x20001ac0
 8009b04:	20001fa0 	.word	0x20001fa0
 8009b08:	20001fb0 	.word	0x20001fb0
 8009b0c:	20001f9c 	.word	0x20001f9c
 8009b10:	20001ac4 	.word	0x20001ac4
 8009b14:	e000ed04 	.word	0xe000ed04

08009b18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d016      	beq.n	8009b58 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b2a:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <vTaskDelay+0x60>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d009      	beq.n	8009b46 <vTaskDelay+0x2e>
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	60bb      	str	r3, [r7, #8]
 8009b44:	e7fe      	b.n	8009b44 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009b46:	f000 f87f 	bl	8009c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fce3 	bl	800a518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b52:	f000 f887 	bl	8009c64 <xTaskResumeAll>
 8009b56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d107      	bne.n	8009b6e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <vTaskDelay+0x64>)
 8009b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20001fbc 	.word	0x20001fbc
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08a      	sub	sp, #40	; 0x28
 8009b84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b8e:	463a      	mov	r2, r7
 8009b90:	1d39      	adds	r1, r7, #4
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff f86e 	bl	8008c78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	9202      	str	r2, [sp, #8]
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	2300      	movs	r3, #0
 8009bac:	460a      	mov	r2, r1
 8009bae:	4920      	ldr	r1, [pc, #128]	; (8009c30 <vTaskStartScheduler+0xb0>)
 8009bb0:	4820      	ldr	r0, [pc, #128]	; (8009c34 <vTaskStartScheduler+0xb4>)
 8009bb2:	f7ff fe1d 	bl	80097f0 <xTaskCreateStatic>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	; (8009c38 <vTaskStartScheduler+0xb8>)
 8009bba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bbc:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <vTaskStartScheduler+0xb8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	e001      	b.n	8009bce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d102      	bne.n	8009bda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bd4:	f000 fcf4 	bl	800a5c0 <xTimerCreateTimerTask>
 8009bd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d115      	bne.n	8009c0c <vTaskStartScheduler+0x8c>
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bf2:	4b12      	ldr	r3, [pc, #72]	; (8009c3c <vTaskStartScheduler+0xbc>)
 8009bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <vTaskStartScheduler+0xc0>)
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009c00:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <vTaskStartScheduler+0xc4>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c06:	f001 f86b 	bl	800ace0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c0a:	e00d      	b.n	8009c28 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d109      	bne.n	8009c28 <vTaskStartScheduler+0xa8>
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	e7fe      	b.n	8009c26 <vTaskStartScheduler+0xa6>
}
 8009c28:	bf00      	nop
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	0800c03c 	.word	0x0800c03c
 8009c34:	0800a255 	.word	0x0800a255
 8009c38:	20001fb8 	.word	0x20001fb8
 8009c3c:	20001fb4 	.word	0x20001fb4
 8009c40:	20001fa0 	.word	0x20001fa0
 8009c44:	20001f98 	.word	0x20001f98

08009c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c4c:	4b04      	ldr	r3, [pc, #16]	; (8009c60 <vTaskSuspendAll+0x18>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3301      	adds	r3, #1
 8009c52:	4a03      	ldr	r2, [pc, #12]	; (8009c60 <vTaskSuspendAll+0x18>)
 8009c54:	6013      	str	r3, [r2, #0]
}
 8009c56:	bf00      	nop
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	20001fbc 	.word	0x20001fbc

08009c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c72:	4b41      	ldr	r3, [pc, #260]	; (8009d78 <xTaskResumeAll+0x114>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d109      	bne.n	8009c8e <xTaskResumeAll+0x2a>
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	e7fe      	b.n	8009c8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c8e:	f001 f8c5 	bl	800ae1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c92:	4b39      	ldr	r3, [pc, #228]	; (8009d78 <xTaskResumeAll+0x114>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4a37      	ldr	r2, [pc, #220]	; (8009d78 <xTaskResumeAll+0x114>)
 8009c9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c9c:	4b36      	ldr	r3, [pc, #216]	; (8009d78 <xTaskResumeAll+0x114>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d162      	bne.n	8009d6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ca4:	4b35      	ldr	r3, [pc, #212]	; (8009d7c <xTaskResumeAll+0x118>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d05e      	beq.n	8009d6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cac:	e02f      	b.n	8009d0e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009cae:	4b34      	ldr	r3, [pc, #208]	; (8009d80 <xTaskResumeAll+0x11c>)
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3318      	adds	r3, #24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff f89a 	bl	8008df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff f895 	bl	8008df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cce:	4b2d      	ldr	r3, [pc, #180]	; (8009d84 <xTaskResumeAll+0x120>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d903      	bls.n	8009cde <xTaskResumeAll+0x7a>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cda:	4a2a      	ldr	r2, [pc, #168]	; (8009d84 <xTaskResumeAll+0x120>)
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4a27      	ldr	r2, [pc, #156]	; (8009d88 <xTaskResumeAll+0x124>)
 8009cec:	441a      	add	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7ff f820 	bl	8008d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfe:	4b23      	ldr	r3, [pc, #140]	; (8009d8c <xTaskResumeAll+0x128>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009d08:	4b21      	ldr	r3, [pc, #132]	; (8009d90 <xTaskResumeAll+0x12c>)
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d0e:	4b1c      	ldr	r3, [pc, #112]	; (8009d80 <xTaskResumeAll+0x11c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1cb      	bne.n	8009cae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d1c:	f000 fb4c 	bl	800a3b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d20:	4b1c      	ldr	r3, [pc, #112]	; (8009d94 <xTaskResumeAll+0x130>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d010      	beq.n	8009d4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d2c:	f000 f846 	bl	8009dbc <xTaskIncrementTick>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d002      	beq.n	8009d3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d36:	4b16      	ldr	r3, [pc, #88]	; (8009d90 <xTaskResumeAll+0x12c>)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1f1      	bne.n	8009d2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009d48:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <xTaskResumeAll+0x130>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d4e:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <xTaskResumeAll+0x12c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d56:	2301      	movs	r3, #1
 8009d58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <xTaskResumeAll+0x134>)
 8009d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d6a:	f001 f885 	bl	800ae78 <vPortExitCritical>

	return xAlreadyYielded;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20001fbc 	.word	0x20001fbc
 8009d7c:	20001f94 	.word	0x20001f94
 8009d80:	20001f54 	.word	0x20001f54
 8009d84:	20001f9c 	.word	0x20001f9c
 8009d88:	20001ac4 	.word	0x20001ac4
 8009d8c:	20001ac0 	.word	0x20001ac0
 8009d90:	20001fa8 	.word	0x20001fa8
 8009d94:	20001fa4 	.word	0x20001fa4
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <xTaskGetTickCount+0x1c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009da8:	687b      	ldr	r3, [r7, #4]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20001f98 	.word	0x20001f98

08009dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc6:	4b51      	ldr	r3, [pc, #324]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 808d 	bne.w	8009eea <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dd0:	4b4f      	ldr	r3, [pc, #316]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dd8:	4a4d      	ldr	r2, [pc, #308]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d11f      	bne.n	8009e24 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009de4:	4b4b      	ldr	r3, [pc, #300]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <xTaskIncrementTick+0x46>
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	603b      	str	r3, [r7, #0]
 8009e00:	e7fe      	b.n	8009e00 <xTaskIncrementTick+0x44>
 8009e02:	4b44      	ldr	r3, [pc, #272]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	4b43      	ldr	r3, [pc, #268]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a41      	ldr	r2, [pc, #260]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	4a41      	ldr	r2, [pc, #260]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	4b41      	ldr	r3, [pc, #260]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	4a3f      	ldr	r2, [pc, #252]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	f000 faca 	bl	800a3b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e24:	4b3e      	ldr	r3, [pc, #248]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d34e      	bcc.n	8009ecc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e2e:	4b39      	ldr	r3, [pc, #228]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <xTaskIncrementTick+0x80>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e000      	b.n	8009e3e <xTaskIncrementTick+0x82>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d004      	beq.n	8009e4c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e42:	4b37      	ldr	r3, [pc, #220]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	601a      	str	r2, [r3, #0]
					break;
 8009e4a:	e03f      	b.n	8009ecc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e4c:	4b31      	ldr	r3, [pc, #196]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d203      	bcs.n	8009e6c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e64:	4a2e      	ldr	r2, [pc, #184]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6013      	str	r3, [r2, #0]
						break;
 8009e6a:	e02f      	b.n	8009ecc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe ffbf 	bl	8008df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	3318      	adds	r3, #24
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe ffb6 	bl	8008df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8c:	4b25      	ldr	r3, [pc, #148]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d903      	bls.n	8009e9c <xTaskIncrementTick+0xe0>
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e98:	4a22      	ldr	r2, [pc, #136]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4a1f      	ldr	r2, [pc, #124]	; (8009f28 <xTaskIncrementTick+0x16c>)
 8009eaa:	441a      	add	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f7fe ff41 	bl	8008d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebc:	4b1b      	ldr	r3, [pc, #108]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d3b3      	bcc.n	8009e2e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eca:	e7b0      	b.n	8009e2e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ecc:	4b17      	ldr	r3, [pc, #92]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed2:	4915      	ldr	r1, [pc, #84]	; (8009f28 <xTaskIncrementTick+0x16c>)
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d907      	bls.n	8009ef4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
 8009ee8:	e004      	b.n	8009ef4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009eea:	4b11      	ldr	r3, [pc, #68]	; (8009f30 <xTaskIncrementTick+0x174>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	4a0f      	ldr	r2, [pc, #60]	; (8009f30 <xTaskIncrementTick+0x174>)
 8009ef2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ef4:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <xTaskIncrementTick+0x178>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009efc:	2301      	movs	r3, #1
 8009efe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f00:	697b      	ldr	r3, [r7, #20]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20001fbc 	.word	0x20001fbc
 8009f10:	20001f98 	.word	0x20001f98
 8009f14:	20001f4c 	.word	0x20001f4c
 8009f18:	20001f50 	.word	0x20001f50
 8009f1c:	20001fac 	.word	0x20001fac
 8009f20:	20001fb4 	.word	0x20001fb4
 8009f24:	20001f9c 	.word	0x20001f9c
 8009f28:	20001ac4 	.word	0x20001ac4
 8009f2c:	20001ac0 	.word	0x20001ac0
 8009f30:	20001fa4 	.word	0x20001fa4
 8009f34:	20001fa8 	.word	0x20001fa8

08009f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f3e:	4b27      	ldr	r3, [pc, #156]	; (8009fdc <vTaskSwitchContext+0xa4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f46:	4b26      	ldr	r3, [pc, #152]	; (8009fe0 <vTaskSwitchContext+0xa8>)
 8009f48:	2201      	movs	r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f4c:	e040      	b.n	8009fd0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009f4e:	4b24      	ldr	r3, [pc, #144]	; (8009fe0 <vTaskSwitchContext+0xa8>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f54:	4b23      	ldr	r3, [pc, #140]	; (8009fe4 <vTaskSwitchContext+0xac>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	e00f      	b.n	8009f7c <vTaskSwitchContext+0x44>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <vTaskSwitchContext+0x3e>
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	e7fe      	b.n	8009f74 <vTaskSwitchContext+0x3c>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	491a      	ldr	r1, [pc, #104]	; (8009fe8 <vTaskSwitchContext+0xb0>)
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0e5      	beq.n	8009f5c <vTaskSwitchContext+0x24>
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a13      	ldr	r2, [pc, #76]	; (8009fe8 <vTaskSwitchContext+0xb0>)
 8009f9c:	4413      	add	r3, r2
 8009f9e:	60bb      	str	r3, [r7, #8]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	605a      	str	r2, [r3, #4]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d104      	bne.n	8009fc0 <vTaskSwitchContext+0x88>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	4a09      	ldr	r2, [pc, #36]	; (8009fec <vTaskSwitchContext+0xb4>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4a06      	ldr	r2, [pc, #24]	; (8009fe4 <vTaskSwitchContext+0xac>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6013      	str	r3, [r2, #0]
}
 8009fd0:	bf00      	nop
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	20001fbc 	.word	0x20001fbc
 8009fe0:	20001fa8 	.word	0x20001fa8
 8009fe4:	20001f9c 	.word	0x20001f9c
 8009fe8:	20001ac4 	.word	0x20001ac4
 8009fec:	20001ac0 	.word	0x20001ac0

08009ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d109      	bne.n	800a014 <vTaskPlaceOnEventList+0x24>
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	e7fe      	b.n	800a012 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a014:	4b07      	ldr	r3, [pc, #28]	; (800a034 <vTaskPlaceOnEventList+0x44>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3318      	adds	r3, #24
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7fe feb0 	bl	8008d82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a022:	2101      	movs	r1, #1
 800a024:	6838      	ldr	r0, [r7, #0]
 800a026:	f000 fa77 	bl	800a518 <prvAddCurrentTaskToDelayedList>
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20001ac0 	.word	0x20001ac0

0800a038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d109      	bne.n	800a05e <vTaskPlaceOnEventListRestricted+0x26>
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e7fe      	b.n	800a05c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a05e:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <vTaskPlaceOnEventListRestricted+0x50>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3318      	adds	r3, #24
 800a064:	4619      	mov	r1, r3
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7fe fe67 	bl	8008d3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a072:	f04f 33ff 	mov.w	r3, #4294967295
 800a076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	68b8      	ldr	r0, [r7, #8]
 800a07c:	f000 fa4c 	bl	800a518 <prvAddCurrentTaskToDelayedList>
	}
 800a080:	bf00      	nop
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20001ac0 	.word	0x20001ac0

0800a08c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d109      	bne.n	800a0b6 <xTaskRemoveFromEventList+0x2a>
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e7fe      	b.n	800a0b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	3318      	adds	r3, #24
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fe9a 	bl	8008df4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0c0:	4b1d      	ldr	r3, [pc, #116]	; (800a138 <xTaskRemoveFromEventList+0xac>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d11d      	bne.n	800a104 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe fe91 	bl	8008df4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d6:	4b19      	ldr	r3, [pc, #100]	; (800a13c <xTaskRemoveFromEventList+0xb0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d903      	bls.n	800a0e6 <xTaskRemoveFromEventList+0x5a>
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	4a16      	ldr	r2, [pc, #88]	; (800a13c <xTaskRemoveFromEventList+0xb0>)
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4a13      	ldr	r2, [pc, #76]	; (800a140 <xTaskRemoveFromEventList+0xb4>)
 800a0f4:	441a      	add	r2, r3
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	f7fe fe1c 	bl	8008d3a <vListInsertEnd>
 800a102:	e005      	b.n	800a110 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	3318      	adds	r3, #24
 800a108:	4619      	mov	r1, r3
 800a10a:	480e      	ldr	r0, [pc, #56]	; (800a144 <xTaskRemoveFromEventList+0xb8>)
 800a10c:	f7fe fe15 	bl	8008d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <xTaskRemoveFromEventList+0xbc>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d905      	bls.n	800a12a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a11e:	2301      	movs	r3, #1
 800a120:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a122:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <xTaskRemoveFromEventList+0xc0>)
 800a124:	2201      	movs	r2, #1
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	e001      	b.n	800a12e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a12e:	697b      	ldr	r3, [r7, #20]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20001fbc 	.word	0x20001fbc
 800a13c:	20001f9c 	.word	0x20001f9c
 800a140:	20001ac4 	.word	0x20001ac4
 800a144:	20001f54 	.word	0x20001f54
 800a148:	20001ac0 	.word	0x20001ac0
 800a14c:	20001fa8 	.word	0x20001fa8

0800a150 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <vTaskInternalSetTimeOutState+0x24>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a160:	4b05      	ldr	r3, [pc, #20]	; (800a178 <vTaskInternalSetTimeOutState+0x28>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	605a      	str	r2, [r3, #4]
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	20001fac 	.word	0x20001fac
 800a178:	20001f98 	.word	0x20001f98

0800a17c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d109      	bne.n	800a1a0 <xTaskCheckForTimeOut+0x24>
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	613b      	str	r3, [r7, #16]
 800a19e:	e7fe      	b.n	800a19e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d109      	bne.n	800a1ba <xTaskCheckForTimeOut+0x3e>
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e7fe      	b.n	800a1b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a1ba:	f000 fe2f 	bl	800ae1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1be:	4b1d      	ldr	r3, [pc, #116]	; (800a234 <xTaskCheckForTimeOut+0xb8>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d6:	d102      	bne.n	800a1de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	61fb      	str	r3, [r7, #28]
 800a1dc:	e023      	b.n	800a226 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <xTaskCheckForTimeOut+0xbc>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d007      	beq.n	800a1fa <xTaskCheckForTimeOut+0x7e>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	69ba      	ldr	r2, [r7, #24]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d302      	bcc.n	800a1fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	61fb      	str	r3, [r7, #28]
 800a1f8:	e015      	b.n	800a226 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	429a      	cmp	r2, r3
 800a202:	d20b      	bcs.n	800a21c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	1ad2      	subs	r2, r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff ff9d 	bl	800a150 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a216:	2300      	movs	r3, #0
 800a218:	61fb      	str	r3, [r7, #28]
 800a21a:	e004      	b.n	800a226 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a222:	2301      	movs	r3, #1
 800a224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a226:	f000 fe27 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 800a22a:	69fb      	ldr	r3, [r7, #28]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3720      	adds	r7, #32
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	20001f98 	.word	0x20001f98
 800a238:	20001fac 	.word	0x20001fac

0800a23c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a240:	4b03      	ldr	r3, [pc, #12]	; (800a250 <vTaskMissedYield+0x14>)
 800a242:	2201      	movs	r2, #1
 800a244:	601a      	str	r2, [r3, #0]
}
 800a246:	bf00      	nop
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	20001fa8 	.word	0x20001fa8

0800a254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a25c:	f000 f852 	bl	800a304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a260:	4b06      	ldr	r3, [pc, #24]	; (800a27c <prvIdleTask+0x28>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d9f9      	bls.n	800a25c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a268:	4b05      	ldr	r3, [pc, #20]	; (800a280 <prvIdleTask+0x2c>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a278:	e7f0      	b.n	800a25c <prvIdleTask+0x8>
 800a27a:	bf00      	nop
 800a27c:	20001ac4 	.word	0x20001ac4
 800a280:	e000ed04 	.word	0xe000ed04

0800a284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a28a:	2300      	movs	r3, #0
 800a28c:	607b      	str	r3, [r7, #4]
 800a28e:	e00c      	b.n	800a2aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	4613      	mov	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4a12      	ldr	r2, [pc, #72]	; (800a2e4 <prvInitialiseTaskLists+0x60>)
 800a29c:	4413      	add	r3, r2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fd1e 	bl	8008ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	607b      	str	r3, [r7, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b37      	cmp	r3, #55	; 0x37
 800a2ae:	d9ef      	bls.n	800a290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2b0:	480d      	ldr	r0, [pc, #52]	; (800a2e8 <prvInitialiseTaskLists+0x64>)
 800a2b2:	f7fe fd15 	bl	8008ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2b6:	480d      	ldr	r0, [pc, #52]	; (800a2ec <prvInitialiseTaskLists+0x68>)
 800a2b8:	f7fe fd12 	bl	8008ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2bc:	480c      	ldr	r0, [pc, #48]	; (800a2f0 <prvInitialiseTaskLists+0x6c>)
 800a2be:	f7fe fd0f 	bl	8008ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2c2:	480c      	ldr	r0, [pc, #48]	; (800a2f4 <prvInitialiseTaskLists+0x70>)
 800a2c4:	f7fe fd0c 	bl	8008ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2c8:	480b      	ldr	r0, [pc, #44]	; (800a2f8 <prvInitialiseTaskLists+0x74>)
 800a2ca:	f7fe fd09 	bl	8008ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2ce:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <prvInitialiseTaskLists+0x78>)
 800a2d0:	4a05      	ldr	r2, [pc, #20]	; (800a2e8 <prvInitialiseTaskLists+0x64>)
 800a2d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <prvInitialiseTaskLists+0x7c>)
 800a2d6:	4a05      	ldr	r2, [pc, #20]	; (800a2ec <prvInitialiseTaskLists+0x68>)
 800a2d8:	601a      	str	r2, [r3, #0]
}
 800a2da:	bf00      	nop
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20001ac4 	.word	0x20001ac4
 800a2e8:	20001f24 	.word	0x20001f24
 800a2ec:	20001f38 	.word	0x20001f38
 800a2f0:	20001f54 	.word	0x20001f54
 800a2f4:	20001f68 	.word	0x20001f68
 800a2f8:	20001f80 	.word	0x20001f80
 800a2fc:	20001f4c 	.word	0x20001f4c
 800a300:	20001f50 	.word	0x20001f50

0800a304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a30a:	e019      	b.n	800a340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a30c:	f000 fd86 	bl	800ae1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a310:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <prvCheckTasksWaitingTermination+0x4c>)
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3304      	adds	r3, #4
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fd69 	bl	8008df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a322:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <prvCheckTasksWaitingTermination+0x50>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3b01      	subs	r3, #1
 800a328:	4a0a      	ldr	r2, [pc, #40]	; (800a354 <prvCheckTasksWaitingTermination+0x50>)
 800a32a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <prvCheckTasksWaitingTermination+0x54>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3b01      	subs	r3, #1
 800a332:	4a09      	ldr	r2, [pc, #36]	; (800a358 <prvCheckTasksWaitingTermination+0x54>)
 800a334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a336:	f000 fd9f 	bl	800ae78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f80e 	bl	800a35c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <prvCheckTasksWaitingTermination+0x54>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e1      	bne.n	800a30c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a348:	bf00      	nop
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20001f68 	.word	0x20001f68
 800a354:	20001f94 	.word	0x20001f94
 800a358:	20001f7c 	.word	0x20001f7c

0800a35c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d108      	bne.n	800a380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a372:	4618      	mov	r0, r3
 800a374:	f000 ff2e 	bl	800b1d4 <vPortFree>
				vPortFree( pxTCB );
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 ff2b 	bl	800b1d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a37e:	e017      	b.n	800a3b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a386:	2b01      	cmp	r3, #1
 800a388:	d103      	bne.n	800a392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 ff22 	bl	800b1d4 <vPortFree>
	}
 800a390:	e00e      	b.n	800a3b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d009      	beq.n	800a3b0 <prvDeleteTCB+0x54>
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	e7fe      	b.n	800a3ae <prvDeleteTCB+0x52>
	}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3be:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <prvResetNextTaskUnblockTime+0x44>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <prvResetNextTaskUnblockTime+0x14>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e000      	b.n	800a3ce <prvResetNextTaskUnblockTime+0x16>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d004      	beq.n	800a3dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <prvResetNextTaskUnblockTime+0x48>)
 800a3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3da:	e008      	b.n	800a3ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3dc:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <prvResetNextTaskUnblockTime+0x44>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	4a05      	ldr	r2, [pc, #20]	; (800a400 <prvResetNextTaskUnblockTime+0x48>)
 800a3ec:	6013      	str	r3, [r2, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20001f4c 	.word	0x20001f4c
 800a400:	20001fb4 	.word	0x20001fb4

0800a404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a40a:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <xTaskGetSchedulerState+0x34>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d102      	bne.n	800a418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a412:	2301      	movs	r3, #1
 800a414:	607b      	str	r3, [r7, #4]
 800a416:	e008      	b.n	800a42a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a418:	4b08      	ldr	r3, [pc, #32]	; (800a43c <xTaskGetSchedulerState+0x38>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a420:	2302      	movs	r3, #2
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	e001      	b.n	800a42a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a426:	2300      	movs	r3, #0
 800a428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a42a:	687b      	ldr	r3, [r7, #4]
	}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	20001fa0 	.word	0x20001fa0
 800a43c:	20001fbc 	.word	0x20001fbc

0800a440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d054      	beq.n	800a500 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a456:	4b2d      	ldr	r3, [pc, #180]	; (800a50c <xTaskPriorityDisinherit+0xcc>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d009      	beq.n	800a474 <xTaskPriorityDisinherit+0x34>
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e7fe      	b.n	800a472 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <xTaskPriorityDisinherit+0x50>
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	60bb      	str	r3, [r7, #8]
 800a48e:	e7fe      	b.n	800a48e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a494:	1e5a      	subs	r2, r3, #1
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d02c      	beq.n	800a500 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d128      	bne.n	800a500 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fc9e 	bl	8008df4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <xTaskPriorityDisinherit+0xd0>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d903      	bls.n	800a4e0 <xTaskPriorityDisinherit+0xa0>
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	4a0c      	ldr	r2, [pc, #48]	; (800a510 <xTaskPriorityDisinherit+0xd0>)
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4a09      	ldr	r2, [pc, #36]	; (800a514 <xTaskPriorityDisinherit+0xd4>)
 800a4ee:	441a      	add	r2, r3
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	f7fe fc1f 	bl	8008d3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a500:	697b      	ldr	r3, [r7, #20]
	}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20001ac0 	.word	0x20001ac0
 800a510:	20001f9c 	.word	0x20001f9c
 800a514:	20001ac4 	.word	0x20001ac4

0800a518 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a522:	4b21      	ldr	r3, [pc, #132]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a528:	4b20      	ldr	r3, [pc, #128]	; (800a5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3304      	adds	r3, #4
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fc60 	bl	8008df4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53a:	d10a      	bne.n	800a552 <prvAddCurrentTaskToDelayedList+0x3a>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d007      	beq.n	800a552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a542:	4b1a      	ldr	r3, [pc, #104]	; (800a5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3304      	adds	r3, #4
 800a548:	4619      	mov	r1, r3
 800a54a:	4819      	ldr	r0, [pc, #100]	; (800a5b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a54c:	f7fe fbf5 	bl	8008d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a550:	e026      	b.n	800a5a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4413      	add	r3, r2
 800a558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a55a:	4b14      	ldr	r3, [pc, #80]	; (800a5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	429a      	cmp	r2, r3
 800a568:	d209      	bcs.n	800a57e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a56a:	4b12      	ldr	r3, [pc, #72]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3304      	adds	r3, #4
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7fe fc03 	bl	8008d82 <vListInsert>
}
 800a57c:	e010      	b.n	800a5a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a57e:	4b0e      	ldr	r3, [pc, #56]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3304      	adds	r3, #4
 800a588:	4619      	mov	r1, r3
 800a58a:	4610      	mov	r0, r2
 800a58c:	f7fe fbf9 	bl	8008d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	429a      	cmp	r2, r3
 800a598:	d202      	bcs.n	800a5a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a59a:	4a08      	ldr	r2, [pc, #32]	; (800a5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	6013      	str	r3, [r2, #0]
}
 800a5a0:	bf00      	nop
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20001f98 	.word	0x20001f98
 800a5ac:	20001ac0 	.word	0x20001ac0
 800a5b0:	20001f80 	.word	0x20001f80
 800a5b4:	20001f50 	.word	0x20001f50
 800a5b8:	20001f4c 	.word	0x20001f4c
 800a5bc:	20001fb4 	.word	0x20001fb4

0800a5c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08a      	sub	sp, #40	; 0x28
 800a5c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5ca:	f000 fac3 	bl	800ab54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5ce:	4b1c      	ldr	r3, [pc, #112]	; (800a640 <xTimerCreateTimerTask+0x80>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d021      	beq.n	800a61a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5de:	1d3a      	adds	r2, r7, #4
 800a5e0:	f107 0108 	add.w	r1, r7, #8
 800a5e4:	f107 030c 	add.w	r3, r7, #12
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fb5f 	bl	8008cac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	9202      	str	r2, [sp, #8]
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	460a      	mov	r2, r1
 800a600:	4910      	ldr	r1, [pc, #64]	; (800a644 <xTimerCreateTimerTask+0x84>)
 800a602:	4811      	ldr	r0, [pc, #68]	; (800a648 <xTimerCreateTimerTask+0x88>)
 800a604:	f7ff f8f4 	bl	80097f0 <xTaskCreateStatic>
 800a608:	4602      	mov	r2, r0
 800a60a:	4b10      	ldr	r3, [pc, #64]	; (800a64c <xTimerCreateTimerTask+0x8c>)
 800a60c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <xTimerCreateTimerTask+0x8c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a616:	2301      	movs	r3, #1
 800a618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d109      	bne.n	800a634 <xTimerCreateTimerTask+0x74>
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
 800a632:	e7fe      	b.n	800a632 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a634:	697b      	ldr	r3, [r7, #20]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20001ff0 	.word	0x20001ff0
 800a644:	0800c044 	.word	0x0800c044
 800a648:	0800a769 	.word	0x0800a769
 800a64c:	20001ff4 	.word	0x20001ff4

0800a650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08a      	sub	sp, #40	; 0x28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a65e:	2300      	movs	r3, #0
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d109      	bne.n	800a67c <xTimerGenericCommand+0x2c>
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	623b      	str	r3, [r7, #32]
 800a67a:	e7fe      	b.n	800a67a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a67c:	4b19      	ldr	r3, [pc, #100]	; (800a6e4 <xTimerGenericCommand+0x94>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d02a      	beq.n	800a6da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b05      	cmp	r3, #5
 800a694:	dc18      	bgt.n	800a6c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a696:	f7ff feb5 	bl	800a404 <xTaskGetSchedulerState>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d109      	bne.n	800a6b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6a0:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <xTimerGenericCommand+0x94>)
 800a6a2:	6818      	ldr	r0, [r3, #0]
 800a6a4:	f107 0110 	add.w	r1, r7, #16
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ac:	f7fe fcca 	bl	8009044 <xQueueGenericSend>
 800a6b0:	6278      	str	r0, [r7, #36]	; 0x24
 800a6b2:	e012      	b.n	800a6da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <xTimerGenericCommand+0x94>)
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	f107 0110 	add.w	r1, r7, #16
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f7fe fcc0 	bl	8009044 <xQueueGenericSend>
 800a6c4:	6278      	str	r0, [r7, #36]	; 0x24
 800a6c6:	e008      	b.n	800a6da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <xTimerGenericCommand+0x94>)
 800a6ca:	6818      	ldr	r0, [r3, #0]
 800a6cc:	f107 0110 	add.w	r1, r7, #16
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	f7fe fdb0 	bl	8009238 <xQueueGenericSendFromISR>
 800a6d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3728      	adds	r7, #40	; 0x28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20001ff0 	.word	0x20001ff0

0800a6e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af02      	add	r7, sp, #8
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <prvProcessExpiredTimer+0x7c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe fb77 	bl	8008df4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d121      	bne.n	800a752 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	699a      	ldr	r2, [r3, #24]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	18d1      	adds	r1, r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	6978      	ldr	r0, [r7, #20]
 800a71c:	f000 f8c8 	bl	800a8b0 <prvInsertTimerInActiveList>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d015      	beq.n	800a752 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a726:	2300      	movs	r3, #0
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	2300      	movs	r3, #0
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	2100      	movs	r1, #0
 800a730:	6978      	ldr	r0, [r7, #20]
 800a732:	f7ff ff8d 	bl	800a650 <xTimerGenericCommand>
 800a736:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d109      	bne.n	800a752 <prvProcessExpiredTimer+0x6a>
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	60fb      	str	r3, [r7, #12]
 800a750:	e7fe      	b.n	800a750 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	6978      	ldr	r0, [r7, #20]
 800a758:	4798      	blx	r3
}
 800a75a:	bf00      	nop
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20001fe8 	.word	0x20001fe8

0800a768 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a770:	f107 0308 	add.w	r3, r7, #8
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f857 	bl	800a828 <prvGetNextExpireTime>
 800a77a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4619      	mov	r1, r3
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f803 	bl	800a78c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a786:	f000 f8d5 	bl	800a934 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a78a:	e7f1      	b.n	800a770 <prvTimerTask+0x8>

0800a78c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a796:	f7ff fa57 	bl	8009c48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a79a:	f107 0308 	add.w	r3, r7, #8
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 f866 	bl	800a870 <prvSampleTimeNow>
 800a7a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d130      	bne.n	800a80e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <prvProcessTimerOrBlockTask+0x3c>
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d806      	bhi.n	800a7c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7ba:	f7ff fa53 	bl	8009c64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff ff91 	bl	800a6e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7c6:	e024      	b.n	800a812 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d008      	beq.n	800a7e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7ce:	4b13      	ldr	r3, [pc, #76]	; (800a81c <prvProcessTimerOrBlockTask+0x90>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bf0c      	ite	eq
 800a7d8:	2301      	moveq	r3, #1
 800a7da:	2300      	movne	r3, #0
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7e0:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <prvProcessTimerOrBlockTask+0x94>)
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	f7fe ffcb 	bl	8009788 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7f2:	f7ff fa37 	bl	8009c64 <xTaskResumeAll>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7fc:	4b09      	ldr	r3, [pc, #36]	; (800a824 <prvProcessTimerOrBlockTask+0x98>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	f3bf 8f6f 	isb	sy
}
 800a80c:	e001      	b.n	800a812 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a80e:	f7ff fa29 	bl	8009c64 <xTaskResumeAll>
}
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20001fec 	.word	0x20001fec
 800a820:	20001ff0 	.word	0x20001ff0
 800a824:	e000ed04 	.word	0xe000ed04

0800a828 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a830:	4b0e      	ldr	r3, [pc, #56]	; (800a86c <prvGetNextExpireTime+0x44>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	bf0c      	ite	eq
 800a83a:	2301      	moveq	r3, #1
 800a83c:	2300      	movne	r3, #0
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	461a      	mov	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d105      	bne.n	800a85a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <prvGetNextExpireTime+0x44>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e001      	b.n	800a85e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a85e:	68fb      	ldr	r3, [r7, #12]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	20001fe8 	.word	0x20001fe8

0800a870 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a878:	f7ff fa90 	bl	8009d9c <xTaskGetTickCount>
 800a87c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a87e:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <prvSampleTimeNow+0x3c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	429a      	cmp	r2, r3
 800a886:	d205      	bcs.n	800a894 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a888:	f000 f904 	bl	800aa94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	e002      	b.n	800a89a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a89a:	4a04      	ldr	r2, [pc, #16]	; (800a8ac <prvSampleTimeNow+0x3c>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	20001ff8 	.word	0x20001ff8

0800a8b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d812      	bhi.n	800a8fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d302      	bcc.n	800a8ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	e01b      	b.n	800a922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8ea:	4b10      	ldr	r3, [pc, #64]	; (800a92c <prvInsertTimerInActiveList+0x7c>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7fe fa44 	bl	8008d82 <vListInsert>
 800a8fa:	e012      	b.n	800a922 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	429a      	cmp	r2, r3
 800a902:	d206      	bcs.n	800a912 <prvInsertTimerInActiveList+0x62>
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d302      	bcc.n	800a912 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a90c:	2301      	movs	r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	e007      	b.n	800a922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a912:	4b07      	ldr	r3, [pc, #28]	; (800a930 <prvInsertTimerInActiveList+0x80>)
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3304      	adds	r3, #4
 800a91a:	4619      	mov	r1, r3
 800a91c:	4610      	mov	r0, r2
 800a91e:	f7fe fa30 	bl	8008d82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a922:	697b      	ldr	r3, [r7, #20]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3718      	adds	r7, #24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20001fec 	.word	0x20001fec
 800a930:	20001fe8 	.word	0x20001fe8

0800a934 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08e      	sub	sp, #56	; 0x38
 800a938:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a93a:	e099      	b.n	800aa70 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	da17      	bge.n	800a972 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a942:	1d3b      	adds	r3, r7, #4
 800a944:	3304      	adds	r3, #4
 800a946:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d109      	bne.n	800a962 <prvProcessReceivedCommands+0x2e>
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	61fb      	str	r3, [r7, #28]
 800a960:	e7fe      	b.n	800a960 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a968:	6850      	ldr	r0, [r2, #4]
 800a96a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a96c:	6892      	ldr	r2, [r2, #8]
 800a96e:	4611      	mov	r1, r2
 800a970:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	db7a      	blt.n	800aa6e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d004      	beq.n	800a98e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a986:	3304      	adds	r3, #4
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fa33 	bl	8008df4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a98e:	463b      	mov	r3, r7
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff ff6d 	bl	800a870 <prvSampleTimeNow>
 800a996:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b09      	cmp	r3, #9
 800a99c:	d868      	bhi.n	800aa70 <prvProcessReceivedCommands+0x13c>
 800a99e:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <prvProcessReceivedCommands+0x70>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800a9cd 	.word	0x0800a9cd
 800a9a8:	0800a9cd 	.word	0x0800a9cd
 800a9ac:	0800a9cd 	.word	0x0800a9cd
 800a9b0:	0800aa71 	.word	0x0800aa71
 800a9b4:	0800aa27 	.word	0x0800aa27
 800a9b8:	0800aa5d 	.word	0x0800aa5d
 800a9bc:	0800a9cd 	.word	0x0800a9cd
 800a9c0:	0800a9cd 	.word	0x0800a9cd
 800a9c4:	0800aa71 	.word	0x0800aa71
 800a9c8:	0800aa27 	.word	0x0800aa27
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	18d1      	adds	r1, r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9da:	f7ff ff69 	bl	800a8b0 <prvInsertTimerInActiveList>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d045      	beq.n	800aa70 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d13d      	bne.n	800aa70 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	441a      	add	r2, r3
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	2300      	movs	r3, #0
 800aa02:	2100      	movs	r1, #0
 800aa04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa06:	f7ff fe23 	bl	800a650 <xTimerGenericCommand>
 800aa0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d12e      	bne.n	800aa70 <prvProcessReceivedCommands+0x13c>
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	e7fe      	b.n	800aa24 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d109      	bne.n	800aa48 <prvProcessReceivedCommands+0x114>
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	617b      	str	r3, [r7, #20]
 800aa46:	e7fe      	b.n	800aa46 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	18d1      	adds	r1, r2, r3
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa56:	f7ff ff2b 	bl	800a8b0 <prvInsertTimerInActiveList>
					break;
 800aa5a:	e009      	b.n	800aa70 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d104      	bne.n	800aa70 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800aa66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa68:	f000 fbb4 	bl	800b1d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa6c:	e000      	b.n	800aa70 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa6e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <prvProcessReceivedCommands+0x15c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	1d39      	adds	r1, r7, #4
 800aa76:	2200      	movs	r2, #0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe fc71 	bl	8009360 <xQueueReceive>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f47f af5b 	bne.w	800a93c <prvProcessReceivedCommands+0x8>
	}
}
 800aa86:	bf00      	nop
 800aa88:	3730      	adds	r7, #48	; 0x30
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20001ff0 	.word	0x20001ff0

0800aa94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa9a:	e044      	b.n	800ab26 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa9c:	4b2b      	ldr	r3, [pc, #172]	; (800ab4c <prvSwitchTimerLists+0xb8>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaa6:	4b29      	ldr	r3, [pc, #164]	; (800ab4c <prvSwitchTimerLists+0xb8>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe f99d 	bl	8008df4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d12d      	bne.n	800ab26 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	4413      	add	r3, r2
 800aad2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d90e      	bls.n	800aafa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aae8:	4b18      	ldr	r3, [pc, #96]	; (800ab4c <prvSwitchTimerLists+0xb8>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7fe f945 	bl	8008d82 <vListInsert>
 800aaf8:	e015      	b.n	800ab26 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aafa:	2300      	movs	r3, #0
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	2300      	movs	r3, #0
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	2100      	movs	r1, #0
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff fda3 	bl	800a650 <xTimerGenericCommand>
 800ab0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <prvSwitchTimerLists+0x92>
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	603b      	str	r3, [r7, #0]
 800ab24:	e7fe      	b.n	800ab24 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab26:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <prvSwitchTimerLists+0xb8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1b5      	bne.n	800aa9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab30:	4b06      	ldr	r3, [pc, #24]	; (800ab4c <prvSwitchTimerLists+0xb8>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab36:	4b06      	ldr	r3, [pc, #24]	; (800ab50 <prvSwitchTimerLists+0xbc>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a04      	ldr	r2, [pc, #16]	; (800ab4c <prvSwitchTimerLists+0xb8>)
 800ab3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab3e:	4a04      	ldr	r2, [pc, #16]	; (800ab50 <prvSwitchTimerLists+0xbc>)
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	6013      	str	r3, [r2, #0]
}
 800ab44:	bf00      	nop
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20001fe8 	.word	0x20001fe8
 800ab50:	20001fec 	.word	0x20001fec

0800ab54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab5a:	f000 f95f 	bl	800ae1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab5e:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <prvCheckForValidListAndQueue+0x60>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d120      	bne.n	800aba8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab66:	4814      	ldr	r0, [pc, #80]	; (800abb8 <prvCheckForValidListAndQueue+0x64>)
 800ab68:	f7fe f8ba 	bl	8008ce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab6c:	4813      	ldr	r0, [pc, #76]	; (800abbc <prvCheckForValidListAndQueue+0x68>)
 800ab6e:	f7fe f8b7 	bl	8008ce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab72:	4b13      	ldr	r3, [pc, #76]	; (800abc0 <prvCheckForValidListAndQueue+0x6c>)
 800ab74:	4a10      	ldr	r2, [pc, #64]	; (800abb8 <prvCheckForValidListAndQueue+0x64>)
 800ab76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab78:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <prvCheckForValidListAndQueue+0x70>)
 800ab7a:	4a10      	ldr	r2, [pc, #64]	; (800abbc <prvCheckForValidListAndQueue+0x68>)
 800ab7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <prvCheckForValidListAndQueue+0x74>)
 800ab84:	4a11      	ldr	r2, [pc, #68]	; (800abcc <prvCheckForValidListAndQueue+0x78>)
 800ab86:	2110      	movs	r1, #16
 800ab88:	200a      	movs	r0, #10
 800ab8a:	f7fe f9c5 	bl	8008f18 <xQueueGenericCreateStatic>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	4b08      	ldr	r3, [pc, #32]	; (800abb4 <prvCheckForValidListAndQueue+0x60>)
 800ab92:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab94:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <prvCheckForValidListAndQueue+0x60>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab9c:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <prvCheckForValidListAndQueue+0x60>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	490b      	ldr	r1, [pc, #44]	; (800abd0 <prvCheckForValidListAndQueue+0x7c>)
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fdc8 	bl	8009738 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aba8:	f000 f966 	bl	800ae78 <vPortExitCritical>
}
 800abac:	bf00      	nop
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20001ff0 	.word	0x20001ff0
 800abb8:	20001fc0 	.word	0x20001fc0
 800abbc:	20001fd4 	.word	0x20001fd4
 800abc0:	20001fe8 	.word	0x20001fe8
 800abc4:	20001fec 	.word	0x20001fec
 800abc8:	2000209c 	.word	0x2000209c
 800abcc:	20001ffc 	.word	0x20001ffc
 800abd0:	0800c04c 	.word	0x0800c04c

0800abd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3b04      	subs	r3, #4
 800abe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3b04      	subs	r3, #4
 800abf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f023 0201 	bic.w	r2, r3, #1
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3b04      	subs	r3, #4
 800ac02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac04:	4a0c      	ldr	r2, [pc, #48]	; (800ac38 <pxPortInitialiseStack+0x64>)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3b14      	subs	r3, #20
 800ac0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3b04      	subs	r3, #4
 800ac1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f06f 0202 	mvn.w	r2, #2
 800ac22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3b20      	subs	r3, #32
 800ac28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	0800ac3d 	.word	0x0800ac3d

0800ac3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac46:	4b11      	ldr	r3, [pc, #68]	; (800ac8c <prvTaskExitError+0x50>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d009      	beq.n	800ac64 <prvTaskExitError+0x28>
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	e7fe      	b.n	800ac62 <prvTaskExitError+0x26>
 800ac64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac76:	bf00      	nop
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0fc      	beq.n	800ac78 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	20000118 	.word	0x20000118

0800ac90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac90:	4b07      	ldr	r3, [pc, #28]	; (800acb0 <pxCurrentTCBConst2>)
 800ac92:	6819      	ldr	r1, [r3, #0]
 800ac94:	6808      	ldr	r0, [r1, #0]
 800ac96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	f380 8809 	msr	PSP, r0
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	4770      	bx	lr
 800acac:	f3af 8000 	nop.w

0800acb0 <pxCurrentTCBConst2>:
 800acb0:	20001ac0 	.word	0x20001ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop

0800acb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800acb8:	4808      	ldr	r0, [pc, #32]	; (800acdc <prvPortStartFirstTask+0x24>)
 800acba:	6800      	ldr	r0, [r0, #0]
 800acbc:	6800      	ldr	r0, [r0, #0]
 800acbe:	f380 8808 	msr	MSP, r0
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f380 8814 	msr	CONTROL, r0
 800acca:	b662      	cpsie	i
 800accc:	b661      	cpsie	f
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	df00      	svc	0
 800acd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acda:	bf00      	nop
 800acdc:	e000ed08 	.word	0xe000ed08

0800ace0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ace6:	4b44      	ldr	r3, [pc, #272]	; (800adf8 <xPortStartScheduler+0x118>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a44      	ldr	r2, [pc, #272]	; (800adfc <xPortStartScheduler+0x11c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d109      	bne.n	800ad04 <xPortStartScheduler+0x24>
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	e7fe      	b.n	800ad02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad04:	4b3c      	ldr	r3, [pc, #240]	; (800adf8 <xPortStartScheduler+0x118>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a3d      	ldr	r2, [pc, #244]	; (800ae00 <xPortStartScheduler+0x120>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d109      	bne.n	800ad22 <xPortStartScheduler+0x42>
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	e7fe      	b.n	800ad20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad22:	4b38      	ldr	r3, [pc, #224]	; (800ae04 <xPortStartScheduler+0x124>)
 800ad24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	22ff      	movs	r2, #255	; 0xff
 800ad32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	4b30      	ldr	r3, [pc, #192]	; (800ae08 <xPortStartScheduler+0x128>)
 800ad48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad4a:	4b30      	ldr	r3, [pc, #192]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad4c:	2207      	movs	r2, #7
 800ad4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad50:	e009      	b.n	800ad66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ad52:	4b2e      	ldr	r3, [pc, #184]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	4a2c      	ldr	r2, [pc, #176]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad66:	78fb      	ldrb	r3, [r7, #3]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d0ef      	beq.n	800ad52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad72:	4b26      	ldr	r3, [pc, #152]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f1c3 0307 	rsb	r3, r3, #7
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d009      	beq.n	800ad92 <xPortStartScheduler+0xb2>
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	60bb      	str	r3, [r7, #8]
 800ad90:	e7fe      	b.n	800ad90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad92:	4b1e      	ldr	r3, [pc, #120]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	4a1c      	ldr	r2, [pc, #112]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad9c:	4b1b      	ldr	r3, [pc, #108]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ada4:	4a19      	ldr	r2, [pc, #100]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ada6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adb0:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <xPortStartScheduler+0x130>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <xPortStartScheduler+0x130>)
 800adb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adbc:	4b14      	ldr	r3, [pc, #80]	; (800ae10 <xPortStartScheduler+0x130>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a13      	ldr	r2, [pc, #76]	; (800ae10 <xPortStartScheduler+0x130>)
 800adc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adc8:	f000 f8d6 	bl	800af78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adcc:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <xPortStartScheduler+0x134>)
 800adce:	2200      	movs	r2, #0
 800add0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800add2:	f000 f8f5 	bl	800afc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800add6:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <xPortStartScheduler+0x138>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a0f      	ldr	r2, [pc, #60]	; (800ae18 <xPortStartScheduler+0x138>)
 800addc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ade0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ade2:	f7ff ff69 	bl	800acb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ade6:	f7ff f8a7 	bl	8009f38 <vTaskSwitchContext>
	prvTaskExitError();
 800adea:	f7ff ff27 	bl	800ac3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	e000ed00 	.word	0xe000ed00
 800adfc:	410fc271 	.word	0x410fc271
 800ae00:	410fc270 	.word	0x410fc270
 800ae04:	e000e400 	.word	0xe000e400
 800ae08:	200020ec 	.word	0x200020ec
 800ae0c:	200020f0 	.word	0x200020f0
 800ae10:	e000ed20 	.word	0xe000ed20
 800ae14:	20000118 	.word	0x20000118
 800ae18:	e000ef34 	.word	0xe000ef34

0800ae1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae34:	4b0e      	ldr	r3, [pc, #56]	; (800ae70 <vPortEnterCritical+0x54>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	4a0d      	ldr	r2, [pc, #52]	; (800ae70 <vPortEnterCritical+0x54>)
 800ae3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae3e:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <vPortEnterCritical+0x54>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d10e      	bne.n	800ae64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <vPortEnterCritical+0x58>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d009      	beq.n	800ae64 <vPortEnterCritical+0x48>
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	603b      	str	r3, [r7, #0]
 800ae62:	e7fe      	b.n	800ae62 <vPortEnterCritical+0x46>
	}
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000118 	.word	0x20000118
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae7e:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <vPortExitCritical+0x4c>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d109      	bne.n	800ae9a <vPortExitCritical+0x22>
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	607b      	str	r3, [r7, #4]
 800ae98:	e7fe      	b.n	800ae98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <vPortExitCritical+0x4c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	4a08      	ldr	r2, [pc, #32]	; (800aec4 <vPortExitCritical+0x4c>)
 800aea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aea4:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <vPortExitCritical+0x4c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d104      	bne.n	800aeb6 <vPortExitCritical+0x3e>
 800aeac:	2300      	movs	r3, #0
 800aeae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aeb6:	bf00      	nop
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	20000118 	.word	0x20000118
	...

0800aed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aed0:	f3ef 8009 	mrs	r0, PSP
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4b15      	ldr	r3, [pc, #84]	; (800af30 <pxCurrentTCBConst>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	f01e 0f10 	tst.w	lr, #16
 800aee0:	bf08      	it	eq
 800aee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeea:	6010      	str	r0, [r2, #0]
 800aeec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aef4:	f380 8811 	msr	BASEPRI, r0
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f7ff f81a 	bl	8009f38 <vTaskSwitchContext>
 800af04:	f04f 0000 	mov.w	r0, #0
 800af08:	f380 8811 	msr	BASEPRI, r0
 800af0c:	bc09      	pop	{r0, r3}
 800af0e:	6819      	ldr	r1, [r3, #0]
 800af10:	6808      	ldr	r0, [r1, #0]
 800af12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af16:	f01e 0f10 	tst.w	lr, #16
 800af1a:	bf08      	it	eq
 800af1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af20:	f380 8809 	msr	PSP, r0
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	f3af 8000 	nop.w

0800af30 <pxCurrentTCBConst>:
 800af30:	20001ac0 	.word	0x20001ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af50:	f7fe ff34 	bl	8009dbc <xTaskIncrementTick>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af5a:	4b06      	ldr	r3, [pc, #24]	; (800af74 <SysTick_Handler+0x3c>)
 800af5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	2300      	movs	r3, #0
 800af64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	e000ed04 	.word	0xe000ed04

0800af78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af7c:	4b0b      	ldr	r3, [pc, #44]	; (800afac <vPortSetupTimerInterrupt+0x34>)
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af82:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <vPortSetupTimerInterrupt+0x38>)
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af88:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <vPortSetupTimerInterrupt+0x3c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a0a      	ldr	r2, [pc, #40]	; (800afb8 <vPortSetupTimerInterrupt+0x40>)
 800af8e:	fba2 2303 	umull	r2, r3, r2, r3
 800af92:	099b      	lsrs	r3, r3, #6
 800af94:	4a09      	ldr	r2, [pc, #36]	; (800afbc <vPortSetupTimerInterrupt+0x44>)
 800af96:	3b01      	subs	r3, #1
 800af98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af9a:	4b04      	ldr	r3, [pc, #16]	; (800afac <vPortSetupTimerInterrupt+0x34>)
 800af9c:	2207      	movs	r2, #7
 800af9e:	601a      	str	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	e000e010 	.word	0xe000e010
 800afb0:	e000e018 	.word	0xe000e018
 800afb4:	20000000 	.word	0x20000000
 800afb8:	10624dd3 	.word	0x10624dd3
 800afbc:	e000e014 	.word	0xe000e014

0800afc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afd0 <vPortEnableVFP+0x10>
 800afc4:	6801      	ldr	r1, [r0, #0]
 800afc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afca:	6001      	str	r1, [r0, #0]
 800afcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afce:	bf00      	nop
 800afd0:	e000ed88 	.word	0xe000ed88

0800afd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afda:	f3ef 8305 	mrs	r3, IPSR
 800afde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b0f      	cmp	r3, #15
 800afe4:	d913      	bls.n	800b00e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afe6:	4a16      	ldr	r2, [pc, #88]	; (800b040 <vPortValidateInterruptPriority+0x6c>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aff0:	4b14      	ldr	r3, [pc, #80]	; (800b044 <vPortValidateInterruptPriority+0x70>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	7afa      	ldrb	r2, [r7, #11]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d209      	bcs.n	800b00e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	607b      	str	r3, [r7, #4]
 800b00c:	e7fe      	b.n	800b00c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b00e:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <vPortValidateInterruptPriority+0x74>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b016:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <vPortValidateInterruptPriority+0x78>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d909      	bls.n	800b032 <vPortValidateInterruptPriority+0x5e>
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	e7fe      	b.n	800b030 <vPortValidateInterruptPriority+0x5c>
	}
 800b032:	bf00      	nop
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	e000e3f0 	.word	0xe000e3f0
 800b044:	200020ec 	.word	0x200020ec
 800b048:	e000ed0c 	.word	0xe000ed0c
 800b04c:	200020f0 	.word	0x200020f0

0800b050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08a      	sub	sp, #40	; 0x28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b058:	2300      	movs	r3, #0
 800b05a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b05c:	f7fe fdf4 	bl	8009c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b060:	4b57      	ldr	r3, [pc, #348]	; (800b1c0 <pvPortMalloc+0x170>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b068:	f000 f90c 	bl	800b284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b06c:	4b55      	ldr	r3, [pc, #340]	; (800b1c4 <pvPortMalloc+0x174>)
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4013      	ands	r3, r2
 800b074:	2b00      	cmp	r3, #0
 800b076:	f040 808c 	bne.w	800b192 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d01c      	beq.n	800b0ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b080:	2208      	movs	r2, #8
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d013      	beq.n	800b0ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f023 0307 	bic.w	r3, r3, #7
 800b098:	3308      	adds	r3, #8
 800b09a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f003 0307 	and.w	r3, r3, #7
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <pvPortMalloc+0x6a>
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	e7fe      	b.n	800b0b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d068      	beq.n	800b192 <pvPortMalloc+0x142>
 800b0c0:	4b41      	ldr	r3, [pc, #260]	; (800b1c8 <pvPortMalloc+0x178>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d863      	bhi.n	800b192 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0ca:	4b40      	ldr	r3, [pc, #256]	; (800b1cc <pvPortMalloc+0x17c>)
 800b0cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0ce:	4b3f      	ldr	r3, [pc, #252]	; (800b1cc <pvPortMalloc+0x17c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0d4:	e004      	b.n	800b0e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d903      	bls.n	800b0f2 <pvPortMalloc+0xa2>
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1f1      	bne.n	800b0d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0f2:	4b33      	ldr	r3, [pc, #204]	; (800b1c0 <pvPortMalloc+0x170>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d04a      	beq.n	800b192 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2208      	movs	r2, #8
 800b102:	4413      	add	r3, r2
 800b104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	1ad2      	subs	r2, r2, r3
 800b116:	2308      	movs	r3, #8
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d91e      	bls.n	800b15c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4413      	add	r3, r2
 800b124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	f003 0307 	and.w	r3, r3, #7
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <pvPortMalloc+0xf4>
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	e7fe      	b.n	800b142 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	1ad2      	subs	r2, r2, r3
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b156:	69b8      	ldr	r0, [r7, #24]
 800b158:	f000 f8f6 	bl	800b348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b15c:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <pvPortMalloc+0x178>)
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	4a18      	ldr	r2, [pc, #96]	; (800b1c8 <pvPortMalloc+0x178>)
 800b168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b16a:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <pvPortMalloc+0x178>)
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	4b18      	ldr	r3, [pc, #96]	; (800b1d0 <pvPortMalloc+0x180>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d203      	bcs.n	800b17e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <pvPortMalloc+0x178>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a15      	ldr	r2, [pc, #84]	; (800b1d0 <pvPortMalloc+0x180>)
 800b17c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <pvPortMalloc+0x174>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	431a      	orrs	r2, r3
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b192:	f7fe fd67 	bl	8009c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <pvPortMalloc+0x164>
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e7fe      	b.n	800b1b2 <pvPortMalloc+0x162>
	return pvReturn;
 800b1b4:	69fb      	ldr	r3, [r7, #28]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3728      	adds	r7, #40	; 0x28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	20005cfc 	.word	0x20005cfc
 800b1c4:	20005d08 	.word	0x20005d08
 800b1c8:	20005d00 	.word	0x20005d00
 800b1cc:	20005cf4 	.word	0x20005cf4
 800b1d0:	20005d04 	.word	0x20005d04

0800b1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d046      	beq.n	800b274 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1e6:	2308      	movs	r3, #8
 800b1e8:	425b      	negs	r3, r3
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	4b20      	ldr	r3, [pc, #128]	; (800b27c <vPortFree+0xa8>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <vPortFree+0x42>
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	e7fe      	b.n	800b214 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <vPortFree+0x5e>
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	60bb      	str	r3, [r7, #8]
 800b230:	e7fe      	b.n	800b230 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	4b11      	ldr	r3, [pc, #68]	; (800b27c <vPortFree+0xa8>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4013      	ands	r3, r2
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d019      	beq.n	800b274 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d115      	bne.n	800b274 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <vPortFree+0xa8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	43db      	mvns	r3, r3
 800b252:	401a      	ands	r2, r3
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b258:	f7fe fcf6 	bl	8009c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <vPortFree+0xac>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4413      	add	r3, r2
 800b266:	4a06      	ldr	r2, [pc, #24]	; (800b280 <vPortFree+0xac>)
 800b268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b26a:	6938      	ldr	r0, [r7, #16]
 800b26c:	f000 f86c 	bl	800b348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b270:	f7fe fcf8 	bl	8009c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b274:	bf00      	nop
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20005d08 	.word	0x20005d08
 800b280:	20005d00 	.word	0x20005d00

0800b284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b28a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b28e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b290:	4b27      	ldr	r3, [pc, #156]	; (800b330 <prvHeapInit+0xac>)
 800b292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00c      	beq.n	800b2b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3307      	adds	r3, #7
 800b2a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	4a1f      	ldr	r2, [pc, #124]	; (800b330 <prvHeapInit+0xac>)
 800b2b4:	4413      	add	r3, r2
 800b2b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2bc:	4a1d      	ldr	r2, [pc, #116]	; (800b334 <prvHeapInit+0xb0>)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2c2:	4b1c      	ldr	r3, [pc, #112]	; (800b334 <prvHeapInit+0xb0>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2d0:	2208      	movs	r2, #8
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	1a9b      	subs	r3, r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f023 0307 	bic.w	r3, r3, #7
 800b2de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4a15      	ldr	r2, [pc, #84]	; (800b338 <prvHeapInit+0xb4>)
 800b2e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2e6:	4b14      	ldr	r3, [pc, #80]	; (800b338 <prvHeapInit+0xb4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <prvHeapInit+0xb4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <prvHeapInit+0xb4>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	4a0a      	ldr	r2, [pc, #40]	; (800b33c <prvHeapInit+0xb8>)
 800b312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4a09      	ldr	r2, [pc, #36]	; (800b340 <prvHeapInit+0xbc>)
 800b31a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b31c:	4b09      	ldr	r3, [pc, #36]	; (800b344 <prvHeapInit+0xc0>)
 800b31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	200020f4 	.word	0x200020f4
 800b334:	20005cf4 	.word	0x20005cf4
 800b338:	20005cfc 	.word	0x20005cfc
 800b33c:	20005d04 	.word	0x20005d04
 800b340:	20005d00 	.word	0x20005d00
 800b344:	20005d08 	.word	0x20005d08

0800b348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b350:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <prvInsertBlockIntoFreeList+0xac>)
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	e002      	b.n	800b35c <prvInsertBlockIntoFreeList+0x14>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	429a      	cmp	r2, r3
 800b364:	d8f7      	bhi.n	800b356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	4413      	add	r3, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	429a      	cmp	r2, r3
 800b376:	d108      	bne.n	800b38a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	441a      	add	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	441a      	add	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d118      	bne.n	800b3d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	4b15      	ldr	r3, [pc, #84]	; (800b3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d00d      	beq.n	800b3c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	441a      	add	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e008      	b.n	800b3d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	e003      	b.n	800b3d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d002      	beq.n	800b3e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20005cf4 	.word	0x20005cf4
 800b3f8:	20005cfc 	.word	0x20005cfc

0800b3fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b400:	2200      	movs	r2, #0
 800b402:	4912      	ldr	r1, [pc, #72]	; (800b44c <MX_USB_DEVICE_Init+0x50>)
 800b404:	4812      	ldr	r0, [pc, #72]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b406:	f7fc fa9b 	bl	8007940 <USBD_Init>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b410:	f7f5 fc92 	bl	8000d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b414:	490f      	ldr	r1, [pc, #60]	; (800b454 <MX_USB_DEVICE_Init+0x58>)
 800b416:	480e      	ldr	r0, [pc, #56]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b418:	f7fc fabd 	bl	8007996 <USBD_RegisterClass>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b422:	f7f5 fc89 	bl	8000d38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b426:	490c      	ldr	r1, [pc, #48]	; (800b458 <MX_USB_DEVICE_Init+0x5c>)
 800b428:	4809      	ldr	r0, [pc, #36]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b42a:	f7fc f9eb 	bl	8007804 <USBD_CDC_RegisterInterface>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b434:	f7f5 fc80 	bl	8000d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b438:	4805      	ldr	r0, [pc, #20]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b43a:	f7fc fac6 	bl	80079ca <USBD_Start>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b444:	f7f5 fc78 	bl	8000d38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b448:	bf00      	nop
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	2000012c 	.word	0x2000012c
 800b450:	20005ee0 	.word	0x20005ee0
 800b454:	20000014 	.word	0x20000014
 800b458:	2000011c 	.word	0x2000011c

0800b45c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b460:	2200      	movs	r2, #0
 800b462:	4905      	ldr	r1, [pc, #20]	; (800b478 <CDC_Init_FS+0x1c>)
 800b464:	4805      	ldr	r0, [pc, #20]	; (800b47c <CDC_Init_FS+0x20>)
 800b466:	f7fc f9e4 	bl	8007832 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b46a:	4905      	ldr	r1, [pc, #20]	; (800b480 <CDC_Init_FS+0x24>)
 800b46c:	4803      	ldr	r0, [pc, #12]	; (800b47c <CDC_Init_FS+0x20>)
 800b46e:	f7fc f9fa 	bl	8007866 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b474:	4618      	mov	r0, r3
 800b476:	bd80      	pop	{r7, pc}
 800b478:	200061bc 	.word	0x200061bc
 800b47c:	20005ee0 	.word	0x20005ee0
 800b480:	2000617c 	.word	0x2000617c

0800b484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	6039      	str	r1, [r7, #0]
 800b49e:	71fb      	strb	r3, [r7, #7]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	2b23      	cmp	r3, #35	; 0x23
 800b4a8:	d84a      	bhi.n	800b540 <CDC_Control_FS+0xac>
 800b4aa:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <CDC_Control_FS+0x1c>)
 800b4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b0:	0800b541 	.word	0x0800b541
 800b4b4:	0800b541 	.word	0x0800b541
 800b4b8:	0800b541 	.word	0x0800b541
 800b4bc:	0800b541 	.word	0x0800b541
 800b4c0:	0800b541 	.word	0x0800b541
 800b4c4:	0800b541 	.word	0x0800b541
 800b4c8:	0800b541 	.word	0x0800b541
 800b4cc:	0800b541 	.word	0x0800b541
 800b4d0:	0800b541 	.word	0x0800b541
 800b4d4:	0800b541 	.word	0x0800b541
 800b4d8:	0800b541 	.word	0x0800b541
 800b4dc:	0800b541 	.word	0x0800b541
 800b4e0:	0800b541 	.word	0x0800b541
 800b4e4:	0800b541 	.word	0x0800b541
 800b4e8:	0800b541 	.word	0x0800b541
 800b4ec:	0800b541 	.word	0x0800b541
 800b4f0:	0800b541 	.word	0x0800b541
 800b4f4:	0800b541 	.word	0x0800b541
 800b4f8:	0800b541 	.word	0x0800b541
 800b4fc:	0800b541 	.word	0x0800b541
 800b500:	0800b541 	.word	0x0800b541
 800b504:	0800b541 	.word	0x0800b541
 800b508:	0800b541 	.word	0x0800b541
 800b50c:	0800b541 	.word	0x0800b541
 800b510:	0800b541 	.word	0x0800b541
 800b514:	0800b541 	.word	0x0800b541
 800b518:	0800b541 	.word	0x0800b541
 800b51c:	0800b541 	.word	0x0800b541
 800b520:	0800b541 	.word	0x0800b541
 800b524:	0800b541 	.word	0x0800b541
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b541 	.word	0x0800b541
 800b530:	0800b541 	.word	0x0800b541
 800b534:	0800b541 	.word	0x0800b541
 800b538:	0800b541 	.word	0x0800b541
 800b53c:	0800b541 	.word	0x0800b541
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b540:	bf00      	nop
  }

  return (USBD_OK);
 800b542:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b55a:	6879      	ldr	r1, [r7, #4]
 800b55c:	4805      	ldr	r0, [pc, #20]	; (800b574 <CDC_Receive_FS+0x24>)
 800b55e:	f7fc f982 	bl	8007866 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b562:	4804      	ldr	r0, [pc, #16]	; (800b574 <CDC_Receive_FS+0x24>)
 800b564:	f7fc f9c2 	bl	80078ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b568:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20005ee0 	.word	0x20005ee0

0800b578 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b588:	4b0d      	ldr	r3, [pc, #52]	; (800b5c0 <CDC_Transmit_FS+0x48>)
 800b58a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b58e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e00b      	b.n	800b5b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b59e:	887b      	ldrh	r3, [r7, #2]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	4806      	ldr	r0, [pc, #24]	; (800b5c0 <CDC_Transmit_FS+0x48>)
 800b5a6:	f7fc f944 	bl	8007832 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5aa:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <CDC_Transmit_FS+0x48>)
 800b5ac:	f7fc f96f 	bl	800788e <USBD_CDC_TransmitPacket>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20005ee0 	.word	0x20005ee0

0800b5c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	6039      	str	r1, [r7, #0]
 800b5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	2212      	movs	r2, #18
 800b5d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5d6:	4b03      	ldr	r3, [pc, #12]	; (800b5e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20000148 	.word	0x20000148

0800b5e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2204      	movs	r2, #4
 800b5f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5fa:	4b03      	ldr	r3, [pc, #12]	; (800b608 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	2000015c 	.word	0x2000015c

0800b60c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	6039      	str	r1, [r7, #0]
 800b616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d105      	bne.n	800b62a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	4907      	ldr	r1, [pc, #28]	; (800b640 <USBD_FS_ProductStrDescriptor+0x34>)
 800b622:	4808      	ldr	r0, [pc, #32]	; (800b644 <USBD_FS_ProductStrDescriptor+0x38>)
 800b624:	f7fd f908 	bl	8008838 <USBD_GetString>
 800b628:	e004      	b.n	800b634 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	4904      	ldr	r1, [pc, #16]	; (800b640 <USBD_FS_ProductStrDescriptor+0x34>)
 800b62e:	4805      	ldr	r0, [pc, #20]	; (800b644 <USBD_FS_ProductStrDescriptor+0x38>)
 800b630:	f7fd f902 	bl	8008838 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b634:	4b02      	ldr	r3, [pc, #8]	; (800b640 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	200061fc 	.word	0x200061fc
 800b644:	0800c054 	.word	0x0800c054

0800b648 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b654:	683a      	ldr	r2, [r7, #0]
 800b656:	4904      	ldr	r1, [pc, #16]	; (800b668 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b658:	4804      	ldr	r0, [pc, #16]	; (800b66c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b65a:	f7fd f8ed 	bl	8008838 <USBD_GetString>
  return USBD_StrDesc;
 800b65e:	4b02      	ldr	r3, [pc, #8]	; (800b668 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	200061fc 	.word	0x200061fc
 800b66c:	0800c06c 	.word	0x0800c06c

0800b670 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	6039      	str	r1, [r7, #0]
 800b67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	221a      	movs	r2, #26
 800b680:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b682:	f000 f843 	bl	800b70c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b686:	4b02      	ldr	r3, [pc, #8]	; (800b690 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20000160 	.word	0x20000160

0800b694 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6a0:	79fb      	ldrb	r3, [r7, #7]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d105      	bne.n	800b6b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	4907      	ldr	r1, [pc, #28]	; (800b6c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6aa:	4808      	ldr	r0, [pc, #32]	; (800b6cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6ac:	f7fd f8c4 	bl	8008838 <USBD_GetString>
 800b6b0:	e004      	b.n	800b6bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	4904      	ldr	r1, [pc, #16]	; (800b6c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6b6:	4805      	ldr	r0, [pc, #20]	; (800b6cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6b8:	f7fd f8be 	bl	8008838 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6bc:	4b02      	ldr	r3, [pc, #8]	; (800b6c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	200061fc 	.word	0x200061fc
 800b6cc:	0800c080 	.word	0x0800c080

0800b6d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	6039      	str	r1, [r7, #0]
 800b6da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d105      	bne.n	800b6ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	4907      	ldr	r1, [pc, #28]	; (800b704 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6e6:	4808      	ldr	r0, [pc, #32]	; (800b708 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6e8:	f7fd f8a6 	bl	8008838 <USBD_GetString>
 800b6ec:	e004      	b.n	800b6f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	4904      	ldr	r1, [pc, #16]	; (800b704 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6f2:	4805      	ldr	r0, [pc, #20]	; (800b708 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6f4:	f7fd f8a0 	bl	8008838 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6f8:	4b02      	ldr	r3, [pc, #8]	; (800b704 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	200061fc 	.word	0x200061fc
 800b708:	0800c08c 	.word	0x0800c08c

0800b70c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b712:	4b0f      	ldr	r3, [pc, #60]	; (800b750 <Get_SerialNum+0x44>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b718:	4b0e      	ldr	r3, [pc, #56]	; (800b754 <Get_SerialNum+0x48>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b71e:	4b0e      	ldr	r3, [pc, #56]	; (800b758 <Get_SerialNum+0x4c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d009      	beq.n	800b746 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b732:	2208      	movs	r2, #8
 800b734:	4909      	ldr	r1, [pc, #36]	; (800b75c <Get_SerialNum+0x50>)
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 f814 	bl	800b764 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b73c:	2204      	movs	r2, #4
 800b73e:	4908      	ldr	r1, [pc, #32]	; (800b760 <Get_SerialNum+0x54>)
 800b740:	68b8      	ldr	r0, [r7, #8]
 800b742:	f000 f80f 	bl	800b764 <IntToUnicode>
  }
}
 800b746:	bf00      	nop
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	1fff7a10 	.word	0x1fff7a10
 800b754:	1fff7a14 	.word	0x1fff7a14
 800b758:	1fff7a18 	.word	0x1fff7a18
 800b75c:	20000162 	.word	0x20000162
 800b760:	20000172 	.word	0x20000172

0800b764 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	4613      	mov	r3, r2
 800b770:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b776:	2300      	movs	r3, #0
 800b778:	75fb      	strb	r3, [r7, #23]
 800b77a:	e027      	b.n	800b7cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	0f1b      	lsrs	r3, r3, #28
 800b780:	2b09      	cmp	r3, #9
 800b782:	d80b      	bhi.n	800b79c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	0f1b      	lsrs	r3, r3, #28
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	4619      	mov	r1, r3
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	440b      	add	r3, r1
 800b794:	3230      	adds	r2, #48	; 0x30
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	e00a      	b.n	800b7b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	0f1b      	lsrs	r3, r3, #28
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	440b      	add	r3, r1
 800b7ac:	3237      	adds	r2, #55	; 0x37
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	3301      	adds	r3, #1
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	75fb      	strb	r3, [r7, #23]
 800b7cc:	7dfa      	ldrb	r2, [r7, #23]
 800b7ce:	79fb      	ldrb	r3, [r7, #7]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d3d3      	bcc.n	800b77c <IntToUnicode+0x18>
  }
}
 800b7d4:	bf00      	nop
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08a      	sub	sp, #40	; 0x28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	605a      	str	r2, [r3, #4]
 800b7f2:	609a      	str	r2, [r3, #8]
 800b7f4:	60da      	str	r2, [r3, #12]
 800b7f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b800:	d147      	bne.n	800b892 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
 800b806:	4b25      	ldr	r3, [pc, #148]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80a:	4a24      	ldr	r2, [pc, #144]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b80c:	f043 0301 	orr.w	r3, r3, #1
 800b810:	6313      	str	r3, [r2, #48]	; 0x30
 800b812:	4b22      	ldr	r3, [pc, #136]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	613b      	str	r3, [r7, #16]
 800b81c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b81e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b824:	2300      	movs	r3, #0
 800b826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b828:	2300      	movs	r3, #0
 800b82a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b82c:	f107 0314 	add.w	r3, r7, #20
 800b830:	4619      	mov	r1, r3
 800b832:	481b      	ldr	r0, [pc, #108]	; (800b8a0 <HAL_PCD_MspInit+0xc0>)
 800b834:	f7f5 fe6a 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b838:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b83c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b83e:	2302      	movs	r3, #2
 800b840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b842:	2300      	movs	r3, #0
 800b844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b846:	2303      	movs	r3, #3
 800b848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b84a:	230a      	movs	r3, #10
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b84e:	f107 0314 	add.w	r3, r7, #20
 800b852:	4619      	mov	r1, r3
 800b854:	4812      	ldr	r0, [pc, #72]	; (800b8a0 <HAL_PCD_MspInit+0xc0>)
 800b856:	f7f5 fe59 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b85a:	4b10      	ldr	r3, [pc, #64]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	4a0f      	ldr	r2, [pc, #60]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b864:	6353      	str	r3, [r2, #52]	; 0x34
 800b866:	2300      	movs	r3, #0
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86e:	4a0b      	ldr	r2, [pc, #44]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b874:	6453      	str	r3, [r2, #68]	; 0x44
 800b876:	4b09      	ldr	r3, [pc, #36]	; (800b89c <HAL_PCD_MspInit+0xbc>)
 800b878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b882:	2200      	movs	r2, #0
 800b884:	2105      	movs	r1, #5
 800b886:	2043      	movs	r0, #67	; 0x43
 800b888:	f7f5 fe16 	bl	80014b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b88c:	2043      	movs	r0, #67	; 0x43
 800b88e:	f7f5 fe2f 	bl	80014f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b892:	bf00      	nop
 800b894:	3728      	adds	r7, #40	; 0x28
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	40023800 	.word	0x40023800
 800b8a0:	40020000 	.word	0x40020000

0800b8a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	f7fc f8ce 	bl	8007a5c <USBD_LL_SetupStage>
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b8da:	78fa      	ldrb	r2, [r7, #3]
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	1a9b      	subs	r3, r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	440b      	add	r3, r1
 800b8e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	78fb      	ldrb	r3, [r7, #3]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f7fc f8fe 	bl	8007af2 <USBD_LL_DataOutStage>
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b910:	78fa      	ldrb	r2, [r7, #3]
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	4613      	mov	r3, r2
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	440b      	add	r3, r1
 800b91e:	3348      	adds	r3, #72	; 0x48
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	78fb      	ldrb	r3, [r7, #3]
 800b924:	4619      	mov	r1, r3
 800b926:	f7fc f955 	bl	8007bd4 <USBD_LL_DataInStage>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b940:	4618      	mov	r0, r3
 800b942:	f7fc fa63 	bl	8007e0c <USBD_LL_SOF>
}
 800b946:	bf00      	nop
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b956:	2301      	movs	r3, #1
 800b958:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d001      	beq.n	800b966 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b962:	f7f5 f9e9 	bl	8000d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b96c:	7bfa      	ldrb	r2, [r7, #15]
 800b96e:	4611      	mov	r1, r2
 800b970:	4618      	mov	r0, r3
 800b972:	f7fc fa15 	bl	8007da0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fc f9ce 	bl	8007d1e <USBD_LL_Reset>
}
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fc fa10 	bl	8007dc0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6812      	ldr	r2, [r2, #0]
 800b9ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9b2:	f043 0301 	orr.w	r3, r3, #1
 800b9b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d005      	beq.n	800b9cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9c0:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <HAL_PCD_SuspendCallback+0x48>)
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	4a03      	ldr	r2, [pc, #12]	; (800b9d4 <HAL_PCD_SuspendCallback+0x48>)
 800b9c6:	f043 0306 	orr.w	r3, r3, #6
 800b9ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	e000ed00 	.word	0xe000ed00

0800b9d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fc f9ff 	bl	8007dea <USBD_LL_Resume>
}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fc fa25 	bl	8007e5a <USBD_LL_IsoOUTIncomplete>
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba2a:	78fa      	ldrb	r2, [r7, #3]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fc fa06 	bl	8007e40 <USBD_LL_IsoINIncomplete>
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fc fa12 	bl	8007e74 <USBD_LL_DevConnected>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fc fa0f 	bl	8007e8a <USBD_LL_DevDisconnected>
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d13c      	bne.n	800bafe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba84:	4a20      	ldr	r2, [pc, #128]	; (800bb08 <USBD_LL_Init+0x94>)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a1e      	ldr	r2, [pc, #120]	; (800bb08 <USBD_LL_Init+0x94>)
 800ba90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba94:	4b1c      	ldr	r3, [pc, #112]	; (800bb08 <USBD_LL_Init+0x94>)
 800ba96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba9c:	4b1a      	ldr	r3, [pc, #104]	; (800bb08 <USBD_LL_Init+0x94>)
 800ba9e:	2204      	movs	r2, #4
 800baa0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800baa2:	4b19      	ldr	r3, [pc, #100]	; (800bb08 <USBD_LL_Init+0x94>)
 800baa4:	2202      	movs	r2, #2
 800baa6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800baa8:	4b17      	ldr	r3, [pc, #92]	; (800bb08 <USBD_LL_Init+0x94>)
 800baaa:	2200      	movs	r2, #0
 800baac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baae:	4b16      	ldr	r3, [pc, #88]	; (800bb08 <USBD_LL_Init+0x94>)
 800bab0:	2202      	movs	r2, #2
 800bab2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bab4:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <USBD_LL_Init+0x94>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800baba:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <USBD_LL_Init+0x94>)
 800babc:	2200      	movs	r2, #0
 800babe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bac0:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <USBD_LL_Init+0x94>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bac6:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <USBD_LL_Init+0x94>)
 800bac8:	2201      	movs	r2, #1
 800baca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bacc:	4b0e      	ldr	r3, [pc, #56]	; (800bb08 <USBD_LL_Init+0x94>)
 800bace:	2200      	movs	r2, #0
 800bad0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bad2:	480d      	ldr	r0, [pc, #52]	; (800bb08 <USBD_LL_Init+0x94>)
 800bad4:	f7f7 fad6 	bl	8003084 <HAL_PCD_Init>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bade:	f7f5 f92b 	bl	8000d38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bae2:	2180      	movs	r1, #128	; 0x80
 800bae4:	4808      	ldr	r0, [pc, #32]	; (800bb08 <USBD_LL_Init+0x94>)
 800bae6:	f7f8 fc3a 	bl	800435e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800baea:	2240      	movs	r2, #64	; 0x40
 800baec:	2100      	movs	r1, #0
 800baee:	4806      	ldr	r0, [pc, #24]	; (800bb08 <USBD_LL_Init+0x94>)
 800baf0:	f7f8 fbee 	bl	80042d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800baf4:	2280      	movs	r2, #128	; 0x80
 800baf6:	2101      	movs	r1, #1
 800baf8:	4803      	ldr	r0, [pc, #12]	; (800bb08 <USBD_LL_Init+0x94>)
 800bafa:	f7f8 fbe9 	bl	80042d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	200063fc 	.word	0x200063fc

0800bb0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7f7 fbcb 	bl	80032be <HAL_PCD_Start>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 f92e 	bl	800bd90 <USBD_Get_USB_Status>
 800bb34:	4603      	mov	r3, r0
 800bb36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4603      	mov	r3, r0
 800bb52:	70fb      	strb	r3, [r7, #3]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70bb      	strb	r3, [r7, #2]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bb6a:	78bb      	ldrb	r3, [r7, #2]
 800bb6c:	883a      	ldrh	r2, [r7, #0]
 800bb6e:	78f9      	ldrb	r1, [r7, #3]
 800bb70:	f7f7 ffa0 	bl	8003ab4 <HAL_PCD_EP_Open>
 800bb74:	4603      	mov	r3, r0
 800bb76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 f908 	bl	800bd90 <USBD_Get_USB_Status>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	460b      	mov	r3, r1
 800bb98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bba8:	78fa      	ldrb	r2, [r7, #3]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7f7 ffe9 	bl	8003b84 <HAL_PCD_EP_Close>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 f8e9 	bl	800bd90 <USBD_Get_USB_Status>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbe6:	78fa      	ldrb	r2, [r7, #3]
 800bbe8:	4611      	mov	r1, r2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7f8 f8c1 	bl	8003d72 <HAL_PCD_EP_SetStall>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 f8ca 	bl	800bd90 <USBD_Get_USB_Status>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc24:	78fa      	ldrb	r2, [r7, #3]
 800bc26:	4611      	mov	r1, r2
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7f8 f906 	bl	8003e3a <HAL_PCD_EP_ClrStall>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 f8ab 	bl	800bd90 <USBD_Get_USB_Status>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800bc3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc5a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bc5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	da0b      	bge.n	800bc7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	1a9b      	subs	r3, r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	333e      	adds	r3, #62	; 0x3e
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	e00b      	b.n	800bc94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc82:	68f9      	ldr	r1, [r7, #12]
 800bc84:	4613      	mov	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	1a9b      	subs	r3, r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	440b      	add	r3, r1
 800bc8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bcba:	78fa      	ldrb	r2, [r7, #3]
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f7 fed3 	bl	8003a6a <HAL_PCD_SetAddress>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 f860 	bl	800bd90 <USBD_Get_USB_Status>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bcd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b086      	sub	sp, #24
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	60f8      	str	r0, [r7, #12]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	461a      	mov	r2, r3
 800bcea:	460b      	mov	r3, r1
 800bcec:	72fb      	strb	r3, [r7, #11]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd00:	893b      	ldrh	r3, [r7, #8]
 800bd02:	7af9      	ldrb	r1, [r7, #11]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	f7f7 ffea 	bl	8003cde <HAL_PCD_EP_Transmit>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 f83d 	bl	800bd90 <USBD_Get_USB_Status>
 800bd16:	4603      	mov	r3, r0
 800bd18:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bd1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	607a      	str	r2, [r7, #4]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	460b      	mov	r3, r1
 800bd32:	72fb      	strb	r3, [r7, #11]
 800bd34:	4613      	mov	r3, r2
 800bd36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd46:	893b      	ldrh	r3, [r7, #8]
 800bd48:	7af9      	ldrb	r1, [r7, #11]
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	f7f7 ff64 	bl	8003c18 <HAL_PCD_EP_Receive>
 800bd50:	4603      	mov	r3, r0
 800bd52:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 f81a 	bl	800bd90 <USBD_Get_USB_Status>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bd60:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3718      	adds	r7, #24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	460b      	mov	r3, r1
 800bd74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd7c:	78fa      	ldrb	r2, [r7, #3]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7f7 ff94 	bl	8003cae <HAL_PCD_EP_GetRxCount>
 800bd86:	4603      	mov	r3, r0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d817      	bhi.n	800bdd4 <USBD_Get_USB_Status+0x44>
 800bda4:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <USBD_Get_USB_Status+0x1c>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800bdbd 	.word	0x0800bdbd
 800bdb0:	0800bdc3 	.word	0x0800bdc3
 800bdb4:	0800bdc9 	.word	0x0800bdc9
 800bdb8:	0800bdcf 	.word	0x0800bdcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc0:	e00b      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc6:	e008      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	73fb      	strb	r3, [r7, #15]
    break;
 800bdcc:	e005      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdce:	2302      	movs	r3, #2
 800bdd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd2:	e002      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd8:	bf00      	nop
  }
  return usb_status;
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <__errno>:
 800bde8:	4b01      	ldr	r3, [pc, #4]	; (800bdf0 <__errno+0x8>)
 800bdea:	6818      	ldr	r0, [r3, #0]
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	2000017c 	.word	0x2000017c

0800bdf4 <__libc_init_array>:
 800bdf4:	b570      	push	{r4, r5, r6, lr}
 800bdf6:	4e0d      	ldr	r6, [pc, #52]	; (800be2c <__libc_init_array+0x38>)
 800bdf8:	4c0d      	ldr	r4, [pc, #52]	; (800be30 <__libc_init_array+0x3c>)
 800bdfa:	1ba4      	subs	r4, r4, r6
 800bdfc:	10a4      	asrs	r4, r4, #2
 800bdfe:	2500      	movs	r5, #0
 800be00:	42a5      	cmp	r5, r4
 800be02:	d109      	bne.n	800be18 <__libc_init_array+0x24>
 800be04:	4e0b      	ldr	r6, [pc, #44]	; (800be34 <__libc_init_array+0x40>)
 800be06:	4c0c      	ldr	r4, [pc, #48]	; (800be38 <__libc_init_array+0x44>)
 800be08:	f000 f8f6 	bl	800bff8 <_init>
 800be0c:	1ba4      	subs	r4, r4, r6
 800be0e:	10a4      	asrs	r4, r4, #2
 800be10:	2500      	movs	r5, #0
 800be12:	42a5      	cmp	r5, r4
 800be14:	d105      	bne.n	800be22 <__libc_init_array+0x2e>
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be1c:	4798      	blx	r3
 800be1e:	3501      	adds	r5, #1
 800be20:	e7ee      	b.n	800be00 <__libc_init_array+0xc>
 800be22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be26:	4798      	blx	r3
 800be28:	3501      	adds	r5, #1
 800be2a:	e7f2      	b.n	800be12 <__libc_init_array+0x1e>
 800be2c:	0800c0bc 	.word	0x0800c0bc
 800be30:	0800c0bc 	.word	0x0800c0bc
 800be34:	0800c0bc 	.word	0x0800c0bc
 800be38:	0800c0c0 	.word	0x0800c0c0

0800be3c <malloc>:
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <malloc+0xc>)
 800be3e:	4601      	mov	r1, r0
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	f000 b86d 	b.w	800bf20 <_malloc_r>
 800be46:	bf00      	nop
 800be48:	2000017c 	.word	0x2000017c

0800be4c <free>:
 800be4c:	4b02      	ldr	r3, [pc, #8]	; (800be58 <free+0xc>)
 800be4e:	4601      	mov	r1, r0
 800be50:	6818      	ldr	r0, [r3, #0]
 800be52:	f000 b817 	b.w	800be84 <_free_r>
 800be56:	bf00      	nop
 800be58:	2000017c 	.word	0x2000017c

0800be5c <memcpy>:
 800be5c:	b510      	push	{r4, lr}
 800be5e:	1e43      	subs	r3, r0, #1
 800be60:	440a      	add	r2, r1
 800be62:	4291      	cmp	r1, r2
 800be64:	d100      	bne.n	800be68 <memcpy+0xc>
 800be66:	bd10      	pop	{r4, pc}
 800be68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be70:	e7f7      	b.n	800be62 <memcpy+0x6>

0800be72 <memset>:
 800be72:	4402      	add	r2, r0
 800be74:	4603      	mov	r3, r0
 800be76:	4293      	cmp	r3, r2
 800be78:	d100      	bne.n	800be7c <memset+0xa>
 800be7a:	4770      	bx	lr
 800be7c:	f803 1b01 	strb.w	r1, [r3], #1
 800be80:	e7f9      	b.n	800be76 <memset+0x4>
	...

0800be84 <_free_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4605      	mov	r5, r0
 800be88:	2900      	cmp	r1, #0
 800be8a:	d045      	beq.n	800bf18 <_free_r+0x94>
 800be8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be90:	1f0c      	subs	r4, r1, #4
 800be92:	2b00      	cmp	r3, #0
 800be94:	bfb8      	it	lt
 800be96:	18e4      	addlt	r4, r4, r3
 800be98:	f000 f8ac 	bl	800bff4 <__malloc_lock>
 800be9c:	4a1f      	ldr	r2, [pc, #124]	; (800bf1c <_free_r+0x98>)
 800be9e:	6813      	ldr	r3, [r2, #0]
 800bea0:	4610      	mov	r0, r2
 800bea2:	b933      	cbnz	r3, 800beb2 <_free_r+0x2e>
 800bea4:	6063      	str	r3, [r4, #4]
 800bea6:	6014      	str	r4, [r2, #0]
 800bea8:	4628      	mov	r0, r5
 800beaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beae:	f000 b8a2 	b.w	800bff6 <__malloc_unlock>
 800beb2:	42a3      	cmp	r3, r4
 800beb4:	d90c      	bls.n	800bed0 <_free_r+0x4c>
 800beb6:	6821      	ldr	r1, [r4, #0]
 800beb8:	1862      	adds	r2, r4, r1
 800beba:	4293      	cmp	r3, r2
 800bebc:	bf04      	itt	eq
 800bebe:	681a      	ldreq	r2, [r3, #0]
 800bec0:	685b      	ldreq	r3, [r3, #4]
 800bec2:	6063      	str	r3, [r4, #4]
 800bec4:	bf04      	itt	eq
 800bec6:	1852      	addeq	r2, r2, r1
 800bec8:	6022      	streq	r2, [r4, #0]
 800beca:	6004      	str	r4, [r0, #0]
 800becc:	e7ec      	b.n	800bea8 <_free_r+0x24>
 800bece:	4613      	mov	r3, r2
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	b10a      	cbz	r2, 800bed8 <_free_r+0x54>
 800bed4:	42a2      	cmp	r2, r4
 800bed6:	d9fa      	bls.n	800bece <_free_r+0x4a>
 800bed8:	6819      	ldr	r1, [r3, #0]
 800beda:	1858      	adds	r0, r3, r1
 800bedc:	42a0      	cmp	r0, r4
 800bede:	d10b      	bne.n	800bef8 <_free_r+0x74>
 800bee0:	6820      	ldr	r0, [r4, #0]
 800bee2:	4401      	add	r1, r0
 800bee4:	1858      	adds	r0, r3, r1
 800bee6:	4282      	cmp	r2, r0
 800bee8:	6019      	str	r1, [r3, #0]
 800beea:	d1dd      	bne.n	800bea8 <_free_r+0x24>
 800beec:	6810      	ldr	r0, [r2, #0]
 800beee:	6852      	ldr	r2, [r2, #4]
 800bef0:	605a      	str	r2, [r3, #4]
 800bef2:	4401      	add	r1, r0
 800bef4:	6019      	str	r1, [r3, #0]
 800bef6:	e7d7      	b.n	800bea8 <_free_r+0x24>
 800bef8:	d902      	bls.n	800bf00 <_free_r+0x7c>
 800befa:	230c      	movs	r3, #12
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	e7d3      	b.n	800bea8 <_free_r+0x24>
 800bf00:	6820      	ldr	r0, [r4, #0]
 800bf02:	1821      	adds	r1, r4, r0
 800bf04:	428a      	cmp	r2, r1
 800bf06:	bf04      	itt	eq
 800bf08:	6811      	ldreq	r1, [r2, #0]
 800bf0a:	6852      	ldreq	r2, [r2, #4]
 800bf0c:	6062      	str	r2, [r4, #4]
 800bf0e:	bf04      	itt	eq
 800bf10:	1809      	addeq	r1, r1, r0
 800bf12:	6021      	streq	r1, [r4, #0]
 800bf14:	605c      	str	r4, [r3, #4]
 800bf16:	e7c7      	b.n	800bea8 <_free_r+0x24>
 800bf18:	bd38      	pop	{r3, r4, r5, pc}
 800bf1a:	bf00      	nop
 800bf1c:	20005d0c 	.word	0x20005d0c

0800bf20 <_malloc_r>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	1ccd      	adds	r5, r1, #3
 800bf24:	f025 0503 	bic.w	r5, r5, #3
 800bf28:	3508      	adds	r5, #8
 800bf2a:	2d0c      	cmp	r5, #12
 800bf2c:	bf38      	it	cc
 800bf2e:	250c      	movcc	r5, #12
 800bf30:	2d00      	cmp	r5, #0
 800bf32:	4606      	mov	r6, r0
 800bf34:	db01      	blt.n	800bf3a <_malloc_r+0x1a>
 800bf36:	42a9      	cmp	r1, r5
 800bf38:	d903      	bls.n	800bf42 <_malloc_r+0x22>
 800bf3a:	230c      	movs	r3, #12
 800bf3c:	6033      	str	r3, [r6, #0]
 800bf3e:	2000      	movs	r0, #0
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	f000 f857 	bl	800bff4 <__malloc_lock>
 800bf46:	4a21      	ldr	r2, [pc, #132]	; (800bfcc <_malloc_r+0xac>)
 800bf48:	6814      	ldr	r4, [r2, #0]
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	b991      	cbnz	r1, 800bf74 <_malloc_r+0x54>
 800bf4e:	4c20      	ldr	r4, [pc, #128]	; (800bfd0 <_malloc_r+0xb0>)
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	b91b      	cbnz	r3, 800bf5c <_malloc_r+0x3c>
 800bf54:	4630      	mov	r0, r6
 800bf56:	f000 f83d 	bl	800bfd4 <_sbrk_r>
 800bf5a:	6020      	str	r0, [r4, #0]
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f000 f838 	bl	800bfd4 <_sbrk_r>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d124      	bne.n	800bfb2 <_malloc_r+0x92>
 800bf68:	230c      	movs	r3, #12
 800bf6a:	6033      	str	r3, [r6, #0]
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f000 f842 	bl	800bff6 <__malloc_unlock>
 800bf72:	e7e4      	b.n	800bf3e <_malloc_r+0x1e>
 800bf74:	680b      	ldr	r3, [r1, #0]
 800bf76:	1b5b      	subs	r3, r3, r5
 800bf78:	d418      	bmi.n	800bfac <_malloc_r+0x8c>
 800bf7a:	2b0b      	cmp	r3, #11
 800bf7c:	d90f      	bls.n	800bf9e <_malloc_r+0x7e>
 800bf7e:	600b      	str	r3, [r1, #0]
 800bf80:	50cd      	str	r5, [r1, r3]
 800bf82:	18cc      	adds	r4, r1, r3
 800bf84:	4630      	mov	r0, r6
 800bf86:	f000 f836 	bl	800bff6 <__malloc_unlock>
 800bf8a:	f104 000b 	add.w	r0, r4, #11
 800bf8e:	1d23      	adds	r3, r4, #4
 800bf90:	f020 0007 	bic.w	r0, r0, #7
 800bf94:	1ac3      	subs	r3, r0, r3
 800bf96:	d0d3      	beq.n	800bf40 <_malloc_r+0x20>
 800bf98:	425a      	negs	r2, r3
 800bf9a:	50e2      	str	r2, [r4, r3]
 800bf9c:	e7d0      	b.n	800bf40 <_malloc_r+0x20>
 800bf9e:	428c      	cmp	r4, r1
 800bfa0:	684b      	ldr	r3, [r1, #4]
 800bfa2:	bf16      	itet	ne
 800bfa4:	6063      	strne	r3, [r4, #4]
 800bfa6:	6013      	streq	r3, [r2, #0]
 800bfa8:	460c      	movne	r4, r1
 800bfaa:	e7eb      	b.n	800bf84 <_malloc_r+0x64>
 800bfac:	460c      	mov	r4, r1
 800bfae:	6849      	ldr	r1, [r1, #4]
 800bfb0:	e7cc      	b.n	800bf4c <_malloc_r+0x2c>
 800bfb2:	1cc4      	adds	r4, r0, #3
 800bfb4:	f024 0403 	bic.w	r4, r4, #3
 800bfb8:	42a0      	cmp	r0, r4
 800bfba:	d005      	beq.n	800bfc8 <_malloc_r+0xa8>
 800bfbc:	1a21      	subs	r1, r4, r0
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f000 f808 	bl	800bfd4 <_sbrk_r>
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d0cf      	beq.n	800bf68 <_malloc_r+0x48>
 800bfc8:	6025      	str	r5, [r4, #0]
 800bfca:	e7db      	b.n	800bf84 <_malloc_r+0x64>
 800bfcc:	20005d0c 	.word	0x20005d0c
 800bfd0:	20005d10 	.word	0x20005d10

0800bfd4 <_sbrk_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4c06      	ldr	r4, [pc, #24]	; (800bff0 <_sbrk_r+0x1c>)
 800bfd8:	2300      	movs	r3, #0
 800bfda:	4605      	mov	r5, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	6023      	str	r3, [r4, #0]
 800bfe0:	f7f5 f8c2 	bl	8001168 <_sbrk>
 800bfe4:	1c43      	adds	r3, r0, #1
 800bfe6:	d102      	bne.n	800bfee <_sbrk_r+0x1a>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	b103      	cbz	r3, 800bfee <_sbrk_r+0x1a>
 800bfec:	602b      	str	r3, [r5, #0]
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
 800bff0:	20006804 	.word	0x20006804

0800bff4 <__malloc_lock>:
 800bff4:	4770      	bx	lr

0800bff6 <__malloc_unlock>:
 800bff6:	4770      	bx	lr

0800bff8 <_init>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	bf00      	nop
 800bffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffe:	bc08      	pop	{r3}
 800c000:	469e      	mov	lr, r3
 800c002:	4770      	bx	lr

0800c004 <_fini>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	bf00      	nop
 800c008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00a:	bc08      	pop	{r3}
 800c00c:	469e      	mov	lr, r3
 800c00e:	4770      	bx	lr
