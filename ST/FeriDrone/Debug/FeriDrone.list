
FeriDrone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800bfe0  0800bfe0  0001bfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c084  0800c084  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c08c  0800c08c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c08c  0800c08c  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c090  0800c090  0001c090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005428  200001e0  0800c274  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005608  0800c274  00025608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002914e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000502c  00000000  00000000  0004935e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e60  00000000  00000000  0004e390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c48  00000000  00000000  000501f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000079dc  00000000  00000000  00051e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b3e9  00000000  00000000  00059814  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dcf4  00000000  00000000  00074bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001128f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008144  00000000  00000000  0011296c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfc8 	.word	0x0800bfc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bfc8 	.word	0x0800bfc8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <spi1_beriRegister>:
void initLSM303DLHC(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi1_beriRegister(uint8_t reg) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004f0:	71fb      	strb	r3, [r7, #7]
	buf_out = reg;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2108      	movs	r1, #8
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <spi1_beriRegister+0x50>)
 80004fe:	f001 f971 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &buf_out, (uint8_t*) &buf_in, 2,
 8000502:	f107 020c 	add.w	r2, r7, #12
 8000506:	f107 010e 	add.w	r1, r7, #14
 800050a:	2302      	movs	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2302      	movs	r3, #2
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <spi1_beriRegister+0x54>)
 8000512:	f004 ff7c 	bl	800540e <HAL_SPI_TransmitReceive>
			2);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2108      	movs	r1, #8
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <spi1_beriRegister+0x50>)
 800051c:	f001 f962 	bl	80017e4 <HAL_GPIO_WritePin>
	return buf_in >> 8;
 8000520:	89bb      	ldrh	r3, [r7, #12]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2db      	uxtb	r3, r3
}
 8000528:	4618      	mov	r0, r3
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	20004b74 	.word	0x20004b74

08000538 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	71bb      	strb	r3, [r7, #6]
	uint16_t buf_out;
	buf_out = reg | (vrednost << 8);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	b21a      	sxth	r2, r3
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	021b      	lsls	r3, r3, #8
 8000550:	b21b      	sxth	r3, r3
 8000552:	4313      	orrs	r3, r2
 8000554:	b21b      	sxth	r3, r3
 8000556:	b29b      	uxth	r3, r3
 8000558:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	4809      	ldr	r0, [pc, #36]	; (8000584 <spi1_pisiRegister+0x4c>)
 8000560:	f001 f940 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &buf_out, 2, 2);
 8000564:	f107 010e 	add.w	r1, r7, #14
 8000568:	2302      	movs	r3, #2
 800056a:	2202      	movs	r2, #2
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <spi1_pisiRegister+0x50>)
 800056e:	f004 fd11 	bl	8004f94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2108      	movs	r1, #8
 8000576:	4803      	ldr	r0, [pc, #12]	; (8000584 <spi1_pisiRegister+0x4c>)
 8000578:	f001 f934 	bl	80017e4 <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	20004b74 	.word	0x20004b74

0800058c <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t *buffer, uint8_t velikost) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
	reg |= 0xC0;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <spi1_beriRegistre+0x50>)
 80005ac:	f001 f91a 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 10);
 80005b0:	1df9      	adds	r1, r7, #7
 80005b2:	230a      	movs	r3, #10
 80005b4:	2201      	movs	r2, #1
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <spi1_beriRegistre+0x54>)
 80005b8:	f004 fcec 	bl	8004f94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, velikost, velikost);
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <spi1_beriRegistre+0x54>)
 80005c6:	f004 fe19 	bl	80051fc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2108      	movs	r1, #8
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <spi1_beriRegistre+0x50>)
 80005d0:	f001 f908 	bl	80017e4 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	20004b74 	.word	0x20004b74

080005e4 <initL3GD20>:

void initL3GD20() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t cip = spi1_beriRegister(0x0F);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f7ff ff78 	bl	80004e0 <spi1_beriRegister>
 80005f0:	4603      	mov	r3, r0
 80005f2:	71fb      	strb	r3, [r7, #7]
	if (cip != 0xD4)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2bd4      	cmp	r3, #212	; 0xd4
 80005f8:	d000      	beq.n	80005fc <initL3GD20+0x18>
		for (;;)
 80005fa:	e7fe      	b.n	80005fa <initL3GD20+0x16>
			;

	spi1_pisiRegister(0x20, 0x0F);
 80005fc:	210f      	movs	r1, #15
 80005fe:	2020      	movs	r0, #32
 8000600:	f7ff ff9a 	bl	8000538 <spi1_pisiRegister>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <i2c1_pisiRegister>:

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af04      	add	r7, sp, #16
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	460b      	mov	r3, r1
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	4613      	mov	r3, r2
 800061c:	717b      	strb	r3, [r7, #5]
	naprava <<= 1;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT,
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	b299      	uxth	r1, r3
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	b29a      	uxth	r2, r3
 800062c:	230a      	movs	r3, #10
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	1d7b      	adds	r3, r7, #5
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <i2c1_pisiRegister+0x40>)
 800063c:	f001 fa14 	bl	8001a68 <HAL_I2C_Mem_Write>
 8000640:	4603      	mov	r3, r0
			&podatek, 1, 10);
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20004b18 	.word	0x20004b18

08000650 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t *podatek,
		uint8_t dolzina) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af04      	add	r7, sp, #16
 8000656:	603a      	str	r2, [r7, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	460b      	mov	r3, r1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	717b      	strb	r3, [r7, #5]
	if ((dolzina > 1) && (naprava == 0x19))
 8000666:	797b      	ldrb	r3, [r7, #5]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d906      	bls.n	800067a <i2c1_beriRegistre+0x2a>
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b19      	cmp	r3, #25
 8000670:	d103      	bne.n	800067a <i2c1_beriRegistre+0x2a>
		reg |= 0x80;
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000678:	71bb      	strb	r3, [r7, #6]
	naprava <<= 1;
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek,
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	b299      	uxth	r1, r3
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	b298      	uxth	r0, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	b29b      	uxth	r3, r3
 800068c:	797a      	ldrb	r2, [r7, #5]
 800068e:	9202      	str	r2, [sp, #8]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	4602      	mov	r2, r0
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <i2c1_beriRegistre+0x58>)
 800069c:	f001 fade 	bl	8001c5c <HAL_I2C_Mem_Read>
			dolzina, dolzina);
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20004b18 	.word	0x20004b18

080006ac <initLSM303DLHC>:

void initLSM303DLHC() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f000 fe11 	bl	80012d8 <HAL_Delay>
	i2c1_pisiRegister(0x19, 0x20, 0x27);
 80006b6:	2227      	movs	r2, #39	; 0x27
 80006b8:	2120      	movs	r1, #32
 80006ba:	2019      	movs	r0, #25
 80006bc:	f7ff ffa6 	bl	800060c <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x23, 0x88);
 80006c0:	2288      	movs	r2, #136	; 0x88
 80006c2:	2123      	movs	r1, #35	; 0x23
 80006c4:	2019      	movs	r0, #25
 80006c6:	f7ff ffa1 	bl	800060c <i2c1_pisiRegister>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09c      	sub	sp, #112	; 0x70
 80006d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006d6:	f000 fdbd 	bl	8001254 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006da:	f000 f867 	bl	80007ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006de:	f000 f9ab 	bl	8000a38 <MX_GPIO_Init>
	MX_I2C1_Init();
 80006e2:	f000 f8e7 	bl	80008b4 <MX_I2C1_Init>
	MX_I2S2_Init();
 80006e6:	f000 f913 	bl	8000910 <MX_I2S2_Init>
	MX_I2S3_Init();
 80006ea:	f000 f93f 	bl	800096c <MX_I2S3_Init>
	MX_SPI1_Init();
 80006ee:	f000 f96d 	bl	80009cc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	osKernelInitialize();
 80006f2:	f008 f969 	bl	80089c8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of merjenjeNagiba */
	const osThreadAttr_t merjenjeNagiba_attributes = { .name = "merjenjeNagiba",
 80006f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006fa:	2224      	movs	r2, #36	; 0x24
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f00b fb9f 	bl	800be42 <memset>
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <main+0xb8>)
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	663b      	str	r3, [r7, #96]	; 0x60
 800070e:	2318      	movs	r3, #24
 8000710:	667b      	str	r3, [r7, #100]	; 0x64
			.priority = (osPriority_t) osPriorityNormal, .stack_size = 256 };
	merjenjeNagibaHandle = osThreadNew(StartMerjenjeNagiba, NULL,
 8000712:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000716:	461a      	mov	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	481c      	ldr	r0, [pc, #112]	; (800078c <main+0xbc>)
 800071c:	f008 f9bc 	bl	8008a98 <osThreadNew>
 8000720:	4602      	mov	r2, r0
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <main+0xc0>)
 8000724:	601a      	str	r2, [r3, #0]
			&merjenjeNagiba_attributes);

	/* definition and creation of trilateracija */
	const osThreadAttr_t trilateracija_attributes = { .name = "trilateracija",
 8000726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072a:	2224      	movs	r2, #36	; 0x24
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00b fb87 	bl	800be42 <memset>
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <main+0xc4>)
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
 8000738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800073e:	2318      	movs	r3, #24
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
			.priority = (osPriority_t) osPriorityNormal, .stack_size = 256 };
	trilateracijaHandle = osThreadNew(StartTrilateracija, NULL,
 8000742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000746:	461a      	mov	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	4813      	ldr	r0, [pc, #76]	; (8000798 <main+0xc8>)
 800074c:	f008 f9a4 	bl	8008a98 <osThreadNew>
 8000750:	4602      	mov	r2, r0
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0xcc>)
 8000754:	601a      	str	r2, [r3, #0]
			&trilateracija_attributes);

	/* definition and creation of pilotiranje */
	const osThreadAttr_t pilotiranje_attributes =
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2224      	movs	r2, #36	; 0x24
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f00b fb70 	bl	800be42 <memset>
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <main+0xd0>)
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	2318      	movs	r3, #24
 800076e:	61fb      	str	r3, [r7, #28]
			{ .name = "pilotiranje", .priority =
					(osPriority_t) osPriorityNormal, .stack_size = 256 };
	pilotiranjeHandle = osThreadNew(StartPilotiranje, NULL,
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	461a      	mov	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <main+0xd4>)
 8000778:	f008 f98e 	bl	8008a98 <osThreadNew>
 800077c:	4602      	mov	r2, r0
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <main+0xd8>)
 8000780:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000782:	f008 f955 	bl	8008a30 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000786:	e7fe      	b.n	8000786 <main+0xb6>
 8000788:	0800bfe0 	.word	0x0800bfe0
 800078c:	08000bed 	.word	0x08000bed
 8000790:	20004b70 	.word	0x20004b70
 8000794:	0800bff0 	.word	0x0800bff0
 8000798:	08000cc9 	.word	0x08000cc9
 800079c:	20004b14 	.word	0x20004b14
 80007a0:	0800c000 	.word	0x0800c000
 80007a4:	08000cd9 	.word	0x08000cd9
 80007a8:	20004b6c 	.word	0x20004b6c

080007ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09a      	sub	sp, #104	; 0x68
 80007b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00b fb41 	bl	800be42 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <SystemClock_Config+0x100>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <SystemClock_Config+0x100>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <SystemClock_Config+0x100>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <SystemClock_Config+0x104>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <SystemClock_Config+0x104>)
 8000808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <SystemClock_Config+0x104>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081a:	2301      	movs	r3, #1
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 800082e:	2304      	movs	r3, #4
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000832:	23a8      	movs	r3, #168	; 0xa8
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000836:	2304      	movs	r3, #4
 8000838:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800083a:	2307      	movs	r3, #7
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800083e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fd92 	bl	800436c <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xa6>
		Error_Handler();
 800084e:	f000 fa5d 	bl	8000d0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2102      	movs	r1, #2
 800086e:	4618      	mov	r0, r3
 8000870:	f003 ffbe 	bl	80047f0 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xd2>
		Error_Handler();
 800087a:	f000 fa47 	bl	8000d0c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800087e:	2301      	movs	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000882:	23c8      	movs	r3, #200	; 0xc8
 8000884:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000886:	2305      	movs	r3, #5
 8000888:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	4618      	mov	r0, r3
 8000894:	f004 f9cc 	bl	8004c30 <HAL_RCCEx_PeriphCLKConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xf6>
		Error_Handler();
 800089e:	f000 fa35 	bl	8000d0c <Error_Handler>
	}
}
 80008a2:	bf00      	nop
 80008a4:	3768      	adds	r7, #104	; 0x68
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_I2C1_Init+0x54>)
 80008bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_I2C1_Init+0x58>)
 80008c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_I2C1_Init+0x50>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C1_Init+0x50>)
 80008f2:	f000 ff91 	bl	8001818 <HAL_I2C_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80008fc:	f000 fa06 	bl	8000d0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20004b18 	.word	0x20004b18
 8000908:	40005400 	.word	0x40005400
 800090c:	00061a80 	.word	0x00061a80

08000910 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2S2_Init+0x50>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_I2S2_Init+0x54>)
 8000918:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_I2S2_Init+0x50>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2S2_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_I2S2_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_I2S2_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_I2S2_Init+0x50>)
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_I2S2_Init+0x58>)
 8000938:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_I2S2_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_I2S2_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_I2S2_Init+0x50>)
 8000948:	2201      	movs	r2, #1
 800094a:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_I2S2_Init+0x50>)
 800094e:	f001 fee3 	bl	8002718 <HAL_I2S_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2S2_Init+0x4c>
		Error_Handler();
 8000958:	f000 f9d8 	bl	8000d0c <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20004bcc 	.word	0x20004bcc
 8000964:	40003800 	.word	0x40003800
 8000968:	00017700 	.word	0x00017700

0800096c <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <MX_I2S3_Init+0x58>)
 8000974:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_I2S3_Init+0x54>)
 800098c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000990:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_I2S3_Init+0x54>)
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <MX_I2S3_Init+0x5c>)
 8000996:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_I2S3_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_I2S3_Init+0x54>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_I2S3_Init+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_I2S3_Init+0x54>)
 80009ac:	f001 feb4 	bl	8002718 <HAL_I2S_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2S3_Init+0x4e>
		Error_Handler();
 80009b6:	f000 f9a9 	bl	8000d0c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20004c14 	.word	0x20004c14
 80009c4:	40003c00 	.word	0x40003c00
 80009c8:	00017700 	.word	0x00017700

080009cc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <MX_SPI1_Init+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009dc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI1_Init+0x64>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a00:	2218      	movs	r2, #24
 8000a02:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_SPI1_Init+0x64>)
 8000a1e:	f004 fa55 	bl	8004ecc <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000a28:	f000 f970 	bl	8000d0c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20004b74 	.word	0x20004b74
 8000a34:	40013000 	.word	0x40013000

08000a38 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4b60      	ldr	r3, [pc, #384]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a5f      	ldr	r2, [pc, #380]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b5d      	ldr	r3, [pc, #372]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b59      	ldr	r3, [pc, #356]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a58      	ldr	r2, [pc, #352]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a51      	ldr	r2, [pc, #324]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b48      	ldr	r3, [pc, #288]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a3c      	ldr	r2, [pc, #240]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_GPIO_Init+0x19c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2108      	movs	r1, #8
 8000afa:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000afc:	f000 fe72 	bl	80017e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000b00:	2201      	movs	r2, #1
 8000b02:	2101      	movs	r1, #1
 8000b04:	4835      	ldr	r0, [pc, #212]	; (8000bdc <MX_GPIO_Init+0x1a4>)
 8000b06:	f000 fe6d 	bl	80017e4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b10:	4833      	ldr	r0, [pc, #204]	; (8000be0 <MX_GPIO_Init+0x1a8>)
 8000b12:	f000 fe67 	bl	80017e4 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : DATA_Ready_Pin */
	GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000b16:	2304      	movs	r3, #4
 8000b18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000b2a:	f000 fcd9 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4824      	ldr	r0, [pc, #144]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000b46:	f000 fccb 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000b4a:	2332      	movs	r3, #50	; 0x32
 8000b4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <MX_GPIO_Init+0x1ac>)
 8000b50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0x1a0>)
 8000b5e:	f000 fcbf 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_GPIO_Init+0x1a4>)
 8000b7a:	f000 fcb1 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_GPIO_Init+0x1ac>)
 8000b84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4815      	ldr	r0, [pc, #84]	; (8000be8 <MX_GPIO_Init+0x1b0>)
 8000b92:	f000 fca5 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000b96:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0x1a8>)
 8000bb0:	f000 fc96 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_GPIO_Init+0x1a8>)
 8000bc8:	f000 fc8a 	bl	80014e0 <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020c00 	.word	0x40020c00
 8000be4:	10120000 	.word	0x10120000
 8000be8:	40020000 	.word	0x40020000

08000bec <StartMerjenjeNagiba>:
 * @brief  Function implementing the merjenjeNagiba thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMerjenjeNagiba */
void StartMerjenjeNagiba(void *argument) {
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000bf4:	f00a fbea 	bl	800b3cc <MX_USB_DEVICE_Init>
	__HAL_SPI_ENABLE(&hspi1);
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <StartMerjenjeNagiba+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <StartMerjenjeNagiba+0xd0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c06:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	482c      	ldr	r0, [pc, #176]	; (8000cc0 <StartMerjenjeNagiba+0xd4>)
 8000c0e:	f000 fde9 	bl	80017e4 <HAL_GPIO_WritePin>
	initL3GD20();
 8000c12:	f7ff fce7 	bl	80005e4 <initL3GD20>

	__HAL_I2C_ENABLE(&hi2c1);
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <StartMerjenjeNagiba+0xd8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <StartMerjenjeNagiba+0xd8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f042 0201 	orr.w	r2, r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
	initLSM303DLHC();
 8000c26:	f7ff fd41 	bl	80006ac <initLSM303DLHC>

	uint8_t meritev_size = 7;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	75fb      	strb	r3, [r7, #23]
	int16_t meritev[meritev_size];
 8000c2e:	7df8      	ldrb	r0, [r7, #23]
 8000c30:	4603      	mov	r3, r0
 8000c32:	3b01      	subs	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	b2c1      	uxtb	r1, r0
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	f04f 0400 	mov.w	r4, #0
 8000c44:	0114      	lsls	r4, r2, #4
 8000c46:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000c4a:	010b      	lsls	r3, r1, #4
 8000c4c:	b2c1      	uxtb	r1, r0
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	f04f 0300 	mov.w	r3, #0
 8000c56:	f04f 0400 	mov.w	r4, #0
 8000c5a:	0114      	lsls	r4, r2, #4
 8000c5c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000c60:	010b      	lsls	r3, r1, #4
 8000c62:	4603      	mov	r3, r0
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	3301      	adds	r3, #1
 8000c68:	3307      	adds	r3, #7
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c72:	466b      	mov	r3, sp
 8000c74:	3301      	adds	r3, #1
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
	meritev[0] = 0xaaab;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 8000c82:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		spi1_beriRegistre(0x28, (uint8_t*) &meritev[1], 6);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3302      	adds	r3, #2
 8000c88:	2206      	movs	r2, #6
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	2028      	movs	r0, #40	; 0x28
 8000c8e:	f7ff fc7d 	bl	800058c <spi1_beriRegistre>
		i2c1_beriRegistre(0x19, 0x28, (uint8_t*) &meritev[4], 6);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f103 0208 	add.w	r2, r3, #8
 8000c98:	2306      	movs	r3, #6
 8000c9a:	2128      	movs	r1, #40	; 0x28
 8000c9c:	2019      	movs	r0, #25
 8000c9e:	f7ff fcd7 	bl	8000650 <i2c1_beriRegistre>
		CDC_Transmit_FS((uint8_t*) &meritev, meritev_size * sizeof(int16_t));
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	4610      	mov	r0, r2
 8000cb0:	f00a fc4a 	bl	800b548 <CDC_Transmit_FS>
		osDelay(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f007 ff99 	bl	8008bec <osDelay>
		spi1_beriRegistre(0x28, (uint8_t*) &meritev[1], 6);
 8000cba:	e7e3      	b.n	8000c84 <StartMerjenjeNagiba+0x98>
 8000cbc:	20004b74 	.word	0x20004b74
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	20004b18 	.word	0x20004b18

08000cc8 <StartTrilateracija>:
 * @brief Function implementing the trilateracija thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTrilateracija */
void StartTrilateracija(void *argument) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTrilateracija */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000cd0:	2064      	movs	r0, #100	; 0x64
 8000cd2:	f007 ff8b 	bl	8008bec <osDelay>
 8000cd6:	e7fb      	b.n	8000cd0 <StartTrilateracija+0x8>

08000cd8 <StartPilotiranje>:
 * @brief Function implementing the pilotiranje thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPilotiranje */
void StartPilotiranje(void *argument) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartPilotiranje */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f007 ff83 	bl	8008bec <osDelay>
 8000ce6:	e7fb      	b.n	8000ce0 <StartPilotiranje+0x8>

08000ce8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000cfa:	f000 facd 	bl	8001298 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40014400 	.word	0x40014400

08000d0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_MspInit+0x54>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_MspInit+0x54>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_MspInit+0x54>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_MspInit+0x54>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_MspInit+0x54>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_MspInit+0x54>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	f06f 0001 	mvn.w	r0, #1
 8000d62:	f000 fb93 	bl	800148c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_I2C_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12c      	bne.n	8000df0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000db2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db8:	2312      	movs	r3, #18
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <HAL_I2C_MspInit+0x8c>)
 8000dd0:	f000 fb86 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_I2C_MspInit+0x88>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a59      	ldr	r2, [pc, #356]	; (8000f88 <HAL_I2S_MspInit+0x184>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d15b      	bne.n	8000ede <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
 8000e2a:	4b58      	ldr	r3, [pc, #352]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a57      	ldr	r2, [pc, #348]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b55      	ldr	r3, [pc, #340]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	623b      	str	r3, [r7, #32]
 8000e40:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	483e      	ldr	r0, [pc, #248]	; (8000f90 <HAL_I2S_MspInit+0x18c>)
 8000e96:	f000 fb23 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4836      	ldr	r0, [pc, #216]	; (8000f90 <HAL_I2S_MspInit+0x18c>)
 8000eb6:	f000 fb13 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000eba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	482f      	ldr	r0, [pc, #188]	; (8000f94 <HAL_I2S_MspInit+0x190>)
 8000ed8:	f000 fb02 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000edc:	e04f      	b.n	8000f7e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <HAL_I2S_MspInit+0x194>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d14a      	bne.n	8000f7e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_I2S_MspInit+0x188>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <HAL_I2S_MspInit+0x198>)
 8000f58:	f000 fac2 	bl	80014e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f5c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_I2S_MspInit+0x18c>)
 8000f7a:	f000 fab1 	bl	80014e0 <HAL_GPIO_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	3738      	adds	r7, #56	; 0x38
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40003800 	.word	0x40003800
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40003c00 	.word	0x40003c00
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12b      	bne.n	800101a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_SPI_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ffa:	23e0      	movs	r3, #224	; 0xe0
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100a:	2305      	movs	r3, #5
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <HAL_SPI_MspInit+0x8c>)
 8001016:	f000 fa63 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40013000 	.word	0x40013000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2019      	movs	r0, #25
 8001046:	f000 fa21 	bl	800148c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800104a:	2019      	movs	r0, #25
 800104c:	f000 fa3a 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_InitTick+0xa0>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_InitTick+0xa0>)
 800105a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105e:	6453      	str	r3, [r2, #68]	; 0x44
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_InitTick+0xa0>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800106c:	f107 0210 	add.w	r2, r7, #16
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fda8 	bl	8004bcc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800107c:	f003 fd92 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8001080:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <HAL_InitTick+0xa4>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	3b01      	subs	r3, #1
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_InitTick+0xa8>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <HAL_InitTick+0xac>)
 8001094:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_InitTick+0xa8>)
 8001098:	f240 32e7 	movw	r2, #999	; 0x3e7
 800109c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_InitTick+0xa8>)
 80010a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_InitTick+0xa8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_InitTick+0xa8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <HAL_InitTick+0xa8>)
 80010b2:	f004 fc5f 	bl	8005974 <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d104      	bne.n	80010c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <HAL_InitTick+0xa8>)
 80010be:	f004 fc8e 	bl	80059de <HAL_TIM_Base_Start_IT>
 80010c2:	4603      	mov	r3, r0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	431bde83 	.word	0x431bde83
 80010d8:	20004c5c 	.word	0x20004c5c
 80010dc:	40014400 	.word	0x40014400

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800111a:	f004 fc84 	bl	8005a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20004c5c 	.word	0x20004c5c

08001128 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <OTG_FS_IRQHandler+0x10>)
 800112e:	f002 f8e3 	bl	80032f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200051fc 	.word	0x200051fc

0800113c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x50>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x16>
		heap_end = &end;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <_sbrk+0x50>)
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <_sbrk+0x54>)
 8001150:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <_sbrk+0x50>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <_sbrk+0x50>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	466a      	mov	r2, sp
 8001162:	4293      	cmp	r3, r2
 8001164:	d907      	bls.n	8001176 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001166:	f00a fe27 	bl	800bdb8 <__errno>
 800116a:	4602      	mov	r2, r0
 800116c:	230c      	movs	r3, #12
 800116e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e006      	b.n	8001184 <_sbrk+0x48>
	}

	heap_end += incr;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <_sbrk+0x50>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a03      	ldr	r2, [pc, #12]	; (800118c <_sbrk+0x50>)
 8001180:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200001fc 	.word	0x200001fc
 8001190:	20005608 	.word	0x20005608

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <SystemInit+0x60>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <SystemInit+0x60>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <SystemInit+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <SystemInit+0x64>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <SystemInit+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <SystemInit+0x64>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <SystemInit+0x64>)
 80011c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <SystemInit+0x64>)
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <SystemInit+0x68>)
 80011ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <SystemInit+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <SystemInit+0x64>)
 80011d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SystemInit+0x60>)
 80011e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e8:	609a      	str	r2, [r3, #8]
#endif
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	40023800 	.word	0x40023800
 80011fc:	24003010 	.word	0x24003010

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001204:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001206:	e003      	b.n	8001210 <LoopCopyDataInit>

08001208 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800120a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800120c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800120e:	3104      	adds	r1, #4

08001210 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001214:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001216:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001218:	d3f6      	bcc.n	8001208 <CopyDataInit>
  ldr  r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800121c:	e002      	b.n	8001224 <LoopFillZerobss>

0800121e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800121e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001220:	f842 3b04 	str.w	r3, [r2], #4

08001224 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001228:	d3f9      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800122a:	f7ff ffb3 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f00a fdc9 	bl	800bdc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fa4d 	bl	80006d0 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800123c:	0800c094 	.word	0x0800c094
  ldr  r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001244:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001248:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800124c:	20005608 	.word	0x20005608

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f8fa 	bl	8001476 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fed4 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd48 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20004c9c 	.word	0x20004c9c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20004c9c 	.word	0x20004c9c

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_Delay+0x40>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000004 	.word	0x20000004

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff4c 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149e:	f7ff ff61 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f7ff ffb1 	bl	8001410 <NVIC_EncodePriority>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff80 	bl	80013bc <__NVIC_SetPriority>
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff54 	bl	8001380 <__NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e159      	b.n	80017b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8148 	bne.w	80017aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x4a>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b12      	cmp	r3, #18
 8001528:	d123      	bne.n	8001572 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	08da      	lsrs	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3208      	adds	r2, #8
 800156c:	69b9      	ldr	r1, [r7, #24]
 800156e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0203 	and.w	r2, r3, #3
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d00b      	beq.n	80015c6 <HAL_GPIO_Init+0xe6>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ba:	2b11      	cmp	r3, #17
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a2 	beq.w	80017aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_GPIO_Init+0x2e4>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <HAL_GPIO_Init+0x2e4>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_GPIO_Init+0x2e4>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <HAL_GPIO_Init+0x2e8>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a48      	ldr	r2, [pc, #288]	; (80017cc <HAL_GPIO_Init+0x2ec>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x202>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x1fe>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a46      	ldr	r2, [pc, #280]	; (80017d4 <HAL_GPIO_Init+0x2f4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x1fa>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <HAL_GPIO_Init+0x2f8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x1f6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HAL_GPIO_Init+0x2fc>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x1f2>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016e2:	2300      	movs	r3, #0
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f4:	4934      	ldr	r1, [pc, #208]	; (80017c8 <HAL_GPIO_Init+0x2e8>)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_GPIO_Init+0x300>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001726:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <HAL_GPIO_Init+0x300>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <HAL_GPIO_Init+0x300>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001750:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_GPIO_Init+0x300>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_GPIO_Init+0x300>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_GPIO_Init+0x300>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_GPIO_Init+0x300>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_GPIO_Init+0x300>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	f67f aea2 	bls.w	80014fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b8:	bf00      	nop
 80017ba:	3724      	adds	r7, #36	; 0x24
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	619a      	str	r2, [r3, #24]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e10f      	b.n	8001a4a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fa98 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2224      	movs	r2, #36	; 0x24
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800185c:	f003 f98e 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8001860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a7b      	ldr	r2, [pc, #492]	; (8001a54 <HAL_I2C_Init+0x23c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d807      	bhi.n	800187c <HAL_I2C_Init+0x64>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a7a      	ldr	r2, [pc, #488]	; (8001a58 <HAL_I2C_Init+0x240>)
 8001870:	4293      	cmp	r3, r2
 8001872:	bf94      	ite	ls
 8001874:	2301      	movls	r3, #1
 8001876:	2300      	movhi	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e006      	b.n	800188a <HAL_I2C_Init+0x72>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <HAL_I2C_Init+0x244>)
 8001880:	4293      	cmp	r3, r2
 8001882:	bf94      	ite	ls
 8001884:	2301      	movls	r3, #1
 8001886:	2300      	movhi	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0db      	b.n	8001a4a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4a72      	ldr	r2, [pc, #456]	; (8001a60 <HAL_I2C_Init+0x248>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9b      	lsrs	r3, r3, #18
 800189c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a64      	ldr	r2, [pc, #400]	; (8001a54 <HAL_I2C_Init+0x23c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d802      	bhi.n	80018cc <HAL_I2C_Init+0xb4>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	e009      	b.n	80018e0 <HAL_I2C_Init+0xc8>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	4a63      	ldr	r2, [pc, #396]	; (8001a64 <HAL_I2C_Init+0x24c>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	3301      	adds	r3, #1
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4956      	ldr	r1, [pc, #344]	; (8001a54 <HAL_I2C_Init+0x23c>)
 80018fc:	428b      	cmp	r3, r1
 80018fe:	d80d      	bhi.n	800191c <HAL_I2C_Init+0x104>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e59      	subs	r1, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fbb1 f3f3 	udiv	r3, r1, r3
 800190e:	3301      	adds	r3, #1
 8001910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001914:	2b04      	cmp	r3, #4
 8001916:	bf38      	it	cc
 8001918:	2304      	movcc	r3, #4
 800191a:	e04f      	b.n	80019bc <HAL_I2C_Init+0x1a4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_I2C_Init+0x130>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e012      	b.n	800196e <HAL_I2C_Init+0x156>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x15e>
 8001972:	2301      	movs	r3, #1
 8001974:	e022      	b.n	80019bc <HAL_I2C_Init+0x1a4>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10e      	bne.n	800199c <HAL_I2C_Init+0x184>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e58      	subs	r0, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Init+0x1a4>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6911      	ldr	r1, [r2, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	000186a0 	.word	0x000186a0
 8001a58:	001e847f 	.word	0x001e847f
 8001a5c:	003d08ff 	.word	0x003d08ff
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7ff fc1d 	bl	80012c0 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	f040 80d9 	bne.w	8001c48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	496d      	ldr	r1, [pc, #436]	; (8001c54 <HAL_I2C_Mem_Write+0x1ec>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fc5b 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0cc      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Mem_Write+0x56>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e0c5      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2221      	movs	r2, #33	; 0x21
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_I2C_Mem_Write+0x1f0>)
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b26:	88f8      	ldrh	r0, [r7, #6]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fab6 	bl	80020a8 <I2C_RequestMemoryWrite>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d052      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e081      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fcdc 	bl	8002508 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x180>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1aa      	bne.n	8001b46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fcc8 	bl	800258a <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e016      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c76:	f7ff fb23 	bl	80012c0 <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	f040 8208 	bne.w	800209a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2319      	movs	r3, #25
 8001c90:	2201      	movs	r2, #1
 8001c92:	497b      	ldr	r1, [pc, #492]	; (8001e80 <HAL_I2C_Mem_Read+0x224>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fb61 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e1fb      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x56>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e1f4      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d007      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2222      	movs	r2, #34	; 0x22
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a5b      	ldr	r2, [pc, #364]	; (8001e84 <HAL_I2C_Mem_Read+0x228>)
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1a:	88f8      	ldrh	r0, [r7, #6]
 8001d1c:	893a      	ldrh	r2, [r7, #8]
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fa46 	bl	80021bc <I2C_RequestMemoryRead>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1b0      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e184      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d11b      	bne.n	8001daa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e164      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d11b      	bne.n	8001dea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	e144      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e00:	e138      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	f200 80f1 	bhi.w	8001fee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d123      	bne.n	8001e5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fbf7 	bl	800260c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e139      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e5a:	e10b      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d14e      	bne.n	8001f02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <HAL_I2C_Mem_Read+0x22c>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fa74 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e10e      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f00:	e0b8      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4966      	ldr	r1, [pc, #408]	; (80020a4 <HAL_I2C_Mem_Read+0x448>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fa25 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0bf      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	2200      	movs	r2, #0
 8001f66:	494f      	ldr	r1, [pc, #316]	; (80020a4 <HAL_I2C_Mem_Read+0x448>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f9f7 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e091      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fec:	e042      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fb0a 	bl	800260c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e04c      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d118      	bne.n	8002074 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aec2 	bne.w	8001e02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	00010004 	.word	0x00010004

080020a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	460b      	mov	r3, r1
 80020bc:	813b      	strh	r3, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2200      	movs	r2, #0
 80020da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f93c 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e05f      	b.n	80021ae <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	492d      	ldr	r1, [pc, #180]	; (80021b8 <I2C_RequestMemoryWrite+0x110>)
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f980 	bl	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e04c      	b.n	80021ae <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	6a39      	ldr	r1, [r7, #32]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f9ea 	bl	8002508 <I2C_WaitOnTXEFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00d      	beq.n	8002156 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b04      	cmp	r3, #4
 8002140:	d107      	bne.n	8002152 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e02b      	b.n	80021ae <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800215c:	893b      	ldrh	r3, [r7, #8]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	e021      	b.n	80021ac <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002168:	893b      	ldrh	r3, [r7, #8]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	b29b      	uxth	r3, r3
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f9c4 	bl	8002508 <I2C_WaitOnTXEFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b04      	cmp	r3, #4
 800218c:	d107      	bne.n	800219e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e005      	b.n	80021ae <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021a2:	893b      	ldrh	r3, [r7, #8]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00010002 	.word	0x00010002

080021bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	817b      	strh	r3, [r7, #10]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8aa 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e09e      	b.n	8002350 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002212:	897b      	ldrh	r3, [r7, #10]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	494c      	ldr	r1, [pc, #304]	; (8002358 <I2C_RequestMemoryRead+0x19c>)
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 f8ee 	bl	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e08b      	b.n	8002350 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f958 	bl	8002508 <I2C_WaitOnTXEFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00d      	beq.n	800227a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b04      	cmp	r3, #4
 8002264:	d107      	bne.n	8002276 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06a      	b.n	8002350 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002280:	893b      	ldrh	r3, [r7, #8]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	e021      	b.n	80022d0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800228c:	893b      	ldrh	r3, [r7, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	b29b      	uxth	r3, r3
 8002292:	b2da      	uxtb	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229c:	6a39      	ldr	r1, [r7, #32]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f932 	bl	8002508 <I2C_WaitOnTXEFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00d      	beq.n	80022c6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d107      	bne.n	80022c2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e044      	b.n	8002350 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022c6:	893b      	ldrh	r3, [r7, #8]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	6a39      	ldr	r1, [r7, #32]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f917 	bl	8002508 <I2C_WaitOnTXEFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00d      	beq.n	80022fc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d107      	bne.n	80022f8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e029      	b.n	8002350 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2200      	movs	r2, #0
 8002314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f81f 	bl	800235c <I2C_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e013      	b.n	8002350 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002328:	897b      	ldrh	r3, [r7, #10]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	6a3a      	ldr	r2, [r7, #32]
 800233c:	4906      	ldr	r1, [pc, #24]	; (8002358 <I2C_RequestMemoryRead+0x19c>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f863 	bl	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010002 	.word	0x00010002

0800235c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800236c:	e025      	b.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d021      	beq.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002376:	f7fe ffa3 	bl	80012c0 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d302      	bcc.n	800238c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d116      	bne.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e023      	b.n	8002402 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10d      	bne.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4013      	ands	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	e00c      	b.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d0b6      	beq.n	800236e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002418:	e051      	b.n	80024be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002428:	d123      	bne.n	8002472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002438:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002442:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0204 	orr.w	r2, r3, #4
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e046      	b.n	8002500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d021      	beq.n	80024be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7fe ff21 	bl	80012c0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d116      	bne.n	80024be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f043 0220 	orr.w	r2, r3, #32
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e020      	b.n	8002500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10c      	bne.n	80024e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4013      	ands	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e00b      	b.n	80024fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d18d      	bne.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002514:	e02d      	b.n	8002572 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f8ce 	bl	80026b8 <I2C_IsAcknowledgeFailed>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e02d      	b.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d021      	beq.n	8002572 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7fe fec7 	bl	80012c0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d116      	bne.n	8002572 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e007      	b.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	d1ca      	bne.n	8002516 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002596:	e02d      	b.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f88d 	bl	80026b8 <I2C_IsAcknowledgeFailed>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e02d      	b.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d021      	beq.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b0:	f7fe fe86 	bl	80012c0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d302      	bcc.n	80025c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e007      	b.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d1ca      	bne.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002618:	e042      	b.n	80026a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d119      	bne.n	800265c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e029      	b.n	80026b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7fe fe30 	bl	80012c0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d302      	bcc.n	8002672 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e007      	b.n	80026b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d1b5      	bne.n	800261a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d11b      	bne.n	8002708 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e128      	b.n	800297c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a90      	ldr	r2, [pc, #576]	; (8002984 <HAL_I2S_Init+0x26c>)
 8002742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7fe fb5d 	bl	8000e04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002760:	f023 030f 	bic.w	r3, r3, #15
 8002764:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2202      	movs	r2, #2
 800276c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d060      	beq.n	8002838 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800277e:	2310      	movs	r3, #16
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e001      	b.n	8002788 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b20      	cmp	r3, #32
 800278e:	d802      	bhi.n	8002796 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002796:	2001      	movs	r0, #1
 8002798:	f002 fb3a 	bl	8004e10 <HAL_RCCEx_GetPeriphCLKFreq>
 800279c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a6:	d125      	bne.n	80027f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d010      	beq.n	80027d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	3305      	adds	r3, #5
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	e01f      	b.n	8002812 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	3305      	adds	r3, #5
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	e00e      	b.n	8002812 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	461a      	mov	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	3305      	adds	r3, #5
 8002810:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4a5c      	ldr	r2, [pc, #368]	; (8002988 <HAL_I2S_Init+0x270>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	e003      	b.n	8002840 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002838:	2302      	movs	r3, #2
 800283a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d902      	bls.n	800284c <HAL_I2S_Init+0x134>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	2bff      	cmp	r3, #255	; 0xff
 800284a:	d907      	bls.n	800285c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f043 0210 	orr.w	r2, r3, #16
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e08f      	b.n	800297c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	ea42 0103 	orr.w	r1, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	430a      	orrs	r2, r1
 800286e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800287a:	f023 030f 	bic.w	r3, r3, #15
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6851      	ldr	r1, [r2, #4]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6892      	ldr	r2, [r2, #8]
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68d2      	ldr	r2, [r2, #12]
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6992      	ldr	r2, [r2, #24]
 8002892:	430a      	orrs	r2, r1
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d161      	bne.n	800296c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a38      	ldr	r2, [pc, #224]	; (800298c <HAL_I2S_Init+0x274>)
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a37      	ldr	r2, [pc, #220]	; (8002990 <HAL_I2S_Init+0x278>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_I2S_Init+0x1a4>
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_I2S_Init+0x27c>)
 80028ba:	e001      	b.n	80028c0 <HAL_I2S_Init+0x1a8>
 80028bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	4932      	ldr	r1, [pc, #200]	; (8002990 <HAL_I2S_Init+0x278>)
 80028c8:	428a      	cmp	r2, r1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2S_Init+0x1b8>
 80028cc:	4a31      	ldr	r2, [pc, #196]	; (8002994 <HAL_I2S_Init+0x27c>)
 80028ce:	e001      	b.n	80028d4 <HAL_I2S_Init+0x1bc>
 80028d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028d8:	f023 030f 	bic.w	r3, r3, #15
 80028dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2b      	ldr	r2, [pc, #172]	; (8002990 <HAL_I2S_Init+0x278>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_I2S_Init+0x1d4>
 80028e8:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_I2S_Init+0x27c>)
 80028ea:	e001      	b.n	80028f0 <HAL_I2S_Init+0x1d8>
 80028ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f0:	2202      	movs	r2, #2
 80028f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a25      	ldr	r2, [pc, #148]	; (8002990 <HAL_I2S_Init+0x278>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_I2S_Init+0x1ea>
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_I2S_Init+0x27c>)
 8002900:	e001      	b.n	8002906 <HAL_I2S_Init+0x1ee>
 8002902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002912:	d003      	beq.n	800291c <HAL_I2S_Init+0x204>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800291c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	e001      	b.n	8002928 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	b299      	uxth	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800293e:	4303      	orrs	r3, r0
 8002940:	b29b      	uxth	r3, r3
 8002942:	430b      	orrs	r3, r1
 8002944:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002946:	4313      	orrs	r3, r2
 8002948:	b29a      	uxth	r2, r3
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	4313      	orrs	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002954:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_I2S_Init+0x278>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_I2S_Init+0x24c>
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_I2S_Init+0x27c>)
 8002962:	e001      	b.n	8002968 <HAL_I2S_Init+0x250>
 8002964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002968:	897a      	ldrh	r2, [r7, #10]
 800296a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	08002a8f 	.word	0x08002a8f
 8002988:	cccccccd 	.word	0xcccccccd
 800298c:	08002ba5 	.word	0x08002ba5
 8002990:	40003800 	.word	0x40003800
 8002994:	40003400 	.word	0x40003400

08002998 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c9a      	adds	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10e      	bne.n	8002a28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffb8 	bl	8002998 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	b292      	uxth	r2, r2
 8002a44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	1c9a      	adds	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10e      	bne.n	8002a86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff93 	bl	80029ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d13a      	bne.n	8002b20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d109      	bne.n	8002ac8 <I2S_IRQHandler+0x3a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d102      	bne.n	8002ac8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffb4 	bl	8002a30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d126      	bne.n	8002b20 <I2S_IRQHandler+0x92>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d11f      	bne.n	8002b20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff50 	bl	80029c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d136      	bne.n	8002b9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d109      	bne.n	8002b4a <I2S_IRQHandler+0xbc>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d102      	bne.n	8002b4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff45 	bl	80029d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d122      	bne.n	8002b9a <I2S_IRQHandler+0x10c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d11b      	bne.n	8002b9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff13 	bl	80029c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4aa2      	ldr	r2, [pc, #648]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bbe:	4ba2      	ldr	r3, [pc, #648]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bc0:	e001      	b.n	8002bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a9b      	ldr	r2, [pc, #620]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bdc:	4b9a      	ldr	r3, [pc, #616]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bde:	e001      	b.n	8002be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf0:	d004      	beq.n	8002bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 8099 	bne.w	8002d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f925 	bl	8002e60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f9c8 	bl	8002fc0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d13a      	bne.n	8002cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d035      	beq.n	8002cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7e      	ldr	r2, [pc, #504]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c4e:	4b7e      	ldr	r3, [pc, #504]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c50:	e001      	b.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4979      	ldr	r1, [pc, #484]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c5e:	428b      	cmp	r3, r1
 8002c60:	d101      	bne.n	8002c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c62:	4b79      	ldr	r3, [pc, #484]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c64:	e001      	b.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fe88 	bl	80029c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	f040 80be 	bne.w	8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80b8 	beq.w	8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a59      	ldr	r2, [pc, #356]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ce2:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ce4:	e001      	b.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4954      	ldr	r1, [pc, #336]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cf2:	428b      	cmp	r3, r1
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cf8:	e001      	b.n	8002cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f043 0204 	orr.w	r2, r3, #4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fe4a 	bl	80029c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d2c:	e084      	b.n	8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d107      	bne.n	8002d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8be 	bl	8002ec4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d107      	bne.n	8002d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8fd 	bl	8002f5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d12f      	bne.n	8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02a      	beq.n	8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2e      	ldr	r2, [pc, #184]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d92:	e001      	b.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4929      	ldr	r1, [pc, #164]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002da0:	428b      	cmp	r3, r1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002da6:	e001      	b.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002db0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f043 0202 	orr.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fdfa 	bl	80029c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d131      	bne.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02c      	beq.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dec:	e001      	b.n	8002df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4912      	ldr	r1, [pc, #72]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dfa:	428b      	cmp	r3, r1
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e00:	e001      	b.n	8002e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e0a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e1a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	f043 0204 	orr.w	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff fdc5 	bl	80029c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e36:	e000      	b.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e38:	bf00      	nop
}
 8002e3a:	bf00      	nop
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40003800 	.word	0x40003800
 8002e48:	40003400 	.word	0x40003400

08002e4c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c99      	adds	r1, r3, #2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6251      	str	r1, [r2, #36]	; 0x24
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d113      	bne.n	8002eba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ea0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ffc9 	bl	8002e4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	1c99      	adds	r1, r3, #2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ed6:	8819      	ldrh	r1, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <I2SEx_TxISR_I2SExt+0x90>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <I2SEx_TxISR_I2SExt+0x22>
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <I2SEx_TxISR_I2SExt+0x94>)
 8002ee4:	e001      	b.n	8002eea <I2SEx_TxISR_I2SExt+0x26>
 8002ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eea:	460a      	mov	r2, r1
 8002eec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d121      	bne.n	8002f4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <I2SEx_TxISR_I2SExt+0x90>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <I2SEx_TxISR_I2SExt+0x50>
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <I2SEx_TxISR_I2SExt+0x94>)
 8002f12:	e001      	b.n	8002f18 <I2SEx_TxISR_I2SExt+0x54>
 8002f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	490d      	ldr	r1, [pc, #52]	; (8002f54 <I2SEx_TxISR_I2SExt+0x90>)
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d101      	bne.n	8002f28 <I2SEx_TxISR_I2SExt+0x64>
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <I2SEx_TxISR_I2SExt+0x94>)
 8002f26:	e001      	b.n	8002f2c <I2SEx_TxISR_I2SExt+0x68>
 8002f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff81 	bl	8002e4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40003800 	.word	0x40003800
 8002f58:	40003400 	.word	0x40003400

08002f5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68d8      	ldr	r0, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	1c99      	adds	r1, r3, #2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f74:	b282      	uxth	r2, r0
 8002f76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d113      	bne.n	8002fb8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff4a 	bl	8002e4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	; (8003050 <I2SEx_RxISR_I2SExt+0x90>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <I2SEx_RxISR_I2SExt+0x16>
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <I2SEx_RxISR_I2SExt+0x94>)
 8002fd4:	e001      	b.n	8002fda <I2SEx_RxISR_I2SExt+0x1a>
 8002fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fda:	68d8      	ldr	r0, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	1c99      	adds	r1, r3, #2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fe6:	b282      	uxth	r2, r0
 8002fe8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d121      	bne.n	8003046 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <I2SEx_RxISR_I2SExt+0x90>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d101      	bne.n	8003010 <I2SEx_RxISR_I2SExt+0x50>
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <I2SEx_RxISR_I2SExt+0x94>)
 800300e:	e001      	b.n	8003014 <I2SEx_RxISR_I2SExt+0x54>
 8003010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	490d      	ldr	r1, [pc, #52]	; (8003050 <I2SEx_RxISR_I2SExt+0x90>)
 800301c:	428b      	cmp	r3, r1
 800301e:	d101      	bne.n	8003024 <I2SEx_RxISR_I2SExt+0x64>
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <I2SEx_RxISR_I2SExt+0x94>)
 8003022:	e001      	b.n	8003028 <I2SEx_RxISR_I2SExt+0x68>
 8003024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003028:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800302c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff03 	bl	8002e4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40003800 	.word	0x40003800
 8003054:	40003400 	.word	0x40003400

08003058 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	b08f      	sub	sp, #60	; 0x3c
 800305c:	af0a      	add	r7, sp, #40	; 0x28
 800305e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e10f      	b.n	800328a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f008 fb93 	bl	800b7b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2203      	movs	r2, #3
 800308e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 ff96 	bl	8005fda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	687e      	ldr	r6, [r7, #4]
 80030b6:	466d      	mov	r5, sp
 80030b8:	f106 0410 	add.w	r4, r6, #16
 80030bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030cc:	1d33      	adds	r3, r6, #4
 80030ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d0:	6838      	ldr	r0, [r7, #0]
 80030d2:	f002 fe6d 	bl	8005db0 <USB_CoreInit>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 ff84 	bl	8005ffc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e04a      	b.n	8003190 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	333d      	adds	r3, #61	; 0x3d
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	333c      	adds	r3, #60	; 0x3c
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	b298      	uxth	r0, r3
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	3342      	adds	r3, #66	; 0x42
 8003136:	4602      	mov	r2, r0
 8003138:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	333f      	adds	r3, #63	; 0x3f
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3344      	adds	r3, #68	; 0x44
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3348      	adds	r3, #72	; 0x48
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3350      	adds	r3, #80	; 0x50
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	3301      	adds	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d3af      	bcc.n	80030fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e044      	b.n	800322a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	3301      	adds	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d3b5      	bcc.n	80031a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	687e      	ldr	r6, [r7, #4]
 800323c:	466d      	mov	r5, sp
 800323e:	f106 0410 	add.w	r4, r6, #16
 8003242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800324e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003252:	1d33      	adds	r3, r6, #4
 8003254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f002 fefa 	bl	8006050 <USB_DevInit>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00d      	b.n	800328a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f003 feef 	bl	8007066 <USB_DevDisconnect>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003292 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_PCD_Start+0x1c>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e020      	b.n	80032f0 <HAL_PCD_Start+0x5e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d109      	bne.n	80032d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d005      	beq.n	80032d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fead 	bl	8007036 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f002 fe69 	bl	8005fb8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b08d      	sub	sp, #52	; 0x34
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 ff54 	bl	80071bc <USB_GetMode>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 838e 	bne.w	8003a38 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 feb8 	bl	8007096 <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8384 	beq.w	8003a36 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f003 feaf 	bl	8007096 <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f002 0202 	and.w	r2, r2, #2
 8003350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fe9d 	bl	8007096 <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003362:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003366:	d17b      	bne.n	8003460 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f003 fea3 	bl	80070bc <USB_ReadDevAllOutEpInterrupt>
 8003376:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003378:	e06f      	b.n	800345a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d064      	beq.n	800344e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fec8 	bl	8007124 <USB_ReadDevOutEPInterrupt>
 8003394:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00c      	beq.n	80033ba <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ac:	461a      	mov	r2, r3
 80033ae:	2301      	movs	r3, #1
 80033b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fe0d 	bl	8003fd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00c      	beq.n	80033de <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 ff0c 	bl	80041e4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	2308      	movs	r3, #8
 80033dc:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f4:	461a      	mov	r2, r3
 80033f6:	2310      	movs	r3, #16
 80033f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d108      	bne.n	800341e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003416:	461a      	mov	r2, r3
 8003418:	2101      	movs	r1, #1
 800341a:	f003 ff13 	bl	8007244 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342a:	461a      	mov	r2, r3
 800342c:	2320      	movs	r3, #32
 800342e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800344c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	3301      	adds	r3, #1
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d18c      	bne.n	800337a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f003 fe16 	bl	8007096 <USB_ReadInterrupts>
 800346a:	4603      	mov	r3, r0
 800346c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003470:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003474:	f040 80c4 	bne.w	8003600 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f003 fe37 	bl	80070f0 <USB_ReadDevAllInEpInterrupt>
 8003482:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003488:	e0b6      	b.n	80035f8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80ab 	beq.w	80035ec <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 fe5d 	bl	8007160 <USB_ReadDevInEPInterrupt>
 80034a6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d05b      	beq.n	800356a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	2201      	movs	r2, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69f9      	ldr	r1, [r7, #28]
 80034ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034d2:	4013      	ands	r3, r2
 80034d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e2:	461a      	mov	r2, r3
 80034e4:	2301      	movs	r3, #1
 80034e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d11b      	bne.n	8003528 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3348      	adds	r3, #72	; 0x48
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4403      	add	r3, r0
 8003510:	3344      	adds	r3, #68	; 0x44
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4419      	add	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4403      	add	r3, r0
 8003524:	3348      	adds	r3, #72	; 0x48
 8003526:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f008 f9cd 	bl	800b8ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d116      	bne.n	800356a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d113      	bne.n	800356a <HAL_PCD_IRQHandler+0x272>
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3350      	adds	r3, #80	; 0x50
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d108      	bne.n	800356a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003562:	461a      	mov	r2, r3
 8003564:	2101      	movs	r1, #1
 8003566:	f003 fe6d 	bl	8007244 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	461a      	mov	r2, r3
 8003582:	2308      	movs	r3, #8
 8003584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	461a      	mov	r2, r3
 800359e:	2310      	movs	r3, #16
 80035a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	461a      	mov	r2, r3
 80035ba:	2340      	movs	r3, #64	; 0x40
 80035bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2302      	movs	r3, #2
 80035d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fc67 	bl	8003eba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	3301      	adds	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f af45 	bne.w	800348a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f003 fd46 	bl	8007096 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003614:	d122      	bne.n	800365c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800363c:	2100      	movs	r1, #0
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fe88 	bl	8004354 <HAL_PCDEx_LPM_Callback>
 8003644:	e002      	b.n	800364c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f008 f9ae 	bl	800b9a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800365a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f003 fd18 	bl	8007096 <USB_ReadInterrupts>
 8003666:	4603      	mov	r3, r0
 8003668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003670:	d112      	bne.n	8003698 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f008 f96a 	bl	800b95c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003696:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f003 fcfa 	bl	8007096 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ac:	f040 80a7 	bne.w	80037fe <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2110      	movs	r1, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f002 fe32 	bl	8006334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	2300      	movs	r3, #0
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d4:	e036      	b.n	8003744 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e2:	461a      	mov	r2, r3
 80036e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	461a      	mov	r2, r3
 8003718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800371c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372e:	0151      	lsls	r1, r2, #5
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	440a      	add	r2, r1
 8003734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800373c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	3301      	adds	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374a:	429a      	cmp	r2, r3
 800374c:	d3c3      	bcc.n	80036d6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800375c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003760:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377a:	f043 030b 	orr.w	r3, r3, #11
 800377e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003790:	f043 030b 	orr.w	r3, r3, #11
 8003794:	6453      	str	r3, [r2, #68]	; 0x44
 8003796:	e015      	b.n	80037c4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037be:	f043 030b 	orr.w	r3, r3, #11
 80037c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037e8:	461a      	mov	r2, r3
 80037ea:	f003 fd2b 	bl	8007244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f003 fc47 	bl	8007096 <USB_ReadInterrupts>
 8003808:	4603      	mov	r3, r0
 800380a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003812:	d124      	bne.n	800385e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f003 fcdd 	bl	80071d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f002 fde7 	bl	80063f6 <USB_GetDevSpeed>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681c      	ldr	r4, [r3, #0]
 8003834:	f001 f996 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8003838:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	4620      	mov	r0, r4
 8003844:	f002 fb16 	bl	8005e74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f008 f868 	bl	800b91e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800385c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f003 fc17 	bl	8007096 <USB_ReadInterrupts>
 8003868:	4603      	mov	r3, r0
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	d161      	bne.n	8003936 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0210 	bic.w	r2, r2, #16
 8003880:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f003 020f 	and.w	r2, r3, #15
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	3304      	adds	r3, #4
 80038a0:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	0c5b      	lsrs	r3, r3, #17
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d124      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d035      	beq.n	8003926 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	6a38      	ldr	r0, [r7, #32]
 80038ce:	f003 fa8f 	bl	8006df0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038de:	441a      	add	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f0:	441a      	add	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	619a      	str	r2, [r3, #24]
 80038f6:	e016      	b.n	8003926 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	0c5b      	lsrs	r3, r3, #17
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	2b06      	cmp	r3, #6
 8003902:	d110      	bne.n	8003926 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800390a:	2208      	movs	r2, #8
 800390c:	4619      	mov	r1, r3
 800390e:	6a38      	ldr	r0, [r7, #32]
 8003910:	f003 fa6e 	bl	8006df0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003920:	441a      	add	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0210 	orr.w	r2, r2, #16
 8003934:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f003 fbab 	bl	8007096 <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d10a      	bne.n	8003960 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f007 ffd9 	bl	800b902 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f002 0208 	and.w	r2, r2, #8
 800395e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f003 fb96 	bl	8007096 <USB_ReadInterrupts>
 800396a:	4603      	mov	r3, r0
 800396c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003974:	d10f      	bne.n	8003996 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f008 f831 	bl	800b9e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f003 fb7b 	bl	8007096 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039aa:	d10f      	bne.n	80039cc <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f008 f804 	bl	800b9c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fb60 	bl	8007096 <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d10a      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f008 f812 	bl	800ba0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fb4a 	bl	8007096 <USB_ReadInterrupts>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d115      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f008 f802 	bl	800ba28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	e000      	b.n	8003a38 <HAL_PCD_IRQHandler+0x740>
      return;
 8003a36:	bf00      	nop
    }
  }
}
 8003a38:	3734      	adds	r7, #52	; 0x34
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd90      	pop	{r4, r7, pc}

08003a3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_PCD_SetAddress+0x1a>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e013      	b.n	8003a80 <HAL_PCD_SetAddress+0x42>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 faba 	bl	8006fea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	70fb      	strb	r3, [r7, #3]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	803b      	strh	r3, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da0f      	bge.n	8003ace <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	3338      	adds	r3, #56	; 0x38
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	705a      	strb	r2, [r3, #1]
 8003acc:	e00f      	b.n	8003aee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003afa:	883a      	ldrh	r2, [r7, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	78ba      	ldrb	r2, [r7, #2]
 8003b04:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b18:	78bb      	ldrb	r3, [r7, #2]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d102      	bne.n	8003b24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_PCD_EP_Open+0xaa>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e00e      	b.n	8003b50 <HAL_PCD_EP_Open+0xc8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 fc7d 	bl	8006440 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da0f      	bge.n	8003b8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	3338      	adds	r3, #56	; 0x38
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	705a      	strb	r2, [r3, #1]
 8003b8a:	e00f      	b.n	8003bac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 020f 	and.w	r2, r3, #15
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_PCD_EP_Close+0x6e>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e00e      	b.n	8003be4 <HAL_PCD_EP_Close+0x8c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f002 fcbb 	bl	8006550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
 8003bfe:	f003 020f 	and.w	r2, r3, #15
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	3304      	adds	r3, #4
 8003c14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d102      	bne.n	8003c48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c48:	7afb      	ldrb	r3, [r7, #11]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6979      	ldr	r1, [r7, #20]
 8003c60:	f002 ff3e 	bl	8006ae0 <USB_EP0StartXfer>
 8003c64:	e008      	b.n	8003c78 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6979      	ldr	r1, [r7, #20]
 8003c74:	f002 fcf0 	bl	8006658 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ca4:	681b      	ldr	r3, [r3, #0]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	3338      	adds	r3, #56	; 0x38
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	6979      	ldr	r1, [r7, #20]
 8003d24:	f002 fedc 	bl	8006ae0 <USB_EP0StartXfer>
 8003d28:	e008      	b.n	8003d3c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6979      	ldr	r1, [r7, #20]
 8003d38:	f002 fc8e 	bl	8006658 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	f003 020f 	and.w	r2, r3, #15
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d901      	bls.n	8003d64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e050      	b.n	8003e06 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	da0f      	bge.n	8003d8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	f003 020f 	and.w	r2, r3, #15
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	3338      	adds	r3, #56	; 0x38
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	3304      	adds	r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	705a      	strb	r2, [r3, #1]
 8003d8a:	e00d      	b.n	8003da8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3304      	adds	r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_PCD_EP_SetStall+0x82>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e01e      	b.n	8003e06 <HAL_PCD_EP_SetStall+0xc0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68f9      	ldr	r1, [r7, #12]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f003 f833 	bl	8006e42 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	b2d9      	uxtb	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003df6:	461a      	mov	r2, r3
 8003df8:	f003 fa24 	bl	8007244 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d901      	bls.n	8003e2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e042      	b.n	8003eb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da0f      	bge.n	8003e54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	3338      	adds	r3, #56	; 0x38
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4413      	add	r3, r2
 8003e48:	3304      	adds	r3, #4
 8003e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	705a      	strb	r2, [r3, #1]
 8003e52:	e00f      	b.n	8003e74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 020f 	and.w	r2, r3, #15
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_PCD_EP_ClrStall+0x86>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e00e      	b.n	8003eb2 <HAL_PCD_EP_ClrStall+0xa4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f003 f83b 	bl	8006f1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b08a      	sub	sp, #40	; 0x28
 8003ebe:	af02      	add	r7, sp, #8
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	3338      	adds	r3, #56	; 0x38
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	3304      	adds	r3, #4
 8003ee0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d901      	bls.n	8003ef2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06c      	b.n	8003fcc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d902      	bls.n	8003f0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	3303      	adds	r3, #3
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f16:	e02b      	b.n	8003f70 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d902      	bls.n	8003f34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	3303      	adds	r3, #3
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	68d9      	ldr	r1, [r3, #12]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4603      	mov	r3, r0
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f002 ff17 	bl	8006d86 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d809      	bhi.n	8003f9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d203      	bcs.n	8003f9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1be      	bne.n	8003f18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d811      	bhi.n	8003fca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	2201      	movs	r2, #1
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	6939      	ldr	r1, [r7, #16]
 8003fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	333c      	adds	r3, #60	; 0x3c
 8003fec:	3304      	adds	r3, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b01      	cmp	r3, #1
 8004008:	f040 80b3 	bne.w	8004172 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d028      	beq.n	8004068 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a70      	ldr	r2, [pc, #448]	; (80041dc <PCD_EP_OutXfrComplete_int+0x208>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d90e      	bls.n	800403c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	461a      	mov	r2, r3
 8004036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f007 fc19 	bl	800b874 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800404c:	461a      	mov	r2, r3
 800404e:	2101      	movs	r1, #1
 8004050:	f003 f8f8 	bl	8007244 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	2308      	movs	r3, #8
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	e0b3      	b.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	2320      	movs	r3, #32
 8004082:	6093      	str	r3, [r2, #8]
 8004084:	e0a4      	b.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 809f 	bne.w	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a51      	ldr	r2, [pc, #324]	; (80041dc <PCD_EP_OutXfrComplete_int+0x208>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d90f      	bls.n	80040ba <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b0:	461a      	mov	r2, r3
 80040b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b6:	6093      	str	r3, [r2, #8]
 80040b8:	e08a      	b.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040cc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	0159      	lsls	r1, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	440b      	add	r3, r1
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040e0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4403      	add	r3, r0
 80040f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040f4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004108:	6819      	ldr	r1, [r3, #0]
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4403      	add	r3, r0
 8004118:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4419      	add	r1, r3
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4403      	add	r3, r0
 800412e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004132:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f007 fbac 	bl	800b898 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d144      	bne.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d138      	bne.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004168:	461a      	mov	r2, r3
 800416a:	2101      	movs	r1, #1
 800416c:	f003 f86a 	bl	8007244 <USB_EP0_OutStart>
 8004170:	e02e      	b.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a1a      	ldr	r2, [pc, #104]	; (80041e0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d124      	bne.n	80041c4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	461a      	mov	r2, r3
 8004192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004196:	6093      	str	r3, [r2, #8]
 8004198:	e01a      	b.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b0:	461a      	mov	r2, r3
 80041b2:	2320      	movs	r3, #32
 80041b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f007 fb6b 	bl	800b898 <HAL_PCD_DataOutStageCallback>
 80041c2:	e005      	b.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f007 fb64 	bl	800b898 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	4f54300a 	.word	0x4f54300a
 80041e0:	4f54310a 	.word	0x4f54310a

080041e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	333c      	adds	r3, #60	; 0x3c
 80041fc:	3304      	adds	r3, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d113      	bne.n	8004242 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <PCD_EP_OutSetupPacket_int+0xb8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d922      	bls.n	8004268 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01d      	beq.n	8004268 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	461a      	mov	r2, r3
 800423a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423e:	6093      	str	r3, [r2, #8]
 8004240:	e012      	b.n	8004268 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10e      	bne.n	8004268 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	461a      	mov	r2, r3
 8004262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004266:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f007 fb03 	bl	800b874 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a0a      	ldr	r2, [pc, #40]	; (800429c <PCD_EP_OutSetupPacket_int+0xb8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d90c      	bls.n	8004290 <PCD_EP_OutSetupPacket_int+0xac>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d108      	bne.n	8004290 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004288:	461a      	mov	r2, r3
 800428a:	2101      	movs	r1, #1
 800428c:	f002 ffda 	bl	8007244 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	4f54300a 	.word	0x4f54300a
 80042a0:	4f54310a 	.word	0x4f54310a

080042a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
 80042b0:	4613      	mov	r3, r2
 80042b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042c2:	883b      	ldrh	r3, [r7, #0]
 80042c4:	0419      	lsls	r1, r3, #16
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
 80042d0:	e028      	b.n	8004324 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4413      	add	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	e00d      	b.n	8004302 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	3340      	adds	r3, #64	; 0x40
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4413      	add	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	3301      	adds	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	3b01      	subs	r3, #1
 8004308:	429a      	cmp	r2, r3
 800430a:	d3ec      	bcc.n	80042e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800430c:	883b      	ldrh	r3, [r7, #0]
 800430e:	0418      	lsls	r0, r3, #16
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	3b01      	subs	r3, #1
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	4302      	orrs	r2, r0
 800431c:	3340      	adds	r3, #64	; 0x40
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e22d      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d075      	beq.n	8004476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438a:	4ba3      	ldr	r3, [pc, #652]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b04      	cmp	r3, #4
 8004394:	d00c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004396:	4ba0      	ldr	r3, [pc, #640]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d112      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a2:	4b9d      	ldr	r3, [pc, #628]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	4b99      	ldr	r3, [pc, #612]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05b      	beq.n	8004474 <HAL_RCC_OscConfig+0x108>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d157      	bne.n	8004474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e208      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d106      	bne.n	80043e0 <HAL_RCC_OscConfig+0x74>
 80043d2:	4b91      	ldr	r3, [pc, #580]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a90      	ldr	r2, [pc, #576]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e01d      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0x98>
 80043ea:	4b8b      	ldr	r3, [pc, #556]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a8a      	ldr	r2, [pc, #552]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a87      	ldr	r2, [pc, #540]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 8004404:	4b84      	ldr	r3, [pc, #528]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a83      	ldr	r2, [pc, #524]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800440a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b81      	ldr	r3, [pc, #516]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a80      	ldr	r2, [pc, #512]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fc ff4c 	bl	80012c0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800442c:	f7fc ff48 	bl	80012c0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1cd      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b76      	ldr	r3, [pc, #472]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0xc0>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fc ff38 	bl	80012c0 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fc ff34 	bl	80012c0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1b9      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0xe8>
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d063      	beq.n	800454a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b62      	ldr	r3, [pc, #392]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004496:	2b08      	cmp	r3, #8
 8004498:	d11c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d116      	bne.n	80044d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_RCC_OscConfig+0x152>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e18d      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4952      	ldr	r1, [pc, #328]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	e03a      	b.n	800454a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <HAL_RCC_OscConfig+0x2b0>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fc feed 	bl	80012c0 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ea:	f7fc fee9 	bl	80012c0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e16e      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fc:	4b46      	ldr	r3, [pc, #280]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004508:	4b43      	ldr	r3, [pc, #268]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4940      	ldr	r1, [pc, #256]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
 800451c:	e015      	b.n	800454a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_OscConfig+0x2b0>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fc fecc 	bl	80012c0 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452c:	f7fc fec8 	bl	80012c0 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e14d      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d030      	beq.n	80045b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d016      	beq.n	800458c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_RCC_OscConfig+0x2b4>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fc feac 	bl	80012c0 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456c:	f7fc fea8 	bl	80012c0 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e12d      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457e:	4b26      	ldr	r3, [pc, #152]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x200>
 800458a:	e015      	b.n	80045b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458c:	4b24      	ldr	r3, [pc, #144]	; (8004620 <HAL_RCC_OscConfig+0x2b4>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fc fe95 	bl	80012c0 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459a:	f7fc fe91 	bl	80012c0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e116      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a0 	beq.w	8004706 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x2b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d121      	bne.n	8004646 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <HAL_RCC_OscConfig+0x2b8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a07      	ldr	r2, [pc, #28]	; (8004624 <HAL_RCC_OscConfig+0x2b8>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fc fe57 	bl	80012c0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e011      	b.n	800463a <HAL_RCC_OscConfig+0x2ce>
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	42470000 	.word	0x42470000
 8004620:	42470e80 	.word	0x42470e80
 8004624:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fc fe4a 	bl	80012c0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0cf      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b6a      	ldr	r3, [pc, #424]	; (80047e4 <HAL_RCC_OscConfig+0x478>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x2f0>
 800464e:	4b66      	ldr	r3, [pc, #408]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a65      	ldr	r2, [pc, #404]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	e01c      	b.n	8004696 <HAL_RCC_OscConfig+0x32a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b05      	cmp	r3, #5
 8004662:	d10c      	bne.n	800467e <HAL_RCC_OscConfig+0x312>
 8004664:	4b60      	ldr	r3, [pc, #384]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a5f      	ldr	r2, [pc, #380]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 800466a:	f043 0304 	orr.w	r3, r3, #4
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	4b5d      	ldr	r3, [pc, #372]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a5c      	ldr	r2, [pc, #368]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
 800467c:	e00b      	b.n	8004696 <HAL_RCC_OscConfig+0x32a>
 800467e:	4b5a      	ldr	r3, [pc, #360]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a59      	ldr	r2, [pc, #356]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
 800468a:	4b57      	ldr	r3, [pc, #348]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a56      	ldr	r2, [pc, #344]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d015      	beq.n	80046ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fc fe0f 	bl	80012c0 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fc fe0b 	bl	80012c0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e08e      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ee      	beq.n	80046a6 <HAL_RCC_OscConfig+0x33a>
 80046c8:	e014      	b.n	80046f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7fc fdf9 	bl	80012c0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fc fdf5 	bl	80012c0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e078      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e8:	4b3f      	ldr	r3, [pc, #252]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ee      	bne.n	80046d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d105      	bne.n	8004706 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fa:	4b3b      	ldr	r3, [pc, #236]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4a3a      	ldr	r2, [pc, #232]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d064      	beq.n	80047d8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800470e:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b08      	cmp	r3, #8
 8004718:	d05c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d141      	bne.n	80047a6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b32      	ldr	r3, [pc, #200]	; (80047ec <HAL_RCC_OscConfig+0x480>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fc fdca 	bl	80012c0 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004730:	f7fc fdc6 	bl	80012c0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e04b      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	491d      	ldr	r1, [pc, #116]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_RCC_OscConfig+0x480>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fc fd9f 	bl	80012c0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fc fd9b 	bl	80012c0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e020      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x41a>
 80047a4:	e018      	b.n	80047d8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_RCC_OscConfig+0x480>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc fd88 	bl	80012c0 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fc fd84 	bl	80012c0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e009      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_RCC_OscConfig+0x47c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x448>
 80047d2:	e001      	b.n	80047d8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40007000 	.word	0x40007000
 80047e8:	40023800 	.word	0x40023800
 80047ec:	42470060 	.word	0x42470060

080047f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0ca      	b.n	800499a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004804:	4b67      	ldr	r3, [pc, #412]	; (80049a4 <HAL_RCC_ClockConfig+0x1b4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d90c      	bls.n	800482c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b64      	ldr	r3, [pc, #400]	; (80049a4 <HAL_RCC_ClockConfig+0x1b4>)
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <HAL_RCC_ClockConfig+0x1b4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0b6      	b.n	800499a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a57      	ldr	r2, [pc, #348]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 800484a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800484e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800485c:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b4f      	ldr	r3, [pc, #316]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	494c      	ldr	r1, [pc, #304]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d044      	beq.n	8004910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d119      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e07d      	b.n	800499a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ae:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06d      	b.n	800499a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048be:	4b3a      	ldr	r3, [pc, #232]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e065      	b.n	800499a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 0203 	bic.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4933      	ldr	r1, [pc, #204]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e0:	f7fc fcee 	bl	80012c0 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fc fcea 	bl	80012c0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e04d      	b.n	800499a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 020c 	and.w	r2, r3, #12
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d1eb      	bne.n	80048e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCC_ClockConfig+0x1b4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d20c      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_RCC_ClockConfig+0x1b4>)
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <HAL_RCC_ClockConfig+0x1b4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e030      	b.n	800499a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4915      	ldr	r1, [pc, #84]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	490d      	ldr	r1, [pc, #52]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004976:	f000 f81d 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 800497a:	4601      	mov	r1, r0
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	5cd3      	ldrb	r3, [r2, r3]
 800498a:	fa21 f303 	lsr.w	r3, r1, r3
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004992:	2000      	movs	r0, #0
 8004994:	f7fc fb4c 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023c00 	.word	0x40023c00
 80049a8:	40023800 	.word	0x40023800
 80049ac:	0800c06c 	.word	0x0800c06c
 80049b0:	20000000 	.word	0x20000000

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	2300      	movs	r3, #0
 80049c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ca:	4b63      	ldr	r3, [pc, #396]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d007      	beq.n	80049e6 <HAL_RCC_GetSysClockFreq+0x32>
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d008      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x38>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 80b4 	bne.w	8004b48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049e0:	4b5e      	ldr	r3, [pc, #376]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049e2:	60bb      	str	r3, [r7, #8]
       break;
 80049e4:	e0b3      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049e6:	4b5e      	ldr	r3, [pc, #376]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80049e8:	60bb      	str	r3, [r7, #8]
      break;
 80049ea:	e0b0      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ec:	4b5a      	ldr	r3, [pc, #360]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f6:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04a      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a02:	4b55      	ldr	r3, [pc, #340]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	099b      	lsrs	r3, r3, #6
 8004a08:	f04f 0400 	mov.w	r4, #0
 8004a0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	ea03 0501 	and.w	r5, r3, r1
 8004a18:	ea04 0602 	and.w	r6, r4, r2
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4632      	mov	r2, r6
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	f04f 0400 	mov.w	r4, #0
 8004a28:	0154      	lsls	r4, r2, #5
 8004a2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a2e:	014b      	lsls	r3, r1, #5
 8004a30:	4619      	mov	r1, r3
 8004a32:	4622      	mov	r2, r4
 8004a34:	1b49      	subs	r1, r1, r5
 8004a36:	eb62 0206 	sbc.w	r2, r2, r6
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f04f 0400 	mov.w	r4, #0
 8004a42:	0194      	lsls	r4, r2, #6
 8004a44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a48:	018b      	lsls	r3, r1, #6
 8004a4a:	1a5b      	subs	r3, r3, r1
 8004a4c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a50:	f04f 0100 	mov.w	r1, #0
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	00e2      	lsls	r2, r4, #3
 8004a5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a5e:	00d9      	lsls	r1, r3, #3
 8004a60:	460b      	mov	r3, r1
 8004a62:	4614      	mov	r4, r2
 8004a64:	195b      	adds	r3, r3, r5
 8004a66:	eb44 0406 	adc.w	r4, r4, r6
 8004a6a:	f04f 0100 	mov.w	r1, #0
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	0262      	lsls	r2, r4, #9
 8004a74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a78:	0259      	lsls	r1, r3, #9
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	4621      	mov	r1, r4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f04f 0400 	mov.w	r4, #0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	f7fb fba8 	bl	80001e0 <__aeabi_uldivmod>
 8004a90:	4603      	mov	r3, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e049      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a98:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	f04f 0400 	mov.w	r4, #0
 8004aa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	ea03 0501 	and.w	r5, r3, r1
 8004aae:	ea04 0602 	and.w	r6, r4, r2
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	0154      	lsls	r4, r2, #5
 8004ac0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ac4:	014b      	lsls	r3, r1, #5
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4622      	mov	r2, r4
 8004aca:	1b49      	subs	r1, r1, r5
 8004acc:	eb62 0206 	sbc.w	r2, r2, r6
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	f04f 0400 	mov.w	r4, #0
 8004ad8:	0194      	lsls	r4, r2, #6
 8004ada:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ade:	018b      	lsls	r3, r1, #6
 8004ae0:	1a5b      	subs	r3, r3, r1
 8004ae2:	eb64 0402 	sbc.w	r4, r4, r2
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	00e2      	lsls	r2, r4, #3
 8004af0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004af4:	00d9      	lsls	r1, r3, #3
 8004af6:	460b      	mov	r3, r1
 8004af8:	4614      	mov	r4, r2
 8004afa:	195b      	adds	r3, r3, r5
 8004afc:	eb44 0406 	adc.w	r4, r4, r6
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	02a2      	lsls	r2, r4, #10
 8004b0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b0e:	0299      	lsls	r1, r3, #10
 8004b10:	460b      	mov	r3, r1
 8004b12:	4614      	mov	r4, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	4621      	mov	r1, r4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f04f 0400 	mov.w	r4, #0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4623      	mov	r3, r4
 8004b22:	f7fb fb5d 	bl	80001e0 <__aeabi_uldivmod>
 8004b26:	4603      	mov	r3, r0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	3301      	adds	r3, #1
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	60bb      	str	r3, [r7, #8]
      break;
 8004b46:	e002      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b4a:	60bb      	str	r3, [r7, #8]
      break;
 8004b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	007a1200 	.word	0x007a1200

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000000 	.word	0x20000000

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff fff0 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b84:	4601      	mov	r1, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a9b      	lsrs	r3, r3, #10
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4a03      	ldr	r2, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5cd3      	ldrb	r3, [r2, r3]
 8004b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800c07c 	.word	0x0800c07c

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffdc 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004bac:	4601      	mov	r1, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0b5b      	lsrs	r3, r3, #13
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4a03      	ldr	r2, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5cd3      	ldrb	r3, [r2, r3]
 8004bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	0800c07c 	.word	0x0800c07c

08004bcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	220f      	movs	r2, #15
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCC_GetClockConfig+0x60>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40023c00 	.word	0x40023c00

08004c30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d038      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c58:	4b68      	ldr	r3, [pc, #416]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc fb2f 	bl	80012c0 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f7fc fb2b 	bl	80012c0 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0bd      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c78:	4b61      	ldr	r3, [pc, #388]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	495a      	ldr	r1, [pc, #360]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c9e:	4b57      	ldr	r3, [pc, #348]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fc fb0c 	bl	80012c0 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cac:	f7fc fb08 	bl	80012c0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e09a      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cbe:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8083 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	4a47      	ldr	r2, [pc, #284]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce8:	4b45      	ldr	r3, [pc, #276]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cf4:	4b43      	ldr	r3, [pc, #268]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a42      	ldr	r2, [pc, #264]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d00:	f7fc fade 	bl	80012c0 <HAL_GetTick>
 8004d04:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fc fada 	bl	80012c0 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e06c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02f      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d028      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d44:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d4e:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d54:	4b2c      	ldr	r3, [pc, #176]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d5a:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d114      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fc faa8 	bl	80012c0 <HAL_GetTick>
 8004d70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fc faa4 	bl	80012c0 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e034      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ee      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da2:	d10d      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004da4:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	4911      	ldr	r1, [pc, #68]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a0e      	ldr	r2, [pc, #56]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dca:	6093      	str	r3, [r2, #8]
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd8:	4909      	ldr	r1, [pc, #36]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7d1a      	ldrb	r2, [r3, #20]
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004df0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	42470068 	.word	0x42470068
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40007000 	.word	0x40007000
 8004e08:	42470e40 	.word	0x42470e40
 8004e0c:	424711e0 	.word	0x424711e0

08004e10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d13f      	bne.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e2e:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e36:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d131      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e44:	617b      	str	r3, [r7, #20]
          break;
 8004e46:	e031      	b.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e54:	d109      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e56:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	e008      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e82:	099b      	lsrs	r3, r3, #6
 8004e84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e96:	0f1b      	lsrs	r3, r3, #28
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	617b      	str	r3, [r7, #20]
          break;
 8004ea4:	e002      	b.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
          break;
 8004eaa:	bf00      	nop
        }
      }
      break;
 8004eac:	bf00      	nop
    }
  }
  return frequency;
 8004eae:	697b      	ldr	r3, [r7, #20]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	00bb8000 	.word	0x00bb8000
 8004ec4:	007a1200 	.word	0x007a1200
 8004ec8:	00f42400 	.word	0x00f42400

08004ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e056      	b.n	8004f8c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fc f851 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	ea42 0103 	orr.w	r1, r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	f003 0104 	and.w	r1, r3, #4
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_SPI_Transmit+0x22>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e11e      	b.n	80051f4 <HAL_SPI_Transmit+0x260>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fbe:	f7fc f97f 	bl	80012c0 <HAL_GetTick>
 8004fc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fd8:	e103      	b.n	80051e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_SPI_Transmit+0x52>
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fea:	e0fa      	b.n	80051e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d107      	bne.n	8005044 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005042:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d007      	beq.n	8005062 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506a:	d14b      	bne.n	8005104 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_Transmit+0xe6>
 8005074:	8afb      	ldrh	r3, [r7, #22]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d13e      	bne.n	80050f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	881a      	ldrh	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	1c9a      	adds	r2, r3, #2
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800509e:	e02b      	b.n	80050f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d112      	bne.n	80050d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	881a      	ldrh	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	1c9a      	adds	r2, r3, #2
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80050d2:	e011      	b.n	80050f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d4:	f7fc f8f4 	bl	80012c0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d803      	bhi.n	80050ec <HAL_SPI_Transmit+0x158>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d102      	bne.n	80050f2 <HAL_SPI_Transmit+0x15e>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050f6:	e074      	b.n	80051e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ce      	bne.n	80050a0 <HAL_SPI_Transmit+0x10c>
 8005102:	e04c      	b.n	800519e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_SPI_Transmit+0x17e>
 800510c:	8afb      	ldrh	r3, [r7, #22]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d140      	bne.n	8005194 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	7812      	ldrb	r2, [r2, #0]
 800511e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005138:	e02c      	b.n	8005194 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d113      	bne.n	8005170 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	86da      	strh	r2, [r3, #54]	; 0x36
 800516e:	e011      	b.n	8005194 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005170:	f7fc f8a6 	bl	80012c0 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d803      	bhi.n	8005188 <HAL_SPI_Transmit+0x1f4>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d102      	bne.n	800518e <HAL_SPI_Transmit+0x1fa>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005192:	e026      	b.n	80051e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1cd      	bne.n	800513a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fba4 	bl	80058f0 <SPI_EndRxTxTransaction>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e000      	b.n	80051e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80051e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005218:	d112      	bne.n	8005240 <HAL_SPI_Receive+0x44>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2204      	movs	r2, #4
 8005226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f8e9 	bl	800540e <HAL_SPI_TransmitReceive>
 800523c:	4603      	mov	r3, r0
 800523e:	e0e2      	b.n	8005406 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_SPI_Receive+0x52>
 800524a:	2302      	movs	r3, #2
 800524c:	e0db      	b.n	8005406 <HAL_SPI_Receive+0x20a>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005256:	f7fc f833 	bl	80012c0 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d002      	beq.n	800526e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005268:	2302      	movs	r3, #2
 800526a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800526c:	e0c2      	b.n	80053f4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_Receive+0x7e>
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d102      	bne.n	8005280 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800527e:	e0b9      	b.n	80053f4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2204      	movs	r2, #4
 8005284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c6:	d107      	bne.n	80052d8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d007      	beq.n	80052f6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d162      	bne.n	80053c4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052fe:	e02e      	b.n	800535e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d115      	bne.n	800533a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f103 020c 	add.w	r2, r3, #12
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	7812      	ldrb	r2, [r2, #0]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005338:	e011      	b.n	800535e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800533a:	f7fb ffc1 	bl	80012c0 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d803      	bhi.n	8005352 <HAL_SPI_Receive+0x156>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d102      	bne.n	8005358 <HAL_SPI_Receive+0x15c>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800535c:	e04a      	b.n	80053f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1cb      	bne.n	8005300 <HAL_SPI_Receive+0x104>
 8005368:	e031      	b.n	80053ce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b01      	cmp	r3, #1
 8005376:	d113      	bne.n	80053a0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	b292      	uxth	r2, r2
 8005384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800539e:	e011      	b.n	80053c4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a0:	f7fb ff8e 	bl	80012c0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d803      	bhi.n	80053b8 <HAL_SPI_Receive+0x1bc>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d102      	bne.n	80053be <HAL_SPI_Receive+0x1c2>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053c2:	e017      	b.n	80053f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1cd      	bne.n	800536a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fa27 	bl	8005826 <SPI_EndRxTransaction>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
 80053f0:	e000      	b.n	80053f4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80053f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005404:	7dfb      	ldrb	r3, [r7, #23]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b08c      	sub	sp, #48	; 0x30
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800541c:	2301      	movs	r3, #1
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x26>
 8005430:	2302      	movs	r3, #2
 8005432:	e18a      	b.n	800574a <HAL_SPI_TransmitReceive+0x33c>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800543c:	f7fb ff40 	bl	80012c0 <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005452:	887b      	ldrh	r3, [r7, #2]
 8005454:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800545a:	2b01      	cmp	r3, #1
 800545c:	d00f      	beq.n	800547e <HAL_SPI_TransmitReceive+0x70>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005464:	d107      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x68>
 800546e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005472:	2b04      	cmp	r3, #4
 8005474:	d003      	beq.n	800547e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005476:	2302      	movs	r3, #2
 8005478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800547c:	e15b      	b.n	8005736 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_SPI_TransmitReceive+0x82>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_SPI_TransmitReceive+0x82>
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005496:	e14e      	b.n	8005736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d003      	beq.n	80054ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2205      	movs	r2, #5
 80054a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	887a      	ldrh	r2, [r7, #2]
 80054c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	887a      	ldrh	r2, [r7, #2]
 80054ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	887a      	ldrh	r2, [r7, #2]
 80054d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d007      	beq.n	8005500 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005508:	d178      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x10a>
 8005512:	8b7b      	ldrh	r3, [r7, #26]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d166      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	881a      	ldrh	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	1c9a      	adds	r2, r3, #2
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800553c:	e053      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d11b      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x176>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <HAL_SPI_TransmitReceive+0x176>
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d113      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	881a      	ldrh	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	1c9a      	adds	r2, r3, #2
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d119      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x1b8>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d014      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	b292      	uxth	r2, r2
 80055a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c2:	2301      	movs	r3, #1
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055c6:	f7fb fe7b 	bl	80012c0 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d807      	bhi.n	80055e6 <HAL_SPI_TransmitReceive+0x1d8>
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d003      	beq.n	80055e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055e4:	e0a7      	b.n	8005736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1a6      	bne.n	800553e <HAL_SPI_TransmitReceive+0x130>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1a1      	bne.n	800553e <HAL_SPI_TransmitReceive+0x130>
 80055fa:	e07c      	b.n	80056f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_SPI_TransmitReceive+0x1fc>
 8005604:	8b7b      	ldrh	r3, [r7, #26]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d16b      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005630:	e057      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d11c      	bne.n	800567a <HAL_SPI_TransmitReceive+0x26c>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <HAL_SPI_TransmitReceive+0x26c>
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d114      	bne.n	800567a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	7812      	ldrb	r2, [r2, #0]
 800565c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b01      	cmp	r3, #1
 8005686:	d119      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x2ae>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d014      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056b8:	2301      	movs	r3, #1
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056bc:	f7fb fe00 	bl	80012c0 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d803      	bhi.n	80056d4 <HAL_SPI_TransmitReceive+0x2c6>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d102      	bne.n	80056da <HAL_SPI_TransmitReceive+0x2cc>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056e0:	e029      	b.n	8005736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1a2      	bne.n	8005632 <HAL_SPI_TransmitReceive+0x224>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d19d      	bne.n	8005632 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f8f8 	bl	80058f0 <SPI_EndRxTxTransaction>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d006      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005712:	e010      	b.n	8005736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	e000      	b.n	8005736 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005734:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800574a:	4618      	mov	r0, r3
 800574c:	3730      	adds	r7, #48	; 0x30
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4613      	mov	r3, r2
 8005760:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005762:	e04c      	b.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d048      	beq.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800576c:	f7fb fda8 	bl	80012c0 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d902      	bls.n	8005782 <SPI_WaitFlagStateUntilTimeout+0x30>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d13d      	bne.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579a:	d111      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a4:	d004      	beq.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ae:	d107      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c8:	d10f      	bne.n	80057ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e00f      	b.n	800581e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	429a      	cmp	r2, r3
 800581a:	d1a3      	bne.n	8005764 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af02      	add	r7, sp, #8
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583a:	d111      	bne.n	8005860 <SPI_EndRxTransaction+0x3a>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005844:	d004      	beq.n	8005850 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584e:	d107      	bne.n	8005860 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005868:	d12a      	bne.n	80058c0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005872:	d012      	beq.n	800589a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2200      	movs	r2, #0
 800587c:	2180      	movs	r1, #128	; 0x80
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f7ff ff67 	bl	8005752 <SPI_WaitFlagStateUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d02d      	beq.n	80058e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e026      	b.n	80058e8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2101      	movs	r1, #1
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff ff54 	bl	8005752 <SPI_WaitFlagStateUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01a      	beq.n	80058e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e013      	b.n	80058e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2200      	movs	r2, #0
 80058c8:	2101      	movs	r1, #1
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff ff41 	bl	8005752 <SPI_WaitFlagStateUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e000      	b.n	80058e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <SPI_EndRxTxTransaction+0x7c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <SPI_EndRxTxTransaction+0x80>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	0d5b      	lsrs	r3, r3, #21
 8005908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591a:	d112      	bne.n	8005942 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	2180      	movs	r1, #128	; 0x80
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ff13 	bl	8005752 <SPI_WaitFlagStateUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	f043 0220 	orr.w	r2, r3, #32
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e00f      	b.n	8005962 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	3b01      	subs	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005958:	2b80      	cmp	r3, #128	; 0x80
 800595a:	d0f2      	beq.n	8005942 <SPI_EndRxTxTransaction+0x52>
 800595c:	e000      	b.n	8005960 <SPI_EndRxTxTransaction+0x70>
        break;
 800595e:	bf00      	nop
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000000 	.word	0x20000000
 8005970:	165e9f81 	.word	0x165e9f81

08005974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e01d      	b.n	80059c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f815 	bl	80059ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f000 f968 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b06      	cmp	r3, #6
 8005a06:	d007      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d122      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d11b      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0202 	mvn.w	r2, #2
 8005a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f8ee 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005a6e:	e005      	b.n	8005a7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f8e0 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f8f1 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d122      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d11b      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0204 	mvn.w	r2, #4
 8005aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8c4 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005ac2:	e005      	b.n	8005ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f8b6 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8c7 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d122      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d11b      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0208 	mvn.w	r2, #8
 8005afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2204      	movs	r2, #4
 8005b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f89a 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005b16:	e005      	b.n	8005b24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f88c 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f89d 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b10      	cmp	r3, #16
 8005b36:	d122      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d11b      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0210 	mvn.w	r2, #16
 8005b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2208      	movs	r2, #8
 8005b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f870 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005b6a:	e005      	b.n	8005b78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f862 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f873 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d10e      	bne.n	8005baa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d107      	bne.n	8005baa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f06f 0201 	mvn.w	r2, #1
 8005ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7fb f89f 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d10e      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b80      	cmp	r3, #128	; 0x80
 8005bc4:	d107      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f8e3 	bl	8005d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d10e      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d107      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f838 	bl	8005c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d10e      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d107      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f06f 0220 	mvn.w	r2, #32
 8005c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f8ad 	bl	8005d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a34      	ldr	r2, [pc, #208]	; (8005d6c <TIM_Base_SetConfig+0xe4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <TIM_Base_SetConfig+0xe8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a30      	ldr	r2, [pc, #192]	; (8005d74 <TIM_Base_SetConfig+0xec>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a2f      	ldr	r2, [pc, #188]	; (8005d78 <TIM_Base_SetConfig+0xf0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <TIM_Base_SetConfig+0xe4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01b      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce0:	d017      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <TIM_Base_SetConfig+0xe8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a21      	ldr	r2, [pc, #132]	; (8005d74 <TIM_Base_SetConfig+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <TIM_Base_SetConfig+0xf0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <TIM_Base_SetConfig+0xf4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <TIM_Base_SetConfig+0xf8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <TIM_Base_SetConfig+0xfc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <TIM_Base_SetConfig+0xe4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d103      	bne.n	8005d58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	615a      	str	r2, [r3, #20]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40000c00 	.word	0x40000c00
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800

08005d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005db0:	b084      	sub	sp, #16
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	f107 001c 	add.w	r0, r7, #28
 8005dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d122      	bne.n	8005e0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d105      	bne.n	8005e02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fa7c 	bl	8007300 <USB_CoreReset>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e01a      	b.n	8005e44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fa70 	bl	8007300 <USB_CoreReset>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
 8005e36:	e005      	b.n	8005e44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10b      	bne.n	8005e62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f043 0206 	orr.w	r2, r3, #6
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e6e:	b004      	add	sp, #16
 8005e70:	4770      	bx	lr
	...

08005e74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d165      	bne.n	8005f54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4a41      	ldr	r2, [pc, #260]	; (8005f90 <USB_SetTurnaroundTime+0x11c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d906      	bls.n	8005e9e <USB_SetTurnaroundTime+0x2a>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4a40      	ldr	r2, [pc, #256]	; (8005f94 <USB_SetTurnaroundTime+0x120>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d802      	bhi.n	8005e9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e98:	230f      	movs	r3, #15
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e062      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4a3c      	ldr	r2, [pc, #240]	; (8005f94 <USB_SetTurnaroundTime+0x120>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d906      	bls.n	8005eb4 <USB_SetTurnaroundTime+0x40>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4a3b      	ldr	r2, [pc, #236]	; (8005f98 <USB_SetTurnaroundTime+0x124>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d802      	bhi.n	8005eb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005eae:	230e      	movs	r3, #14
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e057      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4a38      	ldr	r2, [pc, #224]	; (8005f98 <USB_SetTurnaroundTime+0x124>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d906      	bls.n	8005eca <USB_SetTurnaroundTime+0x56>
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4a37      	ldr	r2, [pc, #220]	; (8005f9c <USB_SetTurnaroundTime+0x128>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d802      	bhi.n	8005eca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ec4:	230d      	movs	r3, #13
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e04c      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4a33      	ldr	r2, [pc, #204]	; (8005f9c <USB_SetTurnaroundTime+0x128>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d906      	bls.n	8005ee0 <USB_SetTurnaroundTime+0x6c>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4a32      	ldr	r2, [pc, #200]	; (8005fa0 <USB_SetTurnaroundTime+0x12c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d802      	bhi.n	8005ee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005eda:	230c      	movs	r3, #12
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e041      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <USB_SetTurnaroundTime+0x12c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d906      	bls.n	8005ef6 <USB_SetTurnaroundTime+0x82>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4a2e      	ldr	r2, [pc, #184]	; (8005fa4 <USB_SetTurnaroundTime+0x130>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d802      	bhi.n	8005ef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ef0:	230b      	movs	r3, #11
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e036      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <USB_SetTurnaroundTime+0x130>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d906      	bls.n	8005f0c <USB_SetTurnaroundTime+0x98>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	4a29      	ldr	r2, [pc, #164]	; (8005fa8 <USB_SetTurnaroundTime+0x134>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d802      	bhi.n	8005f0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f06:	230a      	movs	r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e02b      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4a26      	ldr	r2, [pc, #152]	; (8005fa8 <USB_SetTurnaroundTime+0x134>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d906      	bls.n	8005f22 <USB_SetTurnaroundTime+0xae>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4a25      	ldr	r2, [pc, #148]	; (8005fac <USB_SetTurnaroundTime+0x138>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d802      	bhi.n	8005f22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f1c:	2309      	movs	r3, #9
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e020      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <USB_SetTurnaroundTime+0x138>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d906      	bls.n	8005f38 <USB_SetTurnaroundTime+0xc4>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <USB_SetTurnaroundTime+0x13c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d802      	bhi.n	8005f38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f32:	2308      	movs	r3, #8
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e015      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <USB_SetTurnaroundTime+0x13c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d906      	bls.n	8005f4e <USB_SetTurnaroundTime+0xda>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <USB_SetTurnaroundTime+0x140>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d802      	bhi.n	8005f4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f48:	2307      	movs	r3, #7
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e00a      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f4e:	2306      	movs	r3, #6
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e007      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f5a:	2309      	movs	r3, #9
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e001      	b.n	8005f64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f60:	2309      	movs	r3, #9
 8005f62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	029b      	lsls	r3, r3, #10
 8005f78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	00d8acbf 	.word	0x00d8acbf
 8005f94:	00e4e1bf 	.word	0x00e4e1bf
 8005f98:	00f423ff 	.word	0x00f423ff
 8005f9c:	0106737f 	.word	0x0106737f
 8005fa0:	011a499f 	.word	0x011a499f
 8005fa4:	01312cff 	.word	0x01312cff
 8005fa8:	014ca43f 	.word	0x014ca43f
 8005fac:	016e35ff 	.word	0x016e35ff
 8005fb0:	01a6ab1f 	.word	0x01a6ab1f
 8005fb4:	01e847ff 	.word	0x01e847ff

08005fb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f043 0201 	orr.w	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f023 0201 	bic.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d106      	bne.n	8006028 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60da      	str	r2, [r3, #12]
 8006026:	e00b      	b.n	8006040 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	e001      	b.n	8006040 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e003      	b.n	8006048 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006040:	2032      	movs	r0, #50	; 0x32
 8006042:	f7fb f949 	bl	80012d8 <HAL_Delay>

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006050:	b084      	sub	sp, #16
 8006052:	b580      	push	{r7, lr}
 8006054:	b086      	sub	sp, #24
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800605e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800606a:	2300      	movs	r3, #0
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	e009      	b.n	8006084 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3340      	adds	r3, #64	; 0x40
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3301      	adds	r3, #1
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b0e      	cmp	r3, #14
 8006088:	d9f2      	bls.n	8006070 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800608a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d112      	bne.n	80060b6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
 80060b4:	e00b      	b.n	80060ce <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e0:	4619      	mov	r1, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e8:	461a      	mov	r2, r3
 80060ea:	680b      	ldr	r3, [r1, #0]
 80060ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10c      	bne.n	800610e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060fa:	2100      	movs	r1, #0
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f961 	bl	80063c4 <USB_SetDevSpeed>
 8006102:	e008      	b.n	8006116 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006104:	2101      	movs	r1, #1
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f95c 	bl	80063c4 <USB_SetDevSpeed>
 800610c:	e003      	b.n	8006116 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800610e:	2103      	movs	r1, #3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f957 	bl	80063c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006116:	2110      	movs	r1, #16
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f90b 	bl	8006334 <USB_FlushTxFifo>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f929 	bl	8006380 <USB_FlushRxFifo>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	461a      	mov	r2, r3
 8006140:	2300      	movs	r3, #0
 8006142:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	461a      	mov	r2, r3
 800614c:	2300      	movs	r3, #0
 800614e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	461a      	mov	r2, r3
 8006158:	2300      	movs	r3, #0
 800615a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	e043      	b.n	80061ea <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006178:	d118      	bne.n	80061ac <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	461a      	mov	r2, r3
 800618e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	e013      	b.n	80061be <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	461a      	mov	r2, r3
 80061a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e008      	b.n	80061be <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	461a      	mov	r2, r3
 80061ba:	2300      	movs	r3, #0
 80061bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	461a      	mov	r2, r3
 80061cc:	2300      	movs	r3, #0
 80061ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	461a      	mov	r2, r3
 80061de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	3301      	adds	r3, #1
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d3b7      	bcc.n	8006162 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	e043      	b.n	8006280 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800620a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800620e:	d118      	bne.n	8006242 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006222:	461a      	mov	r2, r3
 8006224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e013      	b.n	8006254 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e008      	b.n	8006254 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	461a      	mov	r2, r3
 8006250:	2300      	movs	r3, #0
 8006252:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	461a      	mov	r2, r3
 8006262:	2300      	movs	r3, #0
 8006264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	461a      	mov	r2, r3
 8006274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3301      	adds	r3, #1
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	429a      	cmp	r2, r3
 8006286:	d3b7      	bcc.n	80061f8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d111      	bne.n	80062c6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a8:	461a      	mov	r2, r3
 80062aa:	4b20      	ldr	r3, [pc, #128]	; (800632c <USB_DevInit+0x2dc>)
 80062ac:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c0:	f043 0303 	orr.w	r3, r3, #3
 80062c4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f043 0210 	orr.w	r2, r3, #16
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	4b11      	ldr	r3, [pc, #68]	; (8006330 <USB_DevInit+0x2e0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f043 0208 	orr.w	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006306:	2b01      	cmp	r3, #1
 8006308:	d107      	bne.n	800631a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006312:	f043 0304 	orr.w	r3, r3, #4
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006326:	b004      	add	sp, #16
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	00800100 	.word	0x00800100
 8006330:	803c3800 	.word	0x803c3800

08006334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	019b      	lsls	r3, r3, #6
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <USB_FlushTxFifo+0x48>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e006      	b.n	800636e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b20      	cmp	r3, #32
 800636a:	d0f0      	beq.n	800634e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	00030d40 	.word	0x00030d40

08006380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2210      	movs	r2, #16
 8006390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3301      	adds	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <USB_FlushRxFifo+0x40>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e006      	b.n	80063b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d0f0      	beq.n	8006392 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	00030d40 	.word	0x00030d40

080063c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	68f9      	ldr	r1, [r7, #12]
 80063e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e4:	4313      	orrs	r3, r2
 80063e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b087      	sub	sp, #28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0306 	and.w	r3, r3, #6
 800640e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]
 800641a:	e00a      	b.n	8006432 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d002      	beq.n	8006428 <USB_GetDevSpeed+0x32>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b06      	cmp	r3, #6
 8006426:	d102      	bne.n	800642e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006428:	2302      	movs	r3, #2
 800642a:	75fb      	strb	r3, [r7, #23]
 800642c:	e001      	b.n	8006432 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800642e:	230f      	movs	r3, #15
 8006430:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006432:	7dfb      	ldrb	r3, [r7, #23]
}
 8006434:	4618      	mov	r0, r3
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d13a      	bne.n	80064d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	2101      	movs	r1, #1
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	b29b      	uxth	r3, r3
 8006474:	68f9      	ldr	r1, [r7, #12]
 8006476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800647a:	4313      	orrs	r3, r2
 800647c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d155      	bne.n	8006540 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	78db      	ldrb	r3, [r3, #3]
 80064ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	059b      	lsls	r3, r3, #22
 80064b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064b8:	4313      	orrs	r3, r2
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	0151      	lsls	r1, r2, #5
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	440a      	add	r2, r1
 80064c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	e036      	b.n	8006540 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	2101      	movs	r1, #1
 80064e4:	fa01 f303 	lsl.w	r3, r1, r3
 80064e8:	041b      	lsls	r3, r3, #16
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f0:	4313      	orrs	r3, r2
 80064f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11a      	bne.n	8006540 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	78db      	ldrb	r3, [r3, #3]
 8006524:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006526:	430b      	orrs	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800653a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d135      	bne.n	80065d8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	2101      	movs	r1, #1
 800657e:	fa01 f303 	lsl.w	r3, r1, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800658c:	4013      	ands	r3, r2
 800658e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2101      	movs	r1, #1
 80065a2:	fa01 f303 	lsl.w	r3, r1, r3
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b0:	4013      	ands	r3, r2
 80065b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	0159      	lsls	r1, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	440b      	add	r3, r1
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	4619      	mov	r1, r3
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <USB_DeactivateEndpoint+0x100>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	600b      	str	r3, [r1, #0]
 80065d6:	e034      	b.n	8006642 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f303 	lsl.w	r3, r1, r3
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	43db      	mvns	r3, r3
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f8:	4013      	ands	r3, r2
 80065fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	2101      	movs	r1, #1
 800660e:	fa01 f303 	lsl.w	r3, r1, r3
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	43db      	mvns	r3, r3
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800661c:	4013      	ands	r3, r2
 800661e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	0159      	lsls	r1, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	440b      	add	r3, r1
 8006636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663a:	4619      	mov	r1, r3
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <USB_DeactivateEndpoint+0x104>)
 800663e:	4013      	ands	r3, r2
 8006640:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	ec337800 	.word	0xec337800
 8006654:	eff37800 	.word	0xeff37800

08006658 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b01      	cmp	r3, #1
 8006676:	f040 815c 	bne.w	8006932 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d132      	bne.n	80066e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	0cdb      	lsrs	r3, r3, #19
 80066e2:	04db      	lsls	r3, r3, #19
 80066e4:	6113      	str	r3, [r2, #16]
 80066e6:	e074      	b.n	80067d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006702:	0cdb      	lsrs	r3, r3, #19
 8006704:	04db      	lsls	r3, r3, #19
 8006706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006722:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006726:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800672a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6959      	ldr	r1, [r3, #20]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	440b      	add	r3, r1
 8006744:	1e59      	subs	r1, r3, #1
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	fbb1 f3f3 	udiv	r3, r1, r3
 800674e:	04d9      	lsls	r1, r3, #19
 8006750:	4b9d      	ldr	r3, [pc, #628]	; (80069c8 <USB_EPStartXfer+0x370>)
 8006752:	400b      	ands	r3, r1
 8006754:	69b9      	ldr	r1, [r7, #24]
 8006756:	0148      	lsls	r0, r1, #5
 8006758:	69f9      	ldr	r1, [r7, #28]
 800675a:	4401      	add	r1, r0
 800675c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006760:	4313      	orrs	r3, r2
 8006762:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800677a:	69b9      	ldr	r1, [r7, #24]
 800677c:	0148      	lsls	r0, r1, #5
 800677e:	69f9      	ldr	r1, [r7, #28]
 8006780:	4401      	add	r1, r0
 8006782:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006786:	4313      	orrs	r3, r2
 8006788:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	78db      	ldrb	r3, [r3, #3]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d11f      	bne.n	80067d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d14b      	bne.n	8006870 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ec:	461a      	mov	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	78db      	ldrb	r3, [r3, #3]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d128      	bne.n	800684e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006808:	2b00      	cmp	r3, #0
 800680a:	d110      	bne.n	800682e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	69fa      	ldr	r2, [r7, #28]
 8006820:	440a      	add	r2, r1
 8006822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e00f      	b.n	800684e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e12f      	b.n	8006ad0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800688e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	78db      	ldrb	r3, [r3, #3]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d015      	beq.n	80068c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8117 	beq.w	8006ad0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	2101      	movs	r1, #1
 80068b4:	fa01 f303 	lsl.w	r3, r1, r3
 80068b8:	69f9      	ldr	r1, [r7, #28]
 80068ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068be:	4313      	orrs	r3, r2
 80068c0:	634b      	str	r3, [r1, #52]	; 0x34
 80068c2:	e105      	b.n	8006ad0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d110      	bne.n	80068f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	e00f      	b.n	8006916 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	440a      	add	r2, r1
 800690c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006914:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	68d9      	ldr	r1, [r3, #12]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	b298      	uxth	r0, r3
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	4603      	mov	r3, r0
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fa2b 	bl	8006d86 <USB_WritePacket>
 8006930:	e0ce      	b.n	8006ad0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694c:	0cdb      	lsrs	r3, r3, #19
 800694e:	04db      	lsls	r3, r3, #19
 8006950:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006970:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006974:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d126      	bne.n	80069cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006994:	69b9      	ldr	r1, [r7, #24]
 8006996:	0148      	lsls	r0, r1, #5
 8006998:	69f9      	ldr	r1, [r7, #28]
 800699a:	4401      	add	r1, r0
 800699c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069a0:	4313      	orrs	r3, r2
 80069a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069c2:	6113      	str	r3, [r2, #16]
 80069c4:	e036      	b.n	8006a34 <USB_EPStartXfer+0x3dc>
 80069c6:	bf00      	nop
 80069c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	1e5a      	subs	r2, r3, #1
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	8afb      	ldrh	r3, [r7, #22]
 80069f2:	04d9      	lsls	r1, r3, #19
 80069f4:	4b39      	ldr	r3, [pc, #228]	; (8006adc <USB_EPStartXfer+0x484>)
 80069f6:	400b      	ands	r3, r1
 80069f8:	69b9      	ldr	r1, [r7, #24]
 80069fa:	0148      	lsls	r0, r1, #5
 80069fc:	69f9      	ldr	r1, [r7, #28]
 80069fe:	4401      	add	r1, r0
 8006a00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a04:	4313      	orrs	r3, r2
 8006a06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	8af9      	ldrh	r1, [r7, #22]
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a24:	69b9      	ldr	r1, [r7, #24]
 8006a26:	0148      	lsls	r0, r1, #5
 8006a28:	69f9      	ldr	r1, [r7, #28]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d10d      	bne.n	8006a56 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	68d9      	ldr	r1, [r3, #12]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	460a      	mov	r2, r1
 8006a54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d128      	bne.n	8006ab0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d110      	bne.n	8006a90 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	e00f      	b.n	8006ab0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ace:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	1ff80000 	.word	0x1ff80000

08006ae0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	f040 80cd 	bne.w	8006c9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d132      	bne.n	8006b70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b68:	0cdb      	lsrs	r3, r3, #19
 8006b6a:	04db      	lsls	r3, r3, #19
 8006b6c:	6113      	str	r3, [r2, #16]
 8006b6e:	e04e      	b.n	8006c0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8a:	0cdb      	lsrs	r3, r3, #19
 8006b8c:	04db      	lsls	r3, r3, #19
 8006b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d903      	bls.n	8006bc8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bfe:	6939      	ldr	r1, [r7, #16]
 8006c00:	0148      	lsls	r0, r1, #5
 8006c02:	6979      	ldr	r1, [r7, #20]
 8006c04:	4401      	add	r1, r0
 8006c06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d11e      	bne.n	8006c52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	e092      	b.n	8006d78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d07e      	beq.n	8006d78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	6979      	ldr	r1, [r7, #20]
 8006c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c96:	4313      	orrs	r3, r2
 8006c98:	634b      	str	r3, [r1, #52]	; 0x34
 8006c9a:	e06d      	b.n	8006d78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb6:	0cdb      	lsrs	r3, r3, #19
 8006cb8:	04db      	lsls	r3, r3, #19
 8006cba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cde:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d26:	6939      	ldr	r1, [r7, #16]
 8006d28:	0148      	lsls	r0, r1, #5
 8006d2a:	6979      	ldr	r1, [r7, #20]
 8006d2c:	4401      	add	r1, r0
 8006d2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d32:	4313      	orrs	r3, r2
 8006d34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10d      	bne.n	8006d58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	68d9      	ldr	r1, [r3, #12]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	460a      	mov	r2, r1
 8006d56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b089      	sub	sp, #36	; 0x24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	4611      	mov	r1, r2
 8006d92:	461a      	mov	r2, r3
 8006d94:	460b      	mov	r3, r1
 8006d96:	71fb      	strb	r3, [r7, #7]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d11a      	bne.n	8006de2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dac:	88bb      	ldrh	r3, [r7, #4]
 8006dae:	3303      	adds	r3, #3
 8006db0:	089b      	lsrs	r3, r3, #2
 8006db2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	e00f      	b.n	8006dda <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	031a      	lsls	r2, r3, #12
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d3eb      	bcc.n	8006dba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3724      	adds	r7, #36	; 0x24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	; 0x24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	3303      	adds	r3, #3
 8006e0a:	089b      	lsrs	r3, r3, #2
 8006e0c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	e00b      	b.n	8006e2c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	3304      	adds	r3, #4
 8006e24:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61bb      	str	r3, [r7, #24]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d3ef      	bcc.n	8006e14 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e34:	69fb      	ldr	r3, [r7, #28]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3724      	adds	r7, #36	; 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	785b      	ldrb	r3, [r3, #1]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d12c      	bne.n	8006eb8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	db12      	blt.n	8006e96 <USB_EPSetStall+0x54>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00f      	beq.n	8006e96 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e94:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	e02b      	b.n	8006f10 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	db12      	blt.n	8006ef0 <USB_EPSetStall+0xae>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00f      	beq.n	8006ef0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d128      	bne.n	8006f8c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	78db      	ldrb	r3, [r3, #3]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d003      	beq.n	8006f6a <USB_EPClearStall+0x4c>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	78db      	ldrb	r3, [r3, #3]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d138      	bne.n	8006fdc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	e027      	b.n	8006fdc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	78db      	ldrb	r3, [r3, #3]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d003      	beq.n	8006fbc <USB_EPClearStall+0x9e>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	78db      	ldrb	r3, [r3, #3]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d10f      	bne.n	8006fdc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fda:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007008:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800700c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007024:	4313      	orrs	r3, r2
 8007026:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007050:	f023 0302 	bic.w	r3, r3, #2
 8007054:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007056:	2003      	movs	r0, #3
 8007058:	f7fa f93e 	bl	80012d8 <HAL_Delay>

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f043 0302 	orr.w	r3, r3, #2
 8007084:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007086:	2003      	movs	r0, #3
 8007088:	f7fa f926 	bl	80012d8 <HAL_Delay>

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4013      	ands	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070ae:	68fb      	ldr	r3, [r7, #12]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4013      	ands	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	0c1b      	lsrs	r3, r3, #16
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4013      	ands	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	b29b      	uxth	r3, r3
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	4013      	ands	r3, r2
 8007150:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007152:	68bb      	ldr	r3, [r7, #8]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
 8007190:	01db      	lsls	r3, r3, #7
 8007192:	b2db      	uxtb	r3, r3
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4013      	ands	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071ae:	68bb      	ldr	r3, [r7, #8]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0301 	and.w	r3, r3, #1
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071f6:	f023 0307 	bic.w	r3, r3, #7
 80071fa:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0306 	and.w	r3, r3, #6
 8007208:	2b04      	cmp	r3, #4
 800720a:	d109      	bne.n	8007220 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721a:	f043 0303 	orr.w	r3, r3, #3
 800721e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800722e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007232:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	460b      	mov	r3, r1
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	333c      	adds	r3, #60	; 0x3c
 800725a:	3304      	adds	r3, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4a26      	ldr	r2, [pc, #152]	; (80072fc <USB_EP0_OutStart+0xb8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d90a      	bls.n	800727e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007278:	d101      	bne.n	800727e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	e037      	b.n	80072ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	461a      	mov	r2, r3
 8007286:	2300      	movs	r3, #0
 8007288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ac:	f043 0318 	orr.w	r3, r3, #24
 80072b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80072c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10f      	bne.n	80072ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	4f54300a 	.word	0x4f54300a

08007300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <USB_CoreReset+0x64>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e01b      	b.n	8007356 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	daf2      	bge.n	800730c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3301      	adds	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4a09      	ldr	r2, [pc, #36]	; (8007364 <USB_CoreReset+0x64>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d901      	bls.n	8007348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e006      	b.n	8007356 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b01      	cmp	r3, #1
 8007352:	d0f0      	beq.n	8007336 <USB_CoreReset+0x36>

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	00030d40 	.word	0x00030d40

08007368 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7c1b      	ldrb	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d115      	bne.n	80073ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007384:	2202      	movs	r2, #2
 8007386:	2181      	movs	r1, #129	; 0x81
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f004 fbc2 	bl	800bb12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007398:	2202      	movs	r2, #2
 800739a:	2101      	movs	r1, #1
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f004 fbb8 	bl	800bb12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80073aa:	e012      	b.n	80073d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	2202      	movs	r2, #2
 80073b0:	2181      	movs	r1, #129	; 0x81
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f004 fbad 	bl	800bb12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073be:	2340      	movs	r3, #64	; 0x40
 80073c0:	2202      	movs	r2, #2
 80073c2:	2101      	movs	r1, #1
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f004 fba4 	bl	800bb12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073d2:	2308      	movs	r3, #8
 80073d4:	2203      	movs	r2, #3
 80073d6:	2182      	movs	r1, #130	; 0x82
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f004 fb9a 	bl	800bb12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80073e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073e8:	f004 fd10 	bl	800be0c <malloc>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	e026      	b.n	8007454 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800740c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	7c1b      	ldrb	r3, [r3, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743a:	2101      	movs	r1, #1
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f004 fc59 	bl	800bcf4 <USBD_LL_PrepareReceive>
 8007442:	e007      	b.n	8007454 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800744a:	2340      	movs	r3, #64	; 0x40
 800744c:	2101      	movs	r1, #1
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f004 fc50 	bl	800bcf4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800746e:	2181      	movs	r1, #129	; 0x81
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f004 fb74 	bl	800bb5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800747c:	2101      	movs	r1, #1
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f004 fb6d 	bl	800bb5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800748c:	2182      	movs	r1, #130	; 0x82
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f004 fb65 	bl	800bb5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00e      	beq.n	80074c2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074b4:	4618      	mov	r0, r3
 80074b6:	f004 fcb1 	bl	800be1c <free>
    pdev->pClassData = NULL;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074dc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d039      	beq.n	800756a <USBD_CDC_Setup+0x9e>
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d17c      	bne.n	80075f4 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	88db      	ldrh	r3, [r3, #6]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d029      	beq.n	8007556 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b25b      	sxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	da11      	bge.n	8007530 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007518:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	88d2      	ldrh	r2, [r2, #6]
 800751e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007520:	6939      	ldr	r1, [r7, #16]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	88db      	ldrh	r3, [r3, #6]
 8007526:	461a      	mov	r2, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 f9c9 	bl	80088c0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800752e:	e068      	b.n	8007602 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	785a      	ldrb	r2, [r3, #1]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	88db      	ldrh	r3, [r3, #6]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007546:	6939      	ldr	r1, [r7, #16]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	88db      	ldrh	r3, [r3, #6]
 800754c:	461a      	mov	r2, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f9e4 	bl	800891c <USBD_CtlPrepareRx>
    break;
 8007554:	e055      	b.n	8007602 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	7850      	ldrb	r0, [r2, #1]
 8007562:	2200      	movs	r2, #0
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	4798      	blx	r3
    break;
 8007568:	e04b      	b.n	8007602 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b0a      	cmp	r3, #10
 8007570:	d017      	beq.n	80075a2 <USBD_CDC_Setup+0xd6>
 8007572:	2b0b      	cmp	r3, #11
 8007574:	d029      	beq.n	80075ca <USBD_CDC_Setup+0xfe>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d133      	bne.n	80075e2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007580:	2b03      	cmp	r3, #3
 8007582:	d107      	bne.n	8007594 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007584:	f107 030c 	add.w	r3, r7, #12
 8007588:	2202      	movs	r2, #2
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 f997 	bl	80088c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007592:	e02e      	b.n	80075f2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f927 	bl	80087ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800759c:	2302      	movs	r3, #2
 800759e:	75fb      	strb	r3, [r7, #23]
      break;
 80075a0:	e027      	b.n	80075f2 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d107      	bne.n	80075bc <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80075ac:	f107 030f 	add.w	r3, r7, #15
 80075b0:	2201      	movs	r2, #1
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f983 	bl	80088c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80075ba:	e01a      	b.n	80075f2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f913 	bl	80087ea <USBD_CtlError>
			  ret = USBD_FAIL;
 80075c4:	2302      	movs	r3, #2
 80075c6:	75fb      	strb	r3, [r7, #23]
      break;
 80075c8:	e013      	b.n	80075f2 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d00d      	beq.n	80075f0 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f907 	bl	80087ea <USBD_CtlError>
			  ret = USBD_FAIL;
 80075dc:	2302      	movs	r3, #2
 80075de:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80075e0:	e006      	b.n	80075f0 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f900 	bl	80087ea <USBD_CtlError>
      ret = USBD_FAIL;
 80075ea:	2302      	movs	r3, #2
 80075ec:	75fb      	strb	r3, [r7, #23]
      break;
 80075ee:	e000      	b.n	80075f2 <USBD_CDC_Setup+0x126>
      break;
 80075f0:	bf00      	nop
    }
    break;
 80075f2:	e006      	b.n	8007602 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f001 f8f7 	bl	80087ea <USBD_CtlError>
    ret = USBD_FAIL;
 80075fc:	2302      	movs	r3, #2
 80075fe:	75fb      	strb	r3, [r7, #23]
    break;
 8007600:	bf00      	nop
  }

  return ret;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800761e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007626:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800762e:	2b00      	cmp	r3, #0
 8007630:	d03a      	beq.n	80076a8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007632:	78fa      	ldrb	r2, [r7, #3]
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	331c      	adds	r3, #28
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d029      	beq.n	800769c <USBD_CDC_DataIn+0x90>
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	331c      	adds	r3, #28
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	78f9      	ldrb	r1, [r7, #3]
 800765c:	68b8      	ldr	r0, [r7, #8]
 800765e:	460b      	mov	r3, r1
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1a5b      	subs	r3, r3, r1
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4403      	add	r3, r0
 8007668:	3344      	adds	r3, #68	; 0x44
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007670:	fb03 f301 	mul.w	r3, r3, r1
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d110      	bne.n	800769c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	331c      	adds	r3, #28
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800768e:	78f9      	ldrb	r1, [r7, #3]
 8007690:	2300      	movs	r3, #0
 8007692:	2200      	movs	r2, #0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f004 fb0a 	bl	800bcae <USBD_LL_Transmit>
 800769a:	e003      	b.n	80076a4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e000      	b.n	80076aa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80076a8:	2302      	movs	r3, #2
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f004 fb35 	bl	800bd3a <USBD_LL_GetRxDataSize>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076f6:	4611      	mov	r1, r2
 80076f8:	4798      	blx	r3

    return USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e000      	b.n	8007700 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80076fe:	2302      	movs	r3, #2
  }
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007716:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800771e:	2b00      	cmp	r3, #0
 8007720:	d015      	beq.n	800774e <USBD_CDC_EP0_RxReady+0x46>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007728:	2bff      	cmp	r3, #255	; 0xff
 800772a:	d010      	beq.n	800774e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800773a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007742:	b292      	uxth	r2, r2
 8007744:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	22ff      	movs	r2, #255	; 0xff
 800774a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2243      	movs	r2, #67	; 0x43
 8007764:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007766:	4b03      	ldr	r3, [pc, #12]	; (8007774 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	20000090 	.word	0x20000090

08007778 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2243      	movs	r2, #67	; 0x43
 8007784:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007786:	4b03      	ldr	r3, [pc, #12]	; (8007794 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	2000004c 	.word	0x2000004c

08007798 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2243      	movs	r2, #67	; 0x43
 80077a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077a6:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	200000d4 	.word	0x200000d4

080077b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220a      	movs	r2, #10
 80077c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	20000008 	.word	0x20000008

080077d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80077e2:	2302      	movs	r3, #2
 80077e4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007806:	b480      	push	{r7}
 8007808:	b087      	sub	sp, #28
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800781a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800784a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007870:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01c      	beq.n	80078b6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007882:	2b00      	cmp	r3, #0
 8007884:	d115      	bne.n	80078b2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2181      	movs	r1, #129	; 0x81
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f004 fa00 	bl	800bcae <USBD_LL_Transmit>

      return USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e002      	b.n	80078b8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80078b6:	2302      	movs	r3, #2
  }
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d109      	bne.n	80078f6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ec:	2101      	movs	r1, #1
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f004 fa00 	bl	800bcf4 <USBD_LL_PrepareReceive>
 80078f4:	e007      	b.n	8007906 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078fc:	2340      	movs	r3, #64	; 0x40
 80078fe:	2101      	movs	r1, #1
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f004 f9f7 	bl	800bcf4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800790a:	2302      	movs	r3, #2
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007928:	2302      	movs	r3, #2
 800792a:	e01a      	b.n	8007962 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	79fa      	ldrb	r2, [r7, #7]
 8007958:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f004 f872 	bl	800ba44 <USBD_LL_Init>

  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
 800798a:	e001      	b.n	8007990 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800798c:	2302      	movs	r3, #2
 800798e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f004 f898 	bl	800badc <USBD_LL_Start>

  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80079d8:	2302      	movs	r3, #2
 80079da:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00c      	beq.n	8007a00 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4611      	mov	r1, r2
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4611      	mov	r1, r2
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fe94 	bl	8008770 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d00c      	beq.n	8007a86 <USBD_LL_SetupStage+0x56>
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d302      	bcc.n	8007a76 <USBD_LL_SetupStage+0x46>
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d010      	beq.n	8007a96 <USBD_LL_SetupStage+0x66>
 8007a74:	e017      	b.n	8007aa6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa04 	bl	8007e8c <USBD_StdDevReq>
    break;
 8007a84:	e01a      	b.n	8007abc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa66 	bl	8007f60 <USBD_StdItfReq>
    break;
 8007a94:	e012      	b.n	8007abc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 faa4 	bl	8007fec <USBD_StdEPReq>
    break;
 8007aa4:	e00a      	b.n	8007abc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007aac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f004 f871 	bl	800bb9c <USBD_LL_StallEP>
    break;
 8007aba:	bf00      	nop
  }

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d14b      	bne.n	8007b72 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007ae0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d134      	bne.n	8007b56 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d919      	bls.n	8007b2c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	1ad2      	subs	r2, r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d203      	bcs.n	8007b1a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	e002      	b.n	8007b20 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 ff17 	bl	8008958 <USBD_CtlContinueRx>
 8007b2a:	e038      	b.n	8007b9e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d105      	bne.n	8007b4e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 ff14 	bl	800897c <USBD_CtlSendStatus>
 8007b54:	e023      	b.n	8007b9e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b5c:	2b05      	cmp	r3, #5
 8007b5e:	d11e      	bne.n	8007b9e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007b68:	2100      	movs	r1, #0
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f004 f816 	bl	800bb9c <USBD_LL_StallEP>
 8007b70:	e015      	b.n	8007b9e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d108      	bne.n	8007b9a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	7afa      	ldrb	r2, [r7, #11]
 8007b92:	4611      	mov	r1, r2
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	4798      	blx	r3
 8007b98:	e001      	b.n	8007b9e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e000      	b.n	8007ba0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d17f      	bne.n	8007cbc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3314      	adds	r3, #20
 8007bc0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d15c      	bne.n	8007c86 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d915      	bls.n	8007c04 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	1ad2      	subs	r2, r2, r3
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fe81 	bl	80088f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f004 f879 	bl	800bcf4 <USBD_LL_PrepareReceive>
 8007c02:	e04e      	b.n	8007ca2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	6912      	ldr	r2, [r2, #16]
 8007c0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c10:	fb02 f201 	mul.w	r2, r2, r1
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d11c      	bne.n	8007c54 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d316      	bcc.n	8007c54 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d20f      	bcs.n	8007c54 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c34:	2200      	movs	r2, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fe5d 	bl	80088f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007c46:	2300      	movs	r3, #0
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f004 f851 	bl	800bcf4 <USBD_LL_PrepareReceive>
 8007c52:	e026      	b.n	8007ca2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d105      	bne.n	8007c76 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c76:	2180      	movs	r1, #128	; 0x80
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f003 ff8f 	bl	800bb9c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fe8f 	bl	80089a2 <USBD_CtlReceiveStatus>
 8007c84:	e00d      	b.n	8007ca2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d004      	beq.n	8007c9a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d103      	bne.n	8007ca2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c9a:	2180      	movs	r1, #128	; 0x80
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f003 ff7d 	bl	800bb9c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d11d      	bne.n	8007ce8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff fe82 	bl	80079b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007cba:	e015      	b.n	8007ce8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00d      	beq.n	8007ce4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d108      	bne.n	8007ce4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	7afa      	ldrb	r2, [r7, #11]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	4798      	blx	r3
 8007ce2:	e001      	b.n	8007ce8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e000      	b.n	8007cea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cfa:	2340      	movs	r3, #64	; 0x40
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f003 ff06 	bl	800bb12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2240      	movs	r2, #64	; 0x40
 8007d12:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d16:	2340      	movs	r3, #64	; 0x40
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2180      	movs	r1, #128	; 0x80
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f003 fef8 	bl	800bb12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2240      	movs	r2, #64	; 0x40
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6852      	ldr	r2, [r2, #4]
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	4611      	mov	r1, r2
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
  }

  return USBD_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2204      	movs	r2, #4
 8007dac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d10b      	bne.n	8007e0a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6852      	ldr	r2, [r2, #4]
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3

  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d004      	beq.n	8007eb0 <USBD_StdDevReq+0x24>
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d002      	beq.n	8007eb0 <USBD_StdDevReq+0x24>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <USBD_StdDevReq+0x34>
 8007eae:	e04c      	b.n	8007f4a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
    break;
 8007ebe:	e049      	b.n	8007f54 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d83a      	bhi.n	8007f3e <USBD_StdDevReq+0xb2>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <USBD_StdDevReq+0x44>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007f21 	.word	0x08007f21
 8007ed4:	08007f35 	.word	0x08007f35
 8007ed8:	08007f3f 	.word	0x08007f3f
 8007edc:	08007f2b 	.word	0x08007f2b
 8007ee0:	08007f3f 	.word	0x08007f3f
 8007ee4:	08007f03 	.word	0x08007f03
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007f3f 	.word	0x08007f3f
 8007ef0:	08007f17 	.word	0x08007f17
 8007ef4:	08007f0d 	.word	0x08007f0d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9d2 	bl	80082a4 <USBD_GetDescriptor>
      break;
 8007f00:	e022      	b.n	8007f48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fac7 	bl	8008498 <USBD_SetAddress>
      break;
 8007f0a:	e01d      	b.n	8007f48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fb04 	bl	800851c <USBD_SetConfig>
      break;
 8007f14:	e018      	b.n	8007f48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fb8d 	bl	8008638 <USBD_GetConfig>
      break;
 8007f1e:	e013      	b.n	8007f48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fbbc 	bl	80086a0 <USBD_GetStatus>
      break;
 8007f28:	e00e      	b.n	8007f48 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fbea 	bl	8008706 <USBD_SetFeature>
      break;
 8007f32:	e009      	b.n	8007f48 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fbf9 	bl	800872e <USBD_ClrFeature>
      break;
 8007f3c:	e004      	b.n	8007f48 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fc52 	bl	80087ea <USBD_CtlError>
      break;
 8007f46:	bf00      	nop
    }
    break;
 8007f48:	e004      	b.n	8007f54 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fc4c 	bl	80087ea <USBD_CtlError>
    break;
 8007f52:	bf00      	nop
  }

  return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop

08007f60 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f76:	2b20      	cmp	r3, #32
 8007f78:	d003      	beq.n	8007f82 <USBD_StdItfReq+0x22>
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d001      	beq.n	8007f82 <USBD_StdItfReq+0x22>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d12a      	bne.n	8007fd8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d81d      	bhi.n	8007fca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	889b      	ldrh	r3, [r3, #4]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d813      	bhi.n	8007fc0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d110      	bne.n	8007fd4 <USBD_StdItfReq+0x74>
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10d      	bne.n	8007fd4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fcdf 	bl	800897c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007fbe:	e009      	b.n	8007fd4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fc11 	bl	80087ea <USBD_CtlError>
      break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fc0c 	bl	80087ea <USBD_CtlError>
      break;
 8007fd2:	e000      	b.n	8007fd6 <USBD_StdItfReq+0x76>
      break;
 8007fd4:	bf00      	nop
    }
    break;
 8007fd6:	e004      	b.n	8007fe2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fc05 	bl	80087ea <USBD_CtlError>
    break;
 8007fe0:	bf00      	nop
  }

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	889b      	ldrh	r3, [r3, #4]
 8007ffe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008008:	2b20      	cmp	r3, #32
 800800a:	d004      	beq.n	8008016 <USBD_StdEPReq+0x2a>
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d002      	beq.n	8008016 <USBD_StdEPReq+0x2a>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <USBD_StdEPReq+0x3a>
 8008014:	e13b      	b.n	800828e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
    break;
 8008024:	e138      	b.n	8008298 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800802e:	2b20      	cmp	r3, #32
 8008030:	d10a      	bne.n	8008048 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	e128      	b.n	800829a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	785b      	ldrb	r3, [r3, #1]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d03e      	beq.n	80080ce <USBD_StdEPReq+0xe2>
 8008050:	2b03      	cmp	r3, #3
 8008052:	d002      	beq.n	800805a <USBD_StdEPReq+0x6e>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d070      	beq.n	800813a <USBD_StdEPReq+0x14e>
 8008058:	e113      	b.n	8008282 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008060:	2b02      	cmp	r3, #2
 8008062:	d002      	beq.n	800806a <USBD_StdEPReq+0x7e>
 8008064:	2b03      	cmp	r3, #3
 8008066:	d015      	beq.n	8008094 <USBD_StdEPReq+0xa8>
 8008068:	e02b      	b.n	80080c2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00c      	beq.n	800808a <USBD_StdEPReq+0x9e>
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	2b80      	cmp	r3, #128	; 0x80
 8008074:	d009      	beq.n	800808a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f003 fd8e 	bl	800bb9c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008080:	2180      	movs	r1, #128	; 0x80
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f003 fd8a 	bl	800bb9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008088:	e020      	b.n	80080cc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fbac 	bl	80087ea <USBD_CtlError>
        break;
 8008092:	e01b      	b.n	80080cc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	885b      	ldrh	r3, [r3, #2]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10e      	bne.n	80080ba <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00b      	beq.n	80080ba <USBD_StdEPReq+0xce>
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b80      	cmp	r3, #128	; 0x80
 80080a6:	d008      	beq.n	80080ba <USBD_StdEPReq+0xce>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	88db      	ldrh	r3, [r3, #6]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f003 fd71 	bl	800bb9c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fc5e 	bl	800897c <USBD_CtlSendStatus>

        break;
 80080c0:	e004      	b.n	80080cc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fb90 	bl	80087ea <USBD_CtlError>
        break;
 80080ca:	bf00      	nop
      }
      break;
 80080cc:	e0de      	b.n	800828c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d002      	beq.n	80080de <USBD_StdEPReq+0xf2>
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d015      	beq.n	8008108 <USBD_StdEPReq+0x11c>
 80080dc:	e026      	b.n	800812c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00c      	beq.n	80080fe <USBD_StdEPReq+0x112>
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	2b80      	cmp	r3, #128	; 0x80
 80080e8:	d009      	beq.n	80080fe <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f003 fd54 	bl	800bb9c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80080f4:	2180      	movs	r1, #128	; 0x80
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f003 fd50 	bl	800bb9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80080fc:	e01c      	b.n	8008138 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fb72 	bl	80087ea <USBD_CtlError>
        break;
 8008106:	e017      	b.n	8008138 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	885b      	ldrh	r3, [r3, #2]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d112      	bne.n	8008136 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f003 fd5b 	bl	800bbda <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fc29 	bl	800897c <USBD_CtlSendStatus>
        }
        break;
 800812a:	e004      	b.n	8008136 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fb5b 	bl	80087ea <USBD_CtlError>
        break;
 8008134:	e000      	b.n	8008138 <USBD_StdEPReq+0x14c>
        break;
 8008136:	bf00      	nop
      }
      break;
 8008138:	e0a8      	b.n	800828c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008140:	2b02      	cmp	r3, #2
 8008142:	d002      	beq.n	800814a <USBD_StdEPReq+0x15e>
 8008144:	2b03      	cmp	r3, #3
 8008146:	d031      	beq.n	80081ac <USBD_StdEPReq+0x1c0>
 8008148:	e095      	b.n	8008276 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <USBD_StdEPReq+0x174>
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d004      	beq.n	8008160 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fb46 	bl	80087ea <USBD_CtlError>
          break;
 800815e:	e08f      	b.n	8008280 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da0b      	bge.n	8008180 <USBD_StdEPReq+0x194>
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	3310      	adds	r3, #16
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	3304      	adds	r3, #4
 800817e:	e00a      	b.n	8008196 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2202      	movs	r2, #2
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fb8b 	bl	80088c0 <USBD_CtlSendData>
          break;
 80081aa:	e069      	b.n	8008280 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80081ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	da11      	bge.n	80081d8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	f003 020f 	and.w	r2, r3, #15
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	3318      	adds	r3, #24
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d117      	bne.n	80081fe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fb0a 	bl	80087ea <USBD_CtlError>
            break;
 80081d6:	e053      	b.n	8008280 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	f003 020f 	and.w	r2, r3, #15
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 faf7 	bl	80087ea <USBD_CtlError>
            break;
 80081fc:	e040      	b.n	8008280 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80081fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	da0b      	bge.n	800821e <USBD_StdEPReq+0x232>
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	3310      	adds	r3, #16
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	4413      	add	r3, r2
 800821a:	3304      	adds	r3, #4
 800821c:	e00a      	b.n	8008234 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <USBD_StdEPReq+0x256>
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	2b80      	cmp	r3, #128	; 0x80
 8008240:	d103      	bne.n	800824a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	e00e      	b.n	8008268 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f003 fce2 	bl	800bc18 <USBD_LL_IsStallEP>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e002      	b.n	8008268 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2202      	movs	r2, #2
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fb26 	bl	80088c0 <USBD_CtlSendData>
          break;
 8008274:	e004      	b.n	8008280 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fab6 	bl	80087ea <USBD_CtlError>
        break;
 800827e:	bf00      	nop
      }
      break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fab0 	bl	80087ea <USBD_CtlError>
      break;
 800828a:	bf00      	nop
    }
    break;
 800828c:	e004      	b.n	8008298 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 faaa 	bl	80087ea <USBD_CtlError>
    break;
 8008296:	bf00      	nop
  }

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	f200 80c9 	bhi.w	8008450 <USBD_GetDescriptor+0x1ac>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBD_GetDescriptor+0x20>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082f9 	.word	0x080082f9
 80082cc:	08008339 	.word	0x08008339
 80082d0:	08008451 	.word	0x08008451
 80082d4:	08008451 	.word	0x08008451
 80082d8:	080083fd 	.word	0x080083fd
 80082dc:	08008423 	.word	0x08008423
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	7c12      	ldrb	r2, [r2, #16]
 80082ec:	f107 010a 	add.w	r1, r7, #10
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	60f8      	str	r0, [r7, #12]
    break;
 80082f6:	e0b0      	b.n	800845a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7c1b      	ldrb	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10d      	bne.n	800831c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f107 020a 	add.w	r2, r7, #10
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	2202      	movs	r2, #2
 8008318:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800831a:	e09e      	b.n	800845a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	f107 020a 	add.w	r2, r7, #10
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	2202      	movs	r2, #2
 8008334:	701a      	strb	r2, [r3, #0]
    break;
 8008336:	e090      	b.n	800845a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	885b      	ldrh	r3, [r3, #2]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b05      	cmp	r3, #5
 8008340:	d856      	bhi.n	80083f0 <USBD_GetDescriptor+0x14c>
 8008342:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <USBD_GetDescriptor+0xa4>)
 8008344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008348:	08008361 	.word	0x08008361
 800834c:	08008379 	.word	0x08008379
 8008350:	08008391 	.word	0x08008391
 8008354:	080083a9 	.word	0x080083a9
 8008358:	080083c1 	.word	0x080083c1
 800835c:	080083d9 	.word	0x080083d9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	7c12      	ldrb	r2, [r2, #16]
 800836c:	f107 010a 	add.w	r1, r7, #10
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	60f8      	str	r0, [r7, #12]
      break;
 8008376:	e040      	b.n	80083fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 010a 	add.w	r1, r7, #10
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
      break;
 800838e:	e034      	b.n	80083fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	7c12      	ldrb	r2, [r2, #16]
 800839c:	f107 010a 	add.w	r1, r7, #10
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	60f8      	str	r0, [r7, #12]
      break;
 80083a6:	e028      	b.n	80083fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7c12      	ldrb	r2, [r2, #16]
 80083b4:	f107 010a 	add.w	r1, r7, #10
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
      break;
 80083be:	e01c      	b.n	80083fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	7c12      	ldrb	r2, [r2, #16]
 80083cc:	f107 010a 	add.w	r1, r7, #10
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
 80083d4:	60f8      	str	r0, [r7, #12]
      break;
 80083d6:	e010      	b.n	80083fa <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 010a 	add.w	r1, r7, #10
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
      break;
 80083ee:	e004      	b.n	80083fa <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f9f9 	bl	80087ea <USBD_CtlError>
      return;
 80083f8:	e04b      	b.n	8008492 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80083fa:	e02e      	b.n	800845a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7c1b      	ldrb	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	f107 020a 	add.w	r2, r7, #10
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
 8008414:	60f8      	str	r0, [r7, #12]
      break;
 8008416:	e020      	b.n	800845a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9e5 	bl	80087ea <USBD_CtlError>
      return;
 8008420:	e037      	b.n	8008492 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7c1b      	ldrb	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10d      	bne.n	8008446 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	f107 020a 	add.w	r2, r7, #10
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
 800843a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3301      	adds	r3, #1
 8008440:	2207      	movs	r2, #7
 8008442:	701a      	strb	r2, [r3, #0]
      break;
 8008444:	e009      	b.n	800845a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f9ce 	bl	80087ea <USBD_CtlError>
      return;
 800844e:	e020      	b.n	8008492 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f9c9 	bl	80087ea <USBD_CtlError>
    return;
 8008458:	e01b      	b.n	8008492 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800845a:	897b      	ldrh	r3, [r7, #10]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d011      	beq.n	8008484 <USBD_GetDescriptor+0x1e0>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	88db      	ldrh	r3, [r3, #6]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00d      	beq.n	8008484 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	88da      	ldrh	r2, [r3, #6]
 800846c:	897b      	ldrh	r3, [r7, #10]
 800846e:	4293      	cmp	r3, r2
 8008470:	bf28      	it	cs
 8008472:	4613      	movcs	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008478:	897b      	ldrh	r3, [r7, #10]
 800847a:	461a      	mov	r2, r3
 800847c:	68f9      	ldr	r1, [r7, #12]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa1e 	bl	80088c0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	88db      	ldrh	r3, [r3, #6]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa75 	bl	800897c <USBD_CtlSendStatus>
  }
}
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	889b      	ldrh	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d130      	bne.n	800850c <USBD_SetAddress+0x74>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	88db      	ldrh	r3, [r3, #6]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d12c      	bne.n	800850c <USBD_SetAddress+0x74>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	2b7f      	cmp	r3, #127	; 0x7f
 80084b8:	d828      	bhi.n	800850c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	885b      	ldrh	r3, [r3, #2]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d104      	bne.n	80084da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f989 	bl	80087ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d8:	e01c      	b.n	8008514 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7bfa      	ldrb	r2, [r7, #15]
 80084de:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f003 fbc2 	bl	800bc70 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fa45 	bl	800897c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008500:	e008      	b.n	8008514 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850a:	e003      	b.n	8008514 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f96b 	bl	80087ea <USBD_CtlError>
  }
}
 8008514:	bf00      	nop
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	885b      	ldrh	r3, [r3, #2]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	4b41      	ldr	r3, [pc, #260]	; (8008634 <USBD_SetConfig+0x118>)
 800852e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008530:	4b40      	ldr	r3, [pc, #256]	; (8008634 <USBD_SetConfig+0x118>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d904      	bls.n	8008542 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f955 	bl	80087ea <USBD_CtlError>
 8008540:	e075      	b.n	800862e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008548:	2b02      	cmp	r3, #2
 800854a:	d002      	beq.n	8008552 <USBD_SetConfig+0x36>
 800854c:	2b03      	cmp	r3, #3
 800854e:	d023      	beq.n	8008598 <USBD_SetConfig+0x7c>
 8008550:	e062      	b.n	8008618 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008552:	4b38      	ldr	r3, [pc, #224]	; (8008634 <USBD_SetConfig+0x118>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01a      	beq.n	8008590 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800855a:	4b36      	ldr	r3, [pc, #216]	; (8008634 <USBD_SetConfig+0x118>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2203      	movs	r2, #3
 8008568:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800856c:	4b31      	ldr	r3, [pc, #196]	; (8008634 <USBD_SetConfig+0x118>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7ff fa2a 	bl	80079cc <USBD_SetClassConfig>
 8008578:	4603      	mov	r3, r0
 800857a:	2b02      	cmp	r3, #2
 800857c:	d104      	bne.n	8008588 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f932 	bl	80087ea <USBD_CtlError>
          return;
 8008586:	e052      	b.n	800862e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f9f7 	bl	800897c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800858e:	e04e      	b.n	800862e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f9f3 	bl	800897c <USBD_CtlSendStatus>
      break;
 8008596:	e04a      	b.n	800862e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008598:	4b26      	ldr	r3, [pc, #152]	; (8008634 <USBD_SetConfig+0x118>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d112      	bne.n	80085c6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80085a8:	4b22      	ldr	r3, [pc, #136]	; (8008634 <USBD_SetConfig+0x118>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80085b2:	4b20      	ldr	r3, [pc, #128]	; (8008634 <USBD_SetConfig+0x118>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff fa26 	bl	8007a0a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9dc 	bl	800897c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80085c4:	e033      	b.n	800862e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80085c6:	4b1b      	ldr	r3, [pc, #108]	; (8008634 <USBD_SetConfig+0x118>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d01d      	beq.n	8008610 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fa14 	bl	8007a0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085e2:	4b14      	ldr	r3, [pc, #80]	; (8008634 <USBD_SetConfig+0x118>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085ec:	4b11      	ldr	r3, [pc, #68]	; (8008634 <USBD_SetConfig+0x118>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff f9ea 	bl	80079cc <USBD_SetClassConfig>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d104      	bne.n	8008608 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f8f2 	bl	80087ea <USBD_CtlError>
          return;
 8008606:	e012      	b.n	800862e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f9b7 	bl	800897c <USBD_CtlSendStatus>
      break;
 800860e:	e00e      	b.n	800862e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f9b3 	bl	800897c <USBD_CtlSendStatus>
      break;
 8008616:	e00a      	b.n	800862e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f8e5 	bl	80087ea <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008620:	4b04      	ldr	r3, [pc, #16]	; (8008634 <USBD_SetConfig+0x118>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff f9ef 	bl	8007a0a <USBD_ClrClassConfig>
      break;
 800862c:	bf00      	nop
    }
  }
}
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20000200 	.word	0x20000200

08008638 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	88db      	ldrh	r3, [r3, #6]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d004      	beq.n	8008654 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f8cc 	bl	80087ea <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008652:	e021      	b.n	8008698 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800865a:	2b01      	cmp	r3, #1
 800865c:	db17      	blt.n	800868e <USBD_GetConfig+0x56>
 800865e:	2b02      	cmp	r3, #2
 8008660:	dd02      	ble.n	8008668 <USBD_GetConfig+0x30>
 8008662:	2b03      	cmp	r3, #3
 8008664:	d00b      	beq.n	800867e <USBD_GetConfig+0x46>
 8008666:	e012      	b.n	800868e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3308      	adds	r3, #8
 8008672:	2201      	movs	r2, #1
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f922 	bl	80088c0 <USBD_CtlSendData>
      break;
 800867c:	e00c      	b.n	8008698 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3304      	adds	r3, #4
 8008682:	2201      	movs	r2, #1
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f91a 	bl	80088c0 <USBD_CtlSendData>
      break;
 800868c:	e004      	b.n	8008698 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8aa 	bl	80087ea <USBD_CtlError>
      break;
 8008696:	bf00      	nop
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086b0:	3b01      	subs	r3, #1
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d81e      	bhi.n	80086f4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	88db      	ldrh	r3, [r3, #6]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d004      	beq.n	80086c8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f892 	bl	80087ea <USBD_CtlError>
      break;
 80086c6:	e01a      	b.n	80086fe <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f043 0202 	orr.w	r2, r3, #2
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	330c      	adds	r3, #12
 80086e8:	2202      	movs	r2, #2
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8e7 	bl	80088c0 <USBD_CtlSendData>
    break;
 80086f2:	e004      	b.n	80086fe <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f877 	bl	80087ea <USBD_CtlError>
    break;
 80086fc:	bf00      	nop
  }
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	885b      	ldrh	r3, [r3, #2]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d106      	bne.n	8008726 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f92b 	bl	800897c <USBD_CtlSendStatus>
  }

}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800873e:	3b01      	subs	r3, #1
 8008740:	2b02      	cmp	r3, #2
 8008742:	d80b      	bhi.n	800875c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	885b      	ldrh	r3, [r3, #2]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10c      	bne.n	8008766 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f911 	bl	800897c <USBD_CtlSendStatus>
    }
    break;
 800875a:	e004      	b.n	8008766 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f843 	bl	80087ea <USBD_CtlError>
    break;
 8008764:	e000      	b.n	8008768 <USBD_ClrFeature+0x3a>
    break;
 8008766:	bf00      	nop
  }
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781a      	ldrb	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	785a      	ldrb	r2, [r3, #1]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3302      	adds	r3, #2
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b29a      	uxth	r2, r3
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	3303      	adds	r3, #3
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	b29b      	uxth	r3, r3
 800879e:	4413      	add	r3, r2
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	3304      	adds	r3, #4
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	3305      	adds	r3, #5
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4413      	add	r3, r2
 80087bc:	b29a      	uxth	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	3306      	adds	r3, #6
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	3307      	adds	r3, #7
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	4413      	add	r3, r2
 80087d8:	b29a      	uxth	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	80da      	strh	r2, [r3, #6]

}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80087f4:	2180      	movs	r1, #128	; 0x80
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f003 f9d0 	bl	800bb9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f003 f9cc 	bl	800bb9c <USBD_LL_StallEP>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d032      	beq.n	8008888 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f834 	bl	8008890 <USBD_GetLen>
 8008828:	4603      	mov	r3, r0
 800882a:	3301      	adds	r3, #1
 800882c:	b29b      	uxth	r3, r3
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	b29a      	uxth	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	75fa      	strb	r2, [r7, #23]
 800883c:	461a      	mov	r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	7812      	ldrb	r2, [r2, #0]
 8008846:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	75fa      	strb	r2, [r7, #23]
 800884e:	461a      	mov	r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4413      	add	r3, r2
 8008854:	2203      	movs	r2, #3
 8008856:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008858:	e012      	b.n	8008880 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	60fa      	str	r2, [r7, #12]
 8008860:	7dfa      	ldrb	r2, [r7, #23]
 8008862:	1c51      	adds	r1, r2, #1
 8008864:	75f9      	strb	r1, [r7, #23]
 8008866:	4611      	mov	r1, r2
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	440a      	add	r2, r1
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	75fa      	strb	r2, [r7, #23]
 8008876:	461a      	mov	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4413      	add	r3, r2
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e8      	bne.n	800885a <USBD_GetString+0x4e>
    }
  }
}
 8008888:	bf00      	nop
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800889c:	e005      	b.n	80088aa <USBD_GetLen+0x1a>
    {
        len++;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	3301      	adds	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3301      	adds	r3, #1
 80088a8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f5      	bne.n	800889e <USBD_GetLen+0xe>
    }

    return len;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2202      	movs	r2, #2
 80088d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80088d6:	88fa      	ldrh	r2, [r7, #6]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	2100      	movs	r1, #0
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f003 f9e0 	bl	800bcae <USBD_LL_Transmit>

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	2100      	movs	r1, #0
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f003 f9ce 	bl	800bcae <USBD_LL_Transmit>

  return USBD_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4613      	mov	r3, r2
 8008928:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2203      	movs	r2, #3
 800892e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008932:	88fa      	ldrh	r2, [r7, #6]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800893a:	88fa      	ldrh	r2, [r7, #6]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008942:	88fb      	ldrh	r3, [r7, #6]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	2100      	movs	r1, #0
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f003 f9d3 	bl	800bcf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	2100      	movs	r1, #0
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f003 f9c1 	bl	800bcf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2204      	movs	r2, #4
 8008988:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800898c:	2300      	movs	r3, #0
 800898e:	2200      	movs	r2, #0
 8008990:	2100      	movs	r1, #0
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f003 f98b 	bl	800bcae <USBD_LL_Transmit>

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2205      	movs	r2, #5
 80089ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80089b2:	2300      	movs	r3, #0
 80089b4:	2200      	movs	r2, #0
 80089b6:	2100      	movs	r1, #0
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f003 f99b 	bl	800bcf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ce:	f3ef 8305 	mrs	r3, IPSR
 80089d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80089d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10f      	bne.n	80089fa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089da:	f3ef 8310 	mrs	r3, PRIMASK
 80089de:	607b      	str	r3, [r7, #4]
  return(result);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <osKernelInitialize+0x32>
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <osKernelInitialize+0x64>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d109      	bne.n	8008a02 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089ee:	f3ef 8311 	mrs	r3, BASEPRI
 80089f2:	603b      	str	r3, [r7, #0]
  return(result);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80089fa:	f06f 0305 	mvn.w	r3, #5
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e00c      	b.n	8008a1c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a02:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <osKernelInitialize+0x64>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008a0a:	4b08      	ldr	r3, [pc, #32]	; (8008a2c <osKernelInitialize+0x64>)
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e002      	b.n	8008a1c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20000204 	.word	0x20000204

08008a30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a36:	f3ef 8305 	mrs	r3, IPSR
 8008a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10f      	bne.n	8008a62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a42:	f3ef 8310 	mrs	r3, PRIMASK
 8008a46:	607b      	str	r3, [r7, #4]
  return(result);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <osKernelStart+0x32>
 8008a4e:	4b11      	ldr	r3, [pc, #68]	; (8008a94 <osKernelStart+0x64>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d109      	bne.n	8008a6a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a56:	f3ef 8311 	mrs	r3, BASEPRI
 8008a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008a62:	f06f 0305 	mvn.w	r3, #5
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	e00e      	b.n	8008a88 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <osKernelStart+0x64>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d107      	bne.n	8008a82 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008a72:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <osKernelStart+0x64>)
 8008a74:	2202      	movs	r2, #2
 8008a76:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008a78:	f001 f86a 	bl	8009b50 <vTaskStartScheduler>
      stat = osOK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	e002      	b.n	8008a88 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008a82:	f04f 33ff 	mov.w	r3, #4294967295
 8008a86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a88:	68fb      	ldr	r3, [r7, #12]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000204 	.word	0x20000204

08008a98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b092      	sub	sp, #72	; 0x48
 8008a9c:	af04      	add	r7, sp, #16
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aa8:	f3ef 8305 	mrs	r3, IPSR
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 8094 	bne.w	8008bde <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aba:	623b      	str	r3, [r7, #32]
  return(result);
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f040 808d 	bne.w	8008bde <osThreadNew+0x146>
 8008ac4:	4b48      	ldr	r3, [pc, #288]	; (8008be8 <osThreadNew+0x150>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d106      	bne.n	8008ada <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008acc:	f3ef 8311 	mrs	r3, BASEPRI
 8008ad0:	61fb      	str	r3, [r7, #28]
  return(result);
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f040 8082 	bne.w	8008bde <osThreadNew+0x146>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d07e      	beq.n	8008bde <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008ae0:	2380      	movs	r3, #128	; 0x80
 8008ae2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008ae4:	2318      	movs	r3, #24
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008ae8:	2300      	movs	r3, #0
 8008aea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008aec:	f107 031b 	add.w	r3, r7, #27
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008af2:	f04f 33ff 	mov.w	r3, #4294967295
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d045      	beq.n	8008b8a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <osThreadNew+0x74>
        name = attr->name;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <osThreadNew+0x9a>
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	2b38      	cmp	r3, #56	; 0x38
 8008b24:	d805      	bhi.n	8008b32 <osThreadNew+0x9a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <osThreadNew+0x9e>
        return (NULL);
 8008b32:	2300      	movs	r3, #0
 8008b34:	e054      	b.n	8008be0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	089b      	lsrs	r3, r3, #2
 8008b44:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <osThreadNew+0xd4>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	2b5b      	cmp	r3, #91	; 0x5b
 8008b54:	d90a      	bls.n	8008b6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d006      	beq.n	8008b6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <osThreadNew+0xd4>
        mem = 1;
 8008b66:	2301      	movs	r3, #1
 8008b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b6a:	e010      	b.n	8008b8e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10c      	bne.n	8008b8e <osThreadNew+0xf6>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d108      	bne.n	8008b8e <osThreadNew+0xf6>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <osThreadNew+0xf6>
          mem = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b88:	e001      	b.n	8008b8e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d110      	bne.n	8008bb6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b9c:	9202      	str	r2, [sp, #8]
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fe08 	bl	80097c0 <xTaskCreateStatic>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	e013      	b.n	8008bde <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d110      	bne.n	8008bde <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	f107 0314 	add.w	r3, r7, #20
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fe4f 	bl	8009872 <xTaskCreate>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d001      	beq.n	8008bde <osThreadNew+0x146>
          hTask = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008bde:	697b      	ldr	r3, [r7, #20]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3738      	adds	r7, #56	; 0x38
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20000204 	.word	0x20000204

08008bec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bf4:	f3ef 8305 	mrs	r3, IPSR
 8008bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8008bfa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10f      	bne.n	8008c20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c00:	f3ef 8310 	mrs	r3, PRIMASK
 8008c04:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d109      	bne.n	8008c20 <osDelay+0x34>
 8008c0c:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <osDelay+0x58>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d109      	bne.n	8008c28 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c14:	f3ef 8311 	mrs	r3, BASEPRI
 8008c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <osDelay+0x3c>
    stat = osErrorISR;
 8008c20:	f06f 0305 	mvn.w	r3, #5
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	e007      	b.n	8008c38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 ff58 	bl	8009ae8 <vTaskDelay>
    }
  }

  return (stat);
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000204 	.word	0x20000204

08008c48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a07      	ldr	r2, [pc, #28]	; (8008c74 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4a06      	ldr	r2, [pc, #24]	; (8008c78 <vApplicationGetIdleTaskMemory+0x30>)
 8008c5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2280      	movs	r2, #128	; 0x80
 8008c64:	601a      	str	r2, [r3, #0]
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000208 	.word	0x20000208
 8008c78:	20000264 	.word	0x20000264

08008c7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4a07      	ldr	r2, [pc, #28]	; (8008ca8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4a06      	ldr	r2, [pc, #24]	; (8008cac <vApplicationGetTimerTaskMemory+0x30>)
 8008c92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c9a:	601a      	str	r2, [r3, #0]
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000464 	.word	0x20000464
 8008cac:	200004c0 	.word	0x200004c0

08008cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f103 0208 	add.w	r2, r3, #8
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f103 0208 	add.w	r2, r3, #8
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f103 0208 	add.w	r2, r3, #8
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	601a      	str	r2, [r3, #0]
}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d68:	d103      	bne.n	8008d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e00c      	b.n	8008d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3308      	adds	r3, #8
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	e002      	b.n	8008d80 <vListInsert+0x2e>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d2f6      	bcs.n	8008d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
}
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6892      	ldr	r2, [r2, #8]
 8008dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6852      	ldr	r2, [r2, #4]
 8008de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d103      	bne.n	8008df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1e5a      	subs	r2, r3, #1
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	e7fe      	b.n	8008e3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008e40:	f001 ffd4 	bl	800adec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4c:	68f9      	ldr	r1, [r7, #12]
 8008e4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e70:	3b01      	subs	r3, #1
 8008e72:	68f9      	ldr	r1, [r7, #12]
 8008e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e76:	fb01 f303 	mul.w	r3, r1, r3
 8008e7a:	441a      	add	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	22ff      	movs	r2, #255	; 0xff
 8008e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	22ff      	movs	r2, #255	; 0xff
 8008e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d114      	bne.n	8008ec0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d01a      	beq.n	8008ed4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3310      	adds	r3, #16
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 f8da 	bl	800a05c <xTaskRemoveFromEventList>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d012      	beq.n	8008ed4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008eae:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <xQueueGenericReset+0xcc>)
 8008eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	e009      	b.n	8008ed4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff fef3 	bl	8008cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3324      	adds	r3, #36	; 0x24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff feee 	bl	8008cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ed4:	f001 ffb8 	bl	800ae48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ed8:	2301      	movs	r3, #1
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08e      	sub	sp, #56	; 0x38
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <xQueueGenericCreateStatic+0x28>
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f0e:	e7fe      	b.n	8008f0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <xQueueGenericCreateStatic+0x42>
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
 8008f28:	e7fe      	b.n	8008f28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <xQueueGenericCreateStatic+0x4e>
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <xQueueGenericCreateStatic+0x52>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <xQueueGenericCreateStatic+0x54>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d109      	bne.n	8008f54 <xQueueGenericCreateStatic+0x6c>
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	623b      	str	r3, [r7, #32]
 8008f52:	e7fe      	b.n	8008f52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <xQueueGenericCreateStatic+0x78>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <xQueueGenericCreateStatic+0x7c>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <xQueueGenericCreateStatic+0x7e>
 8008f64:	2300      	movs	r3, #0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <xQueueGenericCreateStatic+0x96>
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	e7fe      	b.n	8008f7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f7e:	2350      	movs	r3, #80	; 0x50
 8008f80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b50      	cmp	r3, #80	; 0x50
 8008f86:	d009      	beq.n	8008f9c <xQueueGenericCreateStatic+0xb4>
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	e7fe      	b.n	8008f9a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00d      	beq.n	8008fc2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f805 	bl	8008fcc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3730      	adds	r7, #48	; 0x30
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d103      	bne.n	8008fe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	e002      	b.n	8008fee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	69b8      	ldr	r0, [r7, #24]
 8008ffe:	f7ff ff0b 	bl	8008e18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08e      	sub	sp, #56	; 0x38
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009022:	2300      	movs	r3, #0
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d109      	bne.n	8009044 <xQueueGenericSend+0x30>
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	62bb      	str	r3, [r7, #40]	; 0x28
 8009042:	e7fe      	b.n	8009042 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <xQueueGenericSend+0x3e>
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <xQueueGenericSend+0x42>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <xQueueGenericSend+0x44>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <xQueueGenericSend+0x5c>
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
 800906e:	e7fe      	b.n	800906e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d103      	bne.n	800907e <xQueueGenericSend+0x6a>
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <xQueueGenericSend+0x6e>
 800907e:	2301      	movs	r3, #1
 8009080:	e000      	b.n	8009084 <xQueueGenericSend+0x70>
 8009082:	2300      	movs	r3, #0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d109      	bne.n	800909c <xQueueGenericSend+0x88>
 8009088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	623b      	str	r3, [r7, #32]
 800909a:	e7fe      	b.n	800909a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800909c:	f001 f99a 	bl	800a3d4 <xTaskGetSchedulerState>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <xQueueGenericSend+0x98>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <xQueueGenericSend+0x9c>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <xQueueGenericSend+0x9e>
 80090b0:	2300      	movs	r3, #0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <xQueueGenericSend+0xb6>
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	e7fe      	b.n	80090c8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090ca:	f001 fe8f 	bl	800adec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d302      	bcc.n	80090e0 <xQueueGenericSend+0xcc>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d129      	bne.n	8009134 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090e6:	f000 f9ff 	bl	80094e8 <prvCopyDataToQueue>
 80090ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	3324      	adds	r3, #36	; 0x24
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 ffaf 	bl	800a05c <xTaskRemoveFromEventList>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d013      	beq.n	800912c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009104:	4b3f      	ldr	r3, [pc, #252]	; (8009204 <xQueueGenericSend+0x1f0>)
 8009106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	e00a      	b.n	800912c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800911c:	4b39      	ldr	r3, [pc, #228]	; (8009204 <xQueueGenericSend+0x1f0>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800912c:	f001 fe8c 	bl	800ae48 <vPortExitCritical>
				return pdPASS;
 8009130:	2301      	movs	r3, #1
 8009132:	e063      	b.n	80091fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800913a:	f001 fe85 	bl	800ae48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800913e:	2300      	movs	r3, #0
 8009140:	e05c      	b.n	80091fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009148:	f107 0314 	add.w	r3, r7, #20
 800914c:	4618      	mov	r0, r3
 800914e:	f000 ffe7 	bl	800a120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009152:	2301      	movs	r3, #1
 8009154:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009156:	f001 fe77 	bl	800ae48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800915a:	f000 fd5d 	bl	8009c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800915e:	f001 fe45 	bl	800adec <vPortEnterCritical>
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009168:	b25b      	sxtb	r3, r3
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d103      	bne.n	8009178 <xQueueGenericSend+0x164>
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800917e:	b25b      	sxtb	r3, r3
 8009180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009184:	d103      	bne.n	800918e <xQueueGenericSend+0x17a>
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800918e:	f001 fe5b 	bl	800ae48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009192:	1d3a      	adds	r2, r7, #4
 8009194:	f107 0314 	add.w	r3, r7, #20
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f000 ffd6 	bl	800a14c <xTaskCheckForTimeOut>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d124      	bne.n	80091f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a8:	f000 fa96 	bl	80096d8 <prvIsQueueFull>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d018      	beq.n	80091e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	3310      	adds	r3, #16
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 ff00 	bl	8009fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c2:	f000 fa21 	bl	8009608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091c6:	f000 fd35 	bl	8009c34 <xTaskResumeAll>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f af7c 	bne.w	80090ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80091d2:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <xQueueGenericSend+0x1f0>)
 80091d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	e772      	b.n	80090ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091e6:	f000 fa0f 	bl	8009608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ea:	f000 fd23 	bl	8009c34 <xTaskResumeAll>
 80091ee:	e76c      	b.n	80090ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091f2:	f000 fa09 	bl	8009608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091f6:	f000 fd1d 	bl	8009c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091fa:	2300      	movs	r3, #0
		}
	}
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3738      	adds	r7, #56	; 0x38
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	e000ed04 	.word	0xe000ed04

08009208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08e      	sub	sp, #56	; 0x38
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <xQueueGenericSendFromISR+0x2c>
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
 8009232:	e7fe      	b.n	8009232 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <xQueueGenericSendFromISR+0x3a>
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <xQueueGenericSendFromISR+0x3e>
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <xQueueGenericSendFromISR+0x40>
 8009246:	2300      	movs	r3, #0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <xQueueGenericSendFromISR+0x58>
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	623b      	str	r3, [r7, #32]
 800925e:	e7fe      	b.n	800925e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d103      	bne.n	800926e <xQueueGenericSendFromISR+0x66>
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926a:	2b01      	cmp	r3, #1
 800926c:	d101      	bne.n	8009272 <xQueueGenericSendFromISR+0x6a>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <xQueueGenericSendFromISR+0x6c>
 8009272:	2300      	movs	r3, #0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d109      	bne.n	800928c <xQueueGenericSendFromISR+0x84>
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	61fb      	str	r3, [r7, #28]
 800928a:	e7fe      	b.n	800928a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800928c:	f001 fe8a 	bl	800afa4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009290:	f3ef 8211 	mrs	r2, BASEPRI
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	61ba      	str	r2, [r7, #24]
 80092a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d302      	bcc.n	80092be <xQueueGenericSendFromISR+0xb6>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d12c      	bne.n	8009318 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	68b9      	ldr	r1, [r7, #8]
 80092cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ce:	f000 f90b 	bl	80094e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d112      	bne.n	8009302 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d016      	beq.n	8009312 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	3324      	adds	r3, #36	; 0x24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 feb7 	bl	800a05c <xTaskRemoveFromEventList>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00e      	beq.n	8009312 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e007      	b.n	8009312 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009306:	3301      	adds	r3, #1
 8009308:	b2db      	uxtb	r3, r3
 800930a:	b25a      	sxtb	r2, r3
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009312:	2301      	movs	r3, #1
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009316:	e001      	b.n	800931c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009318:	2300      	movs	r3, #0
 800931a:	637b      	str	r3, [r7, #52]	; 0x34
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009328:	4618      	mov	r0, r3
 800932a:	3738      	adds	r7, #56	; 0x38
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08c      	sub	sp, #48	; 0x30
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800933c:	2300      	movs	r3, #0
 800933e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <xQueueReceive+0x2e>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	623b      	str	r3, [r7, #32]
 800935c:	e7fe      	b.n	800935c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <xQueueReceive+0x3c>
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <xQueueReceive+0x40>
 800936c:	2301      	movs	r3, #1
 800936e:	e000      	b.n	8009372 <xQueueReceive+0x42>
 8009370:	2300      	movs	r3, #0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d109      	bne.n	800938a <xQueueReceive+0x5a>
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	e7fe      	b.n	8009388 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800938a:	f001 f823 	bl	800a3d4 <xTaskGetSchedulerState>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <xQueueReceive+0x6a>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <xQueueReceive+0x6e>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueReceive+0x70>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d109      	bne.n	80093b8 <xQueueReceive+0x88>
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	e7fe      	b.n	80093b6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80093b8:	f001 fd18 	bl	800adec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01f      	beq.n	8009408 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093cc:	f000 f8f6 	bl	80095bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	1e5a      	subs	r2, r3, #1
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00f      	beq.n	8009400 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	3310      	adds	r3, #16
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fe39 	bl	800a05c <xTaskRemoveFromEventList>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093f0:	4b3c      	ldr	r3, [pc, #240]	; (80094e4 <xQueueReceive+0x1b4>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009400:	f001 fd22 	bl	800ae48 <vPortExitCritical>
				return pdPASS;
 8009404:	2301      	movs	r3, #1
 8009406:	e069      	b.n	80094dc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d103      	bne.n	8009416 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800940e:	f001 fd1b 	bl	800ae48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009412:	2300      	movs	r3, #0
 8009414:	e062      	b.n	80094dc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800941c:	f107 0310 	add.w	r3, r7, #16
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fe7d 	bl	800a120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009426:	2301      	movs	r3, #1
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800942a:	f001 fd0d 	bl	800ae48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800942e:	f000 fbf3 	bl	8009c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009432:	f001 fcdb 	bl	800adec <vPortEnterCritical>
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800943c:	b25b      	sxtb	r3, r3
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009442:	d103      	bne.n	800944c <xQueueReceive+0x11c>
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009452:	b25b      	sxtb	r3, r3
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d103      	bne.n	8009462 <xQueueReceive+0x132>
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009462:	f001 fcf1 	bl	800ae48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009466:	1d3a      	adds	r2, r7, #4
 8009468:	f107 0310 	add.w	r3, r7, #16
 800946c:	4611      	mov	r1, r2
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fe6c 	bl	800a14c <xTaskCheckForTimeOut>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d123      	bne.n	80094c2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800947a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800947c:	f000 f916 	bl	80096ac <prvIsQueueEmpty>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d017      	beq.n	80094b6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	3324      	adds	r3, #36	; 0x24
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fd96 	bl	8009fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009496:	f000 f8b7 	bl	8009608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800949a:	f000 fbcb 	bl	8009c34 <xTaskResumeAll>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d189      	bne.n	80093b8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80094a4:	4b0f      	ldr	r3, [pc, #60]	; (80094e4 <xQueueReceive+0x1b4>)
 80094a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	e780      	b.n	80093b8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b8:	f000 f8a6 	bl	8009608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094bc:	f000 fbba 	bl	8009c34 <xTaskResumeAll>
 80094c0:	e77a      	b.n	80093b8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c4:	f000 f8a0 	bl	8009608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094c8:	f000 fbb4 	bl	8009c34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ce:	f000 f8ed 	bl	80096ac <prvIsQueueEmpty>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f43f af6f 	beq.w	80093b8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3730      	adds	r7, #48	; 0x30
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10d      	bne.n	8009522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d14d      	bne.n	80095aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 ff7c 	bl	800a410 <xTaskPriorityDisinherit>
 8009518:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	605a      	str	r2, [r3, #4]
 8009520:	e043      	b.n	80095aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d119      	bne.n	800955c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6898      	ldr	r0, [r3, #8]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009530:	461a      	mov	r2, r3
 8009532:	68b9      	ldr	r1, [r7, #8]
 8009534:	f002 fc7a 	bl	800be2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	441a      	add	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	429a      	cmp	r2, r3
 8009550:	d32b      	bcc.n	80095aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	609a      	str	r2, [r3, #8]
 800955a:	e026      	b.n	80095aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68d8      	ldr	r0, [r3, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009564:	461a      	mov	r2, r3
 8009566:	68b9      	ldr	r1, [r7, #8]
 8009568:	f002 fc60 	bl	800be2c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009574:	425b      	negs	r3, r3
 8009576:	441a      	add	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	429a      	cmp	r2, r3
 8009586:	d207      	bcs.n	8009598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	425b      	negs	r3, r3
 8009592:	441a      	add	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b02      	cmp	r3, #2
 800959c:	d105      	bne.n	80095aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095b2:	697b      	ldr	r3, [r7, #20]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d018      	beq.n	8009600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	441a      	add	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d303      	bcc.n	80095f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68d9      	ldr	r1, [r3, #12]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f8:	461a      	mov	r2, r3
 80095fa:	6838      	ldr	r0, [r7, #0]
 80095fc:	f002 fc16 	bl	800be2c <memcpy>
	}
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009610:	f001 fbec 	bl	800adec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800961c:	e011      	b.n	8009642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	d012      	beq.n	800964c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3324      	adds	r3, #36	; 0x24
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fd16 	bl	800a05c <xTaskRemoveFromEventList>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009636:	f000 fde9 	bl	800a20c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	3b01      	subs	r3, #1
 800963e:	b2db      	uxtb	r3, r3
 8009640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009646:	2b00      	cmp	r3, #0
 8009648:	dce9      	bgt.n	800961e <prvUnlockQueue+0x16>
 800964a:	e000      	b.n	800964e <prvUnlockQueue+0x46>
					break;
 800964c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	22ff      	movs	r2, #255	; 0xff
 8009652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009656:	f001 fbf7 	bl	800ae48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800965a:	f001 fbc7 	bl	800adec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009666:	e011      	b.n	800968c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d012      	beq.n	8009696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3310      	adds	r3, #16
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fcf1 	bl	800a05c <xTaskRemoveFromEventList>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009680:	f000 fdc4 	bl	800a20c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	3b01      	subs	r3, #1
 8009688:	b2db      	uxtb	r3, r3
 800968a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800968c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009690:	2b00      	cmp	r3, #0
 8009692:	dce9      	bgt.n	8009668 <prvUnlockQueue+0x60>
 8009694:	e000      	b.n	8009698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	22ff      	movs	r2, #255	; 0xff
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096a0:	f001 fbd2 	bl	800ae48 <vPortExitCritical>
}
 80096a4:	bf00      	nop
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096b4:	f001 fb9a 	bl	800adec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096c0:	2301      	movs	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	e001      	b.n	80096ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ca:	f001 fbbd 	bl	800ae48 <vPortExitCritical>

	return xReturn;
 80096ce:	68fb      	ldr	r3, [r7, #12]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096e0:	f001 fb84 	bl	800adec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d102      	bne.n	80096f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096f0:	2301      	movs	r3, #1
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	e001      	b.n	80096fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096fa:	f001 fba5 	bl	800ae48 <vPortExitCritical>

	return xReturn;
 80096fe:	68fb      	ldr	r3, [r7, #12]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	e014      	b.n	8009742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009718:	4a0e      	ldr	r2, [pc, #56]	; (8009754 <vQueueAddToRegistry+0x4c>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10b      	bne.n	800973c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009724:	490b      	ldr	r1, [pc, #44]	; (8009754 <vQueueAddToRegistry+0x4c>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800972e:	4a09      	ldr	r2, [pc, #36]	; (8009754 <vQueueAddToRegistry+0x4c>)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	4413      	add	r3, r2
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800973a:	e005      	b.n	8009748 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b07      	cmp	r3, #7
 8009746:	d9e7      	bls.n	8009718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009748:	bf00      	nop
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	20004ca0 	.word	0x20004ca0

08009758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009768:	f001 fb40 	bl	800adec <vPortEnterCritical>
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009772:	b25b      	sxtb	r3, r3
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d103      	bne.n	8009782 <vQueueWaitForMessageRestricted+0x2a>
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009788:	b25b      	sxtb	r3, r3
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d103      	bne.n	8009798 <vQueueWaitForMessageRestricted+0x40>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009798:	f001 fb56 	bl	800ae48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	3324      	adds	r3, #36	; 0x24
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fc2b 	bl	800a008 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	f7ff ff28 	bl	8009608 <prvUnlockQueue>
	}
 80097b8:	bf00      	nop
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	; 0x38
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d109      	bne.n	80097e8 <xTaskCreateStatic+0x28>
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	623b      	str	r3, [r7, #32]
 80097e6:	e7fe      	b.n	80097e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <xTaskCreateStatic+0x42>
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e7fe      	b.n	8009800 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009802:	235c      	movs	r3, #92	; 0x5c
 8009804:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2b5c      	cmp	r3, #92	; 0x5c
 800980a:	d009      	beq.n	8009820 <xTaskCreateStatic+0x60>
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	e7fe      	b.n	800981e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	2b00      	cmp	r3, #0
 8009824:	d01e      	beq.n	8009864 <xTaskCreateStatic+0xa4>
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01b      	beq.n	8009864 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009834:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	2202      	movs	r2, #2
 800983a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800983e:	2300      	movs	r3, #0
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	9302      	str	r3, [sp, #8]
 8009846:	f107 0314 	add.w	r3, r7, #20
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f850 	bl	80098fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800985c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985e:	f000 f8d3 	bl	8009a08 <prvAddNewTaskToReadyList>
 8009862:	e001      	b.n	8009868 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009868:	697b      	ldr	r3, [r7, #20]
	}
 800986a:	4618      	mov	r0, r3
 800986c:	3728      	adds	r7, #40	; 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009872:	b580      	push	{r7, lr}
 8009874:	b08c      	sub	sp, #48	; 0x30
 8009876:	af04      	add	r7, sp, #16
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009882:	88fb      	ldrh	r3, [r7, #6]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4618      	mov	r0, r3
 8009888:	f001 fbca 	bl	800b020 <pvPortMalloc>
 800988c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00e      	beq.n	80098b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009894:	205c      	movs	r0, #92	; 0x5c
 8009896:	f001 fbc3 	bl	800b020 <pvPortMalloc>
 800989a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
 80098a8:	e005      	b.n	80098b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098aa:	6978      	ldr	r0, [r7, #20]
 80098ac:	f001 fc7a 	bl	800b1a4 <vPortFree>
 80098b0:	e001      	b.n	80098b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d017      	beq.n	80098ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098c4:	88fa      	ldrh	r2, [r7, #6]
 80098c6:	2300      	movs	r3, #0
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	9302      	str	r3, [sp, #8]
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 f80e 	bl	80098fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098e0:	69f8      	ldr	r0, [r7, #28]
 80098e2:	f000 f891 	bl	8009a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098e6:	2301      	movs	r3, #1
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e002      	b.n	80098f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295
 80098f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098f2:	69bb      	ldr	r3, [r7, #24]
	}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	461a      	mov	r2, r3
 8009914:	21a5      	movs	r1, #165	; 0xa5
 8009916:	f002 fa94 	bl	800be42 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009924:	3b01      	subs	r3, #1
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	f023 0307 	bic.w	r3, r3, #7
 8009932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	2b00      	cmp	r3, #0
 800993c:	d009      	beq.n	8009952 <prvInitialiseNewTask+0x56>
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e7fe      	b.n	8009950 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009952:	2300      	movs	r3, #0
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	e012      	b.n	800997e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	7819      	ldrb	r1, [r3, #0]
 8009960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	3334      	adds	r3, #52	; 0x34
 8009968:	460a      	mov	r2, r1
 800996a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d006      	beq.n	8009986 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	3301      	adds	r3, #1
 800997c:	61fb      	str	r3, [r7, #28]
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	2b0f      	cmp	r3, #15
 8009982:	d9e9      	bls.n	8009958 <prvInitialiseNewTask+0x5c>
 8009984:	e000      	b.n	8009988 <prvInitialiseNewTask+0x8c>
		{
			break;
 8009986:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2b37      	cmp	r3, #55	; 0x37
 8009994:	d901      	bls.n	800999a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009996:	2337      	movs	r3, #55	; 0x37
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800999e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	2200      	movs	r2, #0
 80099aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	3304      	adds	r3, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff f99d 	bl	8008cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	3318      	adds	r3, #24
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff f998 	bl	8008cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	2200      	movs	r2, #0
 80099da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	68f9      	ldr	r1, [r7, #12]
 80099e8:	69b8      	ldr	r0, [r7, #24]
 80099ea:	f001 f8db 	bl	800aba4 <pxPortInitialiseStack>
 80099ee:	4602      	mov	r2, r0
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a00:	bf00      	nop
 8009a02:	3720      	adds	r7, #32
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a10:	f001 f9ec 	bl	800adec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a14:	4b2d      	ldr	r3, [pc, #180]	; (8009acc <prvAddNewTaskToReadyList+0xc4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	4a2c      	ldr	r2, [pc, #176]	; (8009acc <prvAddNewTaskToReadyList+0xc4>)
 8009a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a1e:	4b2c      	ldr	r3, [pc, #176]	; (8009ad0 <prvAddNewTaskToReadyList+0xc8>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d109      	bne.n	8009a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a26:	4a2a      	ldr	r2, [pc, #168]	; (8009ad0 <prvAddNewTaskToReadyList+0xc8>)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a2c:	4b27      	ldr	r3, [pc, #156]	; (8009acc <prvAddNewTaskToReadyList+0xc4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d110      	bne.n	8009a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a34:	f000 fc0e 	bl	800a254 <prvInitialiseTaskLists>
 8009a38:	e00d      	b.n	8009a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a3a:	4b26      	ldr	r3, [pc, #152]	; (8009ad4 <prvAddNewTaskToReadyList+0xcc>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d109      	bne.n	8009a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a42:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <prvAddNewTaskToReadyList+0xc8>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d802      	bhi.n	8009a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a50:	4a1f      	ldr	r2, [pc, #124]	; (8009ad0 <prvAddNewTaskToReadyList+0xc8>)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a56:	4b20      	ldr	r3, [pc, #128]	; (8009ad8 <prvAddNewTaskToReadyList+0xd0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	4a1e      	ldr	r2, [pc, #120]	; (8009ad8 <prvAddNewTaskToReadyList+0xd0>)
 8009a5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a60:	4b1d      	ldr	r3, [pc, #116]	; (8009ad8 <prvAddNewTaskToReadyList+0xd0>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	4b1b      	ldr	r3, [pc, #108]	; (8009adc <prvAddNewTaskToReadyList+0xd4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d903      	bls.n	8009a7c <prvAddNewTaskToReadyList+0x74>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	4a18      	ldr	r2, [pc, #96]	; (8009adc <prvAddNewTaskToReadyList+0xd4>)
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4a15      	ldr	r2, [pc, #84]	; (8009ae0 <prvAddNewTaskToReadyList+0xd8>)
 8009a8a:	441a      	add	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4619      	mov	r1, r3
 8009a92:	4610      	mov	r0, r2
 8009a94:	f7ff f939 	bl	8008d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a98:	f001 f9d6 	bl	800ae48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <prvAddNewTaskToReadyList+0xcc>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00e      	beq.n	8009ac2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <prvAddNewTaskToReadyList+0xc8>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d207      	bcs.n	8009ac2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ab2:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <prvAddNewTaskToReadyList+0xdc>)
 8009ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20000d94 	.word	0x20000d94
 8009ad0:	200008c0 	.word	0x200008c0
 8009ad4:	20000da0 	.word	0x20000da0
 8009ad8:	20000db0 	.word	0x20000db0
 8009adc:	20000d9c 	.word	0x20000d9c
 8009ae0:	200008c4 	.word	0x200008c4
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d016      	beq.n	8009b28 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009afa:	4b13      	ldr	r3, [pc, #76]	; (8009b48 <vTaskDelay+0x60>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <vTaskDelay+0x2e>
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	60bb      	str	r3, [r7, #8]
 8009b14:	e7fe      	b.n	8009b14 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009b16:	f000 f87f 	bl	8009c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fce3 	bl	800a4e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b22:	f000 f887 	bl	8009c34 <xTaskResumeAll>
 8009b26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d107      	bne.n	8009b3e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009b2e:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <vTaskDelay+0x64>)
 8009b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b3e:	bf00      	nop
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000dbc 	.word	0x20000dbc
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08a      	sub	sp, #40	; 0x28
 8009b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b5e:	463a      	mov	r2, r7
 8009b60:	1d39      	adds	r1, r7, #4
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff f86e 	bl	8008c48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	9202      	str	r2, [sp, #8]
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	460a      	mov	r2, r1
 8009b7e:	4920      	ldr	r1, [pc, #128]	; (8009c00 <vTaskStartScheduler+0xb0>)
 8009b80:	4820      	ldr	r0, [pc, #128]	; (8009c04 <vTaskStartScheduler+0xb4>)
 8009b82:	f7ff fe1d 	bl	80097c0 <xTaskCreateStatic>
 8009b86:	4602      	mov	r2, r0
 8009b88:	4b1f      	ldr	r3, [pc, #124]	; (8009c08 <vTaskStartScheduler+0xb8>)
 8009b8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b8c:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <vTaskStartScheduler+0xb8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b94:	2301      	movs	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	e001      	b.n	8009b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d102      	bne.n	8009baa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ba4:	f000 fcf4 	bl	800a590 <xTimerCreateTimerTask>
 8009ba8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d115      	bne.n	8009bdc <vTaskStartScheduler+0x8c>
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc2:	4b12      	ldr	r3, [pc, #72]	; (8009c0c <vTaskStartScheduler+0xbc>)
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bca:	4b11      	ldr	r3, [pc, #68]	; (8009c10 <vTaskStartScheduler+0xc0>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009bd0:	4b10      	ldr	r3, [pc, #64]	; (8009c14 <vTaskStartScheduler+0xc4>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bd6:	f001 f86b 	bl	800acb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bda:	e00d      	b.n	8009bf8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d109      	bne.n	8009bf8 <vTaskStartScheduler+0xa8>
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e7fe      	b.n	8009bf6 <vTaskStartScheduler+0xa6>
}
 8009bf8:	bf00      	nop
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	0800c00c 	.word	0x0800c00c
 8009c04:	0800a225 	.word	0x0800a225
 8009c08:	20000db8 	.word	0x20000db8
 8009c0c:	20000db4 	.word	0x20000db4
 8009c10:	20000da0 	.word	0x20000da0
 8009c14:	20000d98 	.word	0x20000d98

08009c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c1c:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <vTaskSuspendAll+0x18>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3301      	adds	r3, #1
 8009c22:	4a03      	ldr	r2, [pc, #12]	; (8009c30 <vTaskSuspendAll+0x18>)
 8009c24:	6013      	str	r3, [r2, #0]
}
 8009c26:	bf00      	nop
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	20000dbc 	.word	0x20000dbc

08009c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c42:	4b41      	ldr	r3, [pc, #260]	; (8009d48 <xTaskResumeAll+0x114>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d109      	bne.n	8009c5e <xTaskResumeAll+0x2a>
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	e7fe      	b.n	8009c5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c5e:	f001 f8c5 	bl	800adec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c62:	4b39      	ldr	r3, [pc, #228]	; (8009d48 <xTaskResumeAll+0x114>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	4a37      	ldr	r2, [pc, #220]	; (8009d48 <xTaskResumeAll+0x114>)
 8009c6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c6c:	4b36      	ldr	r3, [pc, #216]	; (8009d48 <xTaskResumeAll+0x114>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d162      	bne.n	8009d3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c74:	4b35      	ldr	r3, [pc, #212]	; (8009d4c <xTaskResumeAll+0x118>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d05e      	beq.n	8009d3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c7c:	e02f      	b.n	8009cde <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c7e:	4b34      	ldr	r3, [pc, #208]	; (8009d50 <xTaskResumeAll+0x11c>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3318      	adds	r3, #24
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff f89a 	bl	8008dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff f895 	bl	8008dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	4b2d      	ldr	r3, [pc, #180]	; (8009d54 <xTaskResumeAll+0x120>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d903      	bls.n	8009cae <xTaskResumeAll+0x7a>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	4a2a      	ldr	r2, [pc, #168]	; (8009d54 <xTaskResumeAll+0x120>)
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4a27      	ldr	r2, [pc, #156]	; (8009d58 <xTaskResumeAll+0x124>)
 8009cbc:	441a      	add	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f7ff f820 	bl	8008d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cce:	4b23      	ldr	r3, [pc, #140]	; (8009d5c <xTaskResumeAll+0x128>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d302      	bcc.n	8009cde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009cd8:	4b21      	ldr	r3, [pc, #132]	; (8009d60 <xTaskResumeAll+0x12c>)
 8009cda:	2201      	movs	r2, #1
 8009cdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cde:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <xTaskResumeAll+0x11c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1cb      	bne.n	8009c7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cec:	f000 fb4c 	bl	800a388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cf0:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <xTaskResumeAll+0x130>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d010      	beq.n	8009d1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009cfc:	f000 f846 	bl	8009d8c <xTaskIncrementTick>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d06:	4b16      	ldr	r3, [pc, #88]	; (8009d60 <xTaskResumeAll+0x12c>)
 8009d08:	2201      	movs	r2, #1
 8009d0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1f1      	bne.n	8009cfc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009d18:	4b12      	ldr	r3, [pc, #72]	; (8009d64 <xTaskResumeAll+0x130>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d1e:	4b10      	ldr	r3, [pc, #64]	; (8009d60 <xTaskResumeAll+0x12c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d009      	beq.n	8009d3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d26:	2301      	movs	r3, #1
 8009d28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d2a:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <xTaskResumeAll+0x134>)
 8009d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d3a:	f001 f885 	bl	800ae48 <vPortExitCritical>

	return xAlreadyYielded;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	20000dbc 	.word	0x20000dbc
 8009d4c:	20000d94 	.word	0x20000d94
 8009d50:	20000d54 	.word	0x20000d54
 8009d54:	20000d9c 	.word	0x20000d9c
 8009d58:	200008c4 	.word	0x200008c4
 8009d5c:	200008c0 	.word	0x200008c0
 8009d60:	20000da8 	.word	0x20000da8
 8009d64:	20000da4 	.word	0x20000da4
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <xTaskGetTickCount+0x1c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d78:	687b      	ldr	r3, [r7, #4]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	20000d98 	.word	0x20000d98

08009d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d96:	4b51      	ldr	r3, [pc, #324]	; (8009edc <xTaskIncrementTick+0x150>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f040 808d 	bne.w	8009eba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009da0:	4b4f      	ldr	r3, [pc, #316]	; (8009ee0 <xTaskIncrementTick+0x154>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009da8:	4a4d      	ldr	r2, [pc, #308]	; (8009ee0 <xTaskIncrementTick+0x154>)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d11f      	bne.n	8009df4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009db4:	4b4b      	ldr	r3, [pc, #300]	; (8009ee4 <xTaskIncrementTick+0x158>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d009      	beq.n	8009dd2 <xTaskIncrementTick+0x46>
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	e7fe      	b.n	8009dd0 <xTaskIncrementTick+0x44>
 8009dd2:	4b44      	ldr	r3, [pc, #272]	; (8009ee4 <xTaskIncrementTick+0x158>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	4b43      	ldr	r3, [pc, #268]	; (8009ee8 <xTaskIncrementTick+0x15c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a41      	ldr	r2, [pc, #260]	; (8009ee4 <xTaskIncrementTick+0x158>)
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	4a41      	ldr	r2, [pc, #260]	; (8009ee8 <xTaskIncrementTick+0x15c>)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	4b41      	ldr	r3, [pc, #260]	; (8009eec <xTaskIncrementTick+0x160>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	4a3f      	ldr	r2, [pc, #252]	; (8009eec <xTaskIncrementTick+0x160>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	f000 faca 	bl	800a388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009df4:	4b3e      	ldr	r3, [pc, #248]	; (8009ef0 <xTaskIncrementTick+0x164>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d34e      	bcc.n	8009e9c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dfe:	4b39      	ldr	r3, [pc, #228]	; (8009ee4 <xTaskIncrementTick+0x158>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <xTaskIncrementTick+0x80>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e000      	b.n	8009e0e <xTaskIncrementTick+0x82>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e12:	4b37      	ldr	r3, [pc, #220]	; (8009ef0 <xTaskIncrementTick+0x164>)
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295
 8009e18:	601a      	str	r2, [r3, #0]
					break;
 8009e1a:	e03f      	b.n	8009e9c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e1c:	4b31      	ldr	r3, [pc, #196]	; (8009ee4 <xTaskIncrementTick+0x158>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d203      	bcs.n	8009e3c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e34:	4a2e      	ldr	r2, [pc, #184]	; (8009ef0 <xTaskIncrementTick+0x164>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6013      	str	r3, [r2, #0]
						break;
 8009e3a:	e02f      	b.n	8009e9c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe ffbf 	bl	8008dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d004      	beq.n	8009e58 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	3318      	adds	r3, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe ffb6 	bl	8008dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5c:	4b25      	ldr	r3, [pc, #148]	; (8009ef4 <xTaskIncrementTick+0x168>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d903      	bls.n	8009e6c <xTaskIncrementTick+0xe0>
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a22      	ldr	r2, [pc, #136]	; (8009ef4 <xTaskIncrementTick+0x168>)
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <xTaskIncrementTick+0x16c>)
 8009e7a:	441a      	add	r2, r3
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7fe ff41 	bl	8008d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	; (8009efc <xTaskIncrementTick+0x170>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d3b3      	bcc.n	8009dfe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009e96:	2301      	movs	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e9a:	e7b0      	b.n	8009dfe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e9c:	4b17      	ldr	r3, [pc, #92]	; (8009efc <xTaskIncrementTick+0x170>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea2:	4915      	ldr	r1, [pc, #84]	; (8009ef8 <xTaskIncrementTick+0x16c>)
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d907      	bls.n	8009ec4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e004      	b.n	8009ec4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009eba:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <xTaskIncrementTick+0x174>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	4a0f      	ldr	r2, [pc, #60]	; (8009f00 <xTaskIncrementTick+0x174>)
 8009ec2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ec4:	4b0f      	ldr	r3, [pc, #60]	; (8009f04 <xTaskIncrementTick+0x178>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ed0:	697b      	ldr	r3, [r7, #20]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20000dbc 	.word	0x20000dbc
 8009ee0:	20000d98 	.word	0x20000d98
 8009ee4:	20000d4c 	.word	0x20000d4c
 8009ee8:	20000d50 	.word	0x20000d50
 8009eec:	20000dac 	.word	0x20000dac
 8009ef0:	20000db4 	.word	0x20000db4
 8009ef4:	20000d9c 	.word	0x20000d9c
 8009ef8:	200008c4 	.word	0x200008c4
 8009efc:	200008c0 	.word	0x200008c0
 8009f00:	20000da4 	.word	0x20000da4
 8009f04:	20000da8 	.word	0x20000da8

08009f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f0e:	4b27      	ldr	r3, [pc, #156]	; (8009fac <vTaskSwitchContext+0xa4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f16:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <vTaskSwitchContext+0xa8>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f1c:	e040      	b.n	8009fa0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009f1e:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <vTaskSwitchContext+0xa8>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f24:	4b23      	ldr	r3, [pc, #140]	; (8009fb4 <vTaskSwitchContext+0xac>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	e00f      	b.n	8009f4c <vTaskSwitchContext+0x44>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d109      	bne.n	8009f46 <vTaskSwitchContext+0x3e>
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	607b      	str	r3, [r7, #4]
 8009f44:	e7fe      	b.n	8009f44 <vTaskSwitchContext+0x3c>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	491a      	ldr	r1, [pc, #104]	; (8009fb8 <vTaskSwitchContext+0xb0>)
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	440b      	add	r3, r1
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0e5      	beq.n	8009f2c <vTaskSwitchContext+0x24>
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4a13      	ldr	r2, [pc, #76]	; (8009fb8 <vTaskSwitchContext+0xb0>)
 8009f6c:	4413      	add	r3, r2
 8009f6e:	60bb      	str	r3, [r7, #8]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	3308      	adds	r3, #8
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d104      	bne.n	8009f90 <vTaskSwitchContext+0x88>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	605a      	str	r2, [r3, #4]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <vTaskSwitchContext+0xb4>)
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	4a06      	ldr	r2, [pc, #24]	; (8009fb4 <vTaskSwitchContext+0xac>)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6013      	str	r3, [r2, #0]
}
 8009fa0:	bf00      	nop
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	20000dbc 	.word	0x20000dbc
 8009fb0:	20000da8 	.word	0x20000da8
 8009fb4:	20000d9c 	.word	0x20000d9c
 8009fb8:	200008c4 	.word	0x200008c4
 8009fbc:	200008c0 	.word	0x200008c0

08009fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d109      	bne.n	8009fe4 <vTaskPlaceOnEventList+0x24>
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e7fe      	b.n	8009fe2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <vTaskPlaceOnEventList+0x44>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	3318      	adds	r3, #24
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7fe feb0 	bl	8008d52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	6838      	ldr	r0, [r7, #0]
 8009ff6:	f000 fa77 	bl	800a4e8 <prvAddCurrentTaskToDelayedList>
}
 8009ffa:	bf00      	nop
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	200008c0 	.word	0x200008c0

0800a008 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d109      	bne.n	800a02e <vTaskPlaceOnEventListRestricted+0x26>
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	e7fe      	b.n	800a02c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a02e:	4b0a      	ldr	r3, [pc, #40]	; (800a058 <vTaskPlaceOnEventListRestricted+0x50>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3318      	adds	r3, #24
 800a034:	4619      	mov	r1, r3
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7fe fe67 	bl	8008d0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a042:	f04f 33ff 	mov.w	r3, #4294967295
 800a046:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	68b8      	ldr	r0, [r7, #8]
 800a04c:	f000 fa4c 	bl	800a4e8 <prvAddCurrentTaskToDelayedList>
	}
 800a050:	bf00      	nop
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	200008c0 	.word	0x200008c0

0800a05c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <xTaskRemoveFromEventList+0x2a>
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	e7fe      	b.n	800a084 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	3318      	adds	r3, #24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe fe9a 	bl	8008dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a090:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <xTaskRemoveFromEventList+0xac>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d11d      	bne.n	800a0d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe fe91 	bl	8008dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <xTaskRemoveFromEventList+0xb0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d903      	bls.n	800a0b6 <xTaskRemoveFromEventList+0x5a>
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b2:	4a16      	ldr	r2, [pc, #88]	; (800a10c <xTaskRemoveFromEventList+0xb0>)
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4a13      	ldr	r2, [pc, #76]	; (800a110 <xTaskRemoveFromEventList+0xb4>)
 800a0c4:	441a      	add	r2, r3
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f7fe fe1c 	bl	8008d0a <vListInsertEnd>
 800a0d2:	e005      	b.n	800a0e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	3318      	adds	r3, #24
 800a0d8:	4619      	mov	r1, r3
 800a0da:	480e      	ldr	r0, [pc, #56]	; (800a114 <xTaskRemoveFromEventList+0xb8>)
 800a0dc:	f7fe fe15 	bl	8008d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <xTaskRemoveFromEventList+0xbc>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d905      	bls.n	800a0fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <xTaskRemoveFromEventList+0xc0>)
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	e001      	b.n	800a0fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a0fe:	697b      	ldr	r3, [r7, #20]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20000dbc 	.word	0x20000dbc
 800a10c:	20000d9c 	.word	0x20000d9c
 800a110:	200008c4 	.word	0x200008c4
 800a114:	20000d54 	.word	0x20000d54
 800a118:	200008c0 	.word	0x200008c0
 800a11c:	20000da8 	.word	0x20000da8

0800a120 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a128:	4b06      	ldr	r3, [pc, #24]	; (800a144 <vTaskInternalSetTimeOutState+0x24>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a130:	4b05      	ldr	r3, [pc, #20]	; (800a148 <vTaskInternalSetTimeOutState+0x28>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	20000dac 	.word	0x20000dac
 800a148:	20000d98 	.word	0x20000d98

0800a14c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <xTaskCheckForTimeOut+0x24>
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	e7fe      	b.n	800a16e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d109      	bne.n	800a18a <xTaskCheckForTimeOut+0x3e>
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	e7fe      	b.n	800a188 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a18a:	f000 fe2f 	bl	800adec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a18e:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <xTaskCheckForTimeOut+0xb8>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d102      	bne.n	800a1ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61fb      	str	r3, [r7, #28]
 800a1ac:	e023      	b.n	800a1f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	4b15      	ldr	r3, [pc, #84]	; (800a208 <xTaskCheckForTimeOut+0xbc>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d007      	beq.n	800a1ca <xTaskCheckForTimeOut+0x7e>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d302      	bcc.n	800a1ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	61fb      	str	r3, [r7, #28]
 800a1c8:	e015      	b.n	800a1f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d20b      	bcs.n	800a1ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	1ad2      	subs	r2, r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff9d 	bl	800a120 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
 800a1ea:	e004      	b.n	800a1f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1f6:	f000 fe27 	bl	800ae48 <vPortExitCritical>

	return xReturn;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20000d98 	.word	0x20000d98
 800a208:	20000dac 	.word	0x20000dac

0800a20c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a210:	4b03      	ldr	r3, [pc, #12]	; (800a220 <vTaskMissedYield+0x14>)
 800a212:	2201      	movs	r2, #1
 800a214:	601a      	str	r2, [r3, #0]
}
 800a216:	bf00      	nop
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	20000da8 	.word	0x20000da8

0800a224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a22c:	f000 f852 	bl	800a2d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <prvIdleTask+0x28>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d9f9      	bls.n	800a22c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a238:	4b05      	ldr	r3, [pc, #20]	; (800a250 <prvIdleTask+0x2c>)
 800a23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a248:	e7f0      	b.n	800a22c <prvIdleTask+0x8>
 800a24a:	bf00      	nop
 800a24c:	200008c4 	.word	0x200008c4
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	e00c      	b.n	800a27a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4a12      	ldr	r2, [pc, #72]	; (800a2b4 <prvInitialiseTaskLists+0x60>)
 800a26c:	4413      	add	r3, r2
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fd1e 	bl	8008cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3301      	adds	r3, #1
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b37      	cmp	r3, #55	; 0x37
 800a27e:	d9ef      	bls.n	800a260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a280:	480d      	ldr	r0, [pc, #52]	; (800a2b8 <prvInitialiseTaskLists+0x64>)
 800a282:	f7fe fd15 	bl	8008cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a286:	480d      	ldr	r0, [pc, #52]	; (800a2bc <prvInitialiseTaskLists+0x68>)
 800a288:	f7fe fd12 	bl	8008cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a28c:	480c      	ldr	r0, [pc, #48]	; (800a2c0 <prvInitialiseTaskLists+0x6c>)
 800a28e:	f7fe fd0f 	bl	8008cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a292:	480c      	ldr	r0, [pc, #48]	; (800a2c4 <prvInitialiseTaskLists+0x70>)
 800a294:	f7fe fd0c 	bl	8008cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a298:	480b      	ldr	r0, [pc, #44]	; (800a2c8 <prvInitialiseTaskLists+0x74>)
 800a29a:	f7fe fd09 	bl	8008cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a29e:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <prvInitialiseTaskLists+0x78>)
 800a2a0:	4a05      	ldr	r2, [pc, #20]	; (800a2b8 <prvInitialiseTaskLists+0x64>)
 800a2a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	; (800a2d0 <prvInitialiseTaskLists+0x7c>)
 800a2a6:	4a05      	ldr	r2, [pc, #20]	; (800a2bc <prvInitialiseTaskLists+0x68>)
 800a2a8:	601a      	str	r2, [r3, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200008c4 	.word	0x200008c4
 800a2b8:	20000d24 	.word	0x20000d24
 800a2bc:	20000d38 	.word	0x20000d38
 800a2c0:	20000d54 	.word	0x20000d54
 800a2c4:	20000d68 	.word	0x20000d68
 800a2c8:	20000d80 	.word	0x20000d80
 800a2cc:	20000d4c 	.word	0x20000d4c
 800a2d0:	20000d50 	.word	0x20000d50

0800a2d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2da:	e019      	b.n	800a310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2dc:	f000 fd86 	bl	800adec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a2e0:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <prvCheckTasksWaitingTermination+0x4c>)
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe fd69 	bl	8008dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2f2:	4b0c      	ldr	r3, [pc, #48]	; (800a324 <prvCheckTasksWaitingTermination+0x50>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4a0a      	ldr	r2, [pc, #40]	; (800a324 <prvCheckTasksWaitingTermination+0x50>)
 800a2fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <prvCheckTasksWaitingTermination+0x54>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3b01      	subs	r3, #1
 800a302:	4a09      	ldr	r2, [pc, #36]	; (800a328 <prvCheckTasksWaitingTermination+0x54>)
 800a304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a306:	f000 fd9f 	bl	800ae48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f80e 	bl	800a32c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <prvCheckTasksWaitingTermination+0x54>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e1      	bne.n	800a2dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000d68 	.word	0x20000d68
 800a324:	20000d94 	.word	0x20000d94
 800a328:	20000d7c 	.word	0x20000d7c

0800a32c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d108      	bne.n	800a350 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	4618      	mov	r0, r3
 800a344:	f000 ff2e 	bl	800b1a4 <vPortFree>
				vPortFree( pxTCB );
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 ff2b 	bl	800b1a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a34e:	e017      	b.n	800a380 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a356:	2b01      	cmp	r3, #1
 800a358:	d103      	bne.n	800a362 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 ff22 	bl	800b1a4 <vPortFree>
	}
 800a360:	e00e      	b.n	800a380 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d009      	beq.n	800a380 <prvDeleteTCB+0x54>
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e7fe      	b.n	800a37e <prvDeleteTCB+0x52>
	}
 800a380:	bf00      	nop
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a38e:	4b0f      	ldr	r3, [pc, #60]	; (800a3cc <prvResetNextTaskUnblockTime+0x44>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <prvResetNextTaskUnblockTime+0x14>
 800a398:	2301      	movs	r3, #1
 800a39a:	e000      	b.n	800a39e <prvResetNextTaskUnblockTime+0x16>
 800a39c:	2300      	movs	r3, #0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3a2:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <prvResetNextTaskUnblockTime+0x48>)
 800a3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3aa:	e008      	b.n	800a3be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3ac:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <prvResetNextTaskUnblockTime+0x44>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4a05      	ldr	r2, [pc, #20]	; (800a3d0 <prvResetNextTaskUnblockTime+0x48>)
 800a3bc:	6013      	str	r3, [r2, #0]
}
 800a3be:	bf00      	nop
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000d4c 	.word	0x20000d4c
 800a3d0:	20000db4 	.word	0x20000db4

0800a3d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3da:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <xTaskGetSchedulerState+0x34>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d102      	bne.n	800a3e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	607b      	str	r3, [r7, #4]
 800a3e6:	e008      	b.n	800a3fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3e8:	4b08      	ldr	r3, [pc, #32]	; (800a40c <xTaskGetSchedulerState+0x38>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	607b      	str	r3, [r7, #4]
 800a3f4:	e001      	b.n	800a3fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3fa:	687b      	ldr	r3, [r7, #4]
	}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	20000da0 	.word	0x20000da0
 800a40c:	20000dbc 	.word	0x20000dbc

0800a410 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d054      	beq.n	800a4d0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a426:	4b2d      	ldr	r3, [pc, #180]	; (800a4dc <xTaskPriorityDisinherit+0xcc>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d009      	beq.n	800a444 <xTaskPriorityDisinherit+0x34>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	e7fe      	b.n	800a442 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d109      	bne.n	800a460 <xTaskPriorityDisinherit+0x50>
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60bb      	str	r3, [r7, #8]
 800a45e:	e7fe      	b.n	800a45e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a464:	1e5a      	subs	r2, r3, #1
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a472:	429a      	cmp	r2, r3
 800a474:	d02c      	beq.n	800a4d0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d128      	bne.n	800a4d0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	3304      	adds	r3, #4
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe fc9e 	bl	8008dc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a0:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <xTaskPriorityDisinherit+0xd0>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d903      	bls.n	800a4b0 <xTaskPriorityDisinherit+0xa0>
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <xTaskPriorityDisinherit+0xd0>)
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4a09      	ldr	r2, [pc, #36]	; (800a4e4 <xTaskPriorityDisinherit+0xd4>)
 800a4be:	441a      	add	r2, r3
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	f7fe fc1f 	bl	8008d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4d0:	697b      	ldr	r3, [r7, #20]
	}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	200008c0 	.word	0x200008c0
 800a4e0:	20000d9c 	.word	0x20000d9c
 800a4e4:	200008c4 	.word	0x200008c4

0800a4e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4f2:	4b21      	ldr	r3, [pc, #132]	; (800a578 <prvAddCurrentTaskToDelayedList+0x90>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4f8:	4b20      	ldr	r3, [pc, #128]	; (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fc60 	bl	8008dc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d10a      	bne.n	800a522 <prvAddCurrentTaskToDelayedList+0x3a>
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d007      	beq.n	800a522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a512:	4b1a      	ldr	r3, [pc, #104]	; (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3304      	adds	r3, #4
 800a518:	4619      	mov	r1, r3
 800a51a:	4819      	ldr	r0, [pc, #100]	; (800a580 <prvAddCurrentTaskToDelayedList+0x98>)
 800a51c:	f7fe fbf5 	bl	8008d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a520:	e026      	b.n	800a570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4413      	add	r3, r2
 800a528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a52a:	4b14      	ldr	r3, [pc, #80]	; (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	429a      	cmp	r2, r3
 800a538:	d209      	bcs.n	800a54e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a53a:	4b12      	ldr	r3, [pc, #72]	; (800a584 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3304      	adds	r3, #4
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fe fc03 	bl	8008d52 <vListInsert>
}
 800a54c:	e010      	b.n	800a570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a54e:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b0a      	ldr	r3, [pc, #40]	; (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f7fe fbf9 	bl	8008d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a560:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	429a      	cmp	r2, r3
 800a568:	d202      	bcs.n	800a570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a56a:	4a08      	ldr	r2, [pc, #32]	; (800a58c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	6013      	str	r3, [r2, #0]
}
 800a570:	bf00      	nop
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	20000d98 	.word	0x20000d98
 800a57c:	200008c0 	.word	0x200008c0
 800a580:	20000d80 	.word	0x20000d80
 800a584:	20000d50 	.word	0x20000d50
 800a588:	20000d4c 	.word	0x20000d4c
 800a58c:	20000db4 	.word	0x20000db4

0800a590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08a      	sub	sp, #40	; 0x28
 800a594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a596:	2300      	movs	r3, #0
 800a598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a59a:	f000 fac3 	bl	800ab24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a59e:	4b1c      	ldr	r3, [pc, #112]	; (800a610 <xTimerCreateTimerTask+0x80>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d021      	beq.n	800a5ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5ae:	1d3a      	adds	r2, r7, #4
 800a5b0:	f107 0108 	add.w	r1, r7, #8
 800a5b4:	f107 030c 	add.w	r3, r7, #12
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe fb5f 	bl	8008c7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	9202      	str	r2, [sp, #8]
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	460a      	mov	r2, r1
 800a5d0:	4910      	ldr	r1, [pc, #64]	; (800a614 <xTimerCreateTimerTask+0x84>)
 800a5d2:	4811      	ldr	r0, [pc, #68]	; (800a618 <xTimerCreateTimerTask+0x88>)
 800a5d4:	f7ff f8f4 	bl	80097c0 <xTaskCreateStatic>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	4b10      	ldr	r3, [pc, #64]	; (800a61c <xTimerCreateTimerTask+0x8c>)
 800a5dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5de:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <xTimerCreateTimerTask+0x8c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <xTimerCreateTimerTask+0x74>
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	613b      	str	r3, [r7, #16]
 800a602:	e7fe      	b.n	800a602 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a604:	697b      	ldr	r3, [r7, #20]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	20000df0 	.word	0x20000df0
 800a614:	0800c014 	.word	0x0800c014
 800a618:	0800a739 	.word	0x0800a739
 800a61c:	20000df4 	.word	0x20000df4

0800a620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08a      	sub	sp, #40	; 0x28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a62e:	2300      	movs	r3, #0
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d109      	bne.n	800a64c <xTimerGenericCommand+0x2c>
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	623b      	str	r3, [r7, #32]
 800a64a:	e7fe      	b.n	800a64a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a64c:	4b19      	ldr	r3, [pc, #100]	; (800a6b4 <xTimerGenericCommand+0x94>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d02a      	beq.n	800a6aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b05      	cmp	r3, #5
 800a664:	dc18      	bgt.n	800a698 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a666:	f7ff feb5 	bl	800a3d4 <xTaskGetSchedulerState>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d109      	bne.n	800a684 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a670:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <xTimerGenericCommand+0x94>)
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	f107 0110 	add.w	r1, r7, #16
 800a678:	2300      	movs	r3, #0
 800a67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a67c:	f7fe fcca 	bl	8009014 <xQueueGenericSend>
 800a680:	6278      	str	r0, [r7, #36]	; 0x24
 800a682:	e012      	b.n	800a6aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a684:	4b0b      	ldr	r3, [pc, #44]	; (800a6b4 <xTimerGenericCommand+0x94>)
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	f107 0110 	add.w	r1, r7, #16
 800a68c:	2300      	movs	r3, #0
 800a68e:	2200      	movs	r2, #0
 800a690:	f7fe fcc0 	bl	8009014 <xQueueGenericSend>
 800a694:	6278      	str	r0, [r7, #36]	; 0x24
 800a696:	e008      	b.n	800a6aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a698:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <xTimerGenericCommand+0x94>)
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	f107 0110 	add.w	r1, r7, #16
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	f7fe fdb0 	bl	8009208 <xQueueGenericSendFromISR>
 800a6a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3728      	adds	r7, #40	; 0x28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20000df0 	.word	0x20000df0

0800a6b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6c2:	4b1c      	ldr	r3, [pc, #112]	; (800a734 <prvProcessExpiredTimer+0x7c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fb77 	bl	8008dc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d121      	bne.n	800a722 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	699a      	ldr	r2, [r3, #24]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	18d1      	adds	r1, r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	6978      	ldr	r0, [r7, #20]
 800a6ec:	f000 f8c8 	bl	800a880 <prvInsertTimerInActiveList>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d015      	beq.n	800a722 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	2100      	movs	r1, #0
 800a700:	6978      	ldr	r0, [r7, #20]
 800a702:	f7ff ff8d 	bl	800a620 <xTimerGenericCommand>
 800a706:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <prvProcessExpiredTimer+0x6a>
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	e7fe      	b.n	800a720 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	4798      	blx	r3
}
 800a72a:	bf00      	nop
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20000de8 	.word	0x20000de8

0800a738 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f857 	bl	800a7f8 <prvGetNextExpireTime>
 800a74a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4619      	mov	r1, r3
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 f803 	bl	800a75c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a756:	f000 f8d5 	bl	800a904 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a75a:	e7f1      	b.n	800a740 <prvTimerTask+0x8>

0800a75c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a766:	f7ff fa57 	bl	8009c18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 f866 	bl	800a840 <prvSampleTimeNow>
 800a774:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d130      	bne.n	800a7de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <prvProcessTimerOrBlockTask+0x3c>
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	429a      	cmp	r2, r3
 800a788:	d806      	bhi.n	800a798 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a78a:	f7ff fa53 	bl	8009c34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff ff91 	bl	800a6b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a796:	e024      	b.n	800a7e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d008      	beq.n	800a7b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a79e:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <prvProcessTimerOrBlockTask+0x90>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bf0c      	ite	eq
 800a7a8:	2301      	moveq	r3, #1
 800a7aa:	2300      	movne	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7b0:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <prvProcessTimerOrBlockTask+0x94>)
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	f7fe ffcb 	bl	8009758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7c2:	f7ff fa37 	bl	8009c34 <xTaskResumeAll>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7cc:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <prvProcessTimerOrBlockTask+0x98>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	f3bf 8f6f 	isb	sy
}
 800a7dc:	e001      	b.n	800a7e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7de:	f7ff fa29 	bl	8009c34 <xTaskResumeAll>
}
 800a7e2:	bf00      	nop
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000dec 	.word	0x20000dec
 800a7f0:	20000df0 	.word	0x20000df0
 800a7f4:	e000ed04 	.word	0xe000ed04

0800a7f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a800:	4b0e      	ldr	r3, [pc, #56]	; (800a83c <prvGetNextExpireTime+0x44>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bf0c      	ite	eq
 800a80a:	2301      	moveq	r3, #1
 800a80c:	2300      	movne	r3, #0
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	461a      	mov	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d105      	bne.n	800a82a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a81e:	4b07      	ldr	r3, [pc, #28]	; (800a83c <prvGetNextExpireTime+0x44>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	e001      	b.n	800a82e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a82e:	68fb      	ldr	r3, [r7, #12]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	20000de8 	.word	0x20000de8

0800a840 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a848:	f7ff fa90 	bl	8009d6c <xTaskGetTickCount>
 800a84c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a84e:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <prvSampleTimeNow+0x3c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	429a      	cmp	r2, r3
 800a856:	d205      	bcs.n	800a864 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a858:	f000 f904 	bl	800aa64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	e002      	b.n	800a86a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a86a:	4a04      	ldr	r2, [pc, #16]	; (800a87c <prvSampleTimeNow+0x3c>)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a870:	68fb      	ldr	r3, [r7, #12]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20000df8 	.word	0x20000df8

0800a880 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a88e:	2300      	movs	r3, #0
 800a890:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d812      	bhi.n	800a8cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	1ad2      	subs	r2, r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d302      	bcc.n	800a8ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	617b      	str	r3, [r7, #20]
 800a8b8:	e01b      	b.n	800a8f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8ba:	4b10      	ldr	r3, [pc, #64]	; (800a8fc <prvInsertTimerInActiveList+0x7c>)
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	f7fe fa44 	bl	8008d52 <vListInsert>
 800a8ca:	e012      	b.n	800a8f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d206      	bcs.n	800a8e2 <prvInsertTimerInActiveList+0x62>
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d302      	bcc.n	800a8e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	e007      	b.n	800a8f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8e2:	4b07      	ldr	r3, [pc, #28]	; (800a900 <prvInsertTimerInActiveList+0x80>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fe fa30 	bl	8008d52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8f2:	697b      	ldr	r3, [r7, #20]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000dec 	.word	0x20000dec
 800a900:	20000de8 	.word	0x20000de8

0800a904 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08e      	sub	sp, #56	; 0x38
 800a908:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a90a:	e099      	b.n	800aa40 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da17      	bge.n	800a942 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a912:	1d3b      	adds	r3, r7, #4
 800a914:	3304      	adds	r3, #4
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d109      	bne.n	800a932 <prvProcessReceivedCommands+0x2e>
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	61fb      	str	r3, [r7, #28]
 800a930:	e7fe      	b.n	800a930 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a938:	6850      	ldr	r0, [r2, #4]
 800a93a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a93c:	6892      	ldr	r2, [r2, #8]
 800a93e:	4611      	mov	r1, r2
 800a940:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	db7a      	blt.n	800aa3e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d004      	beq.n	800a95e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	3304      	adds	r3, #4
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe fa33 	bl	8008dc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a95e:	463b      	mov	r3, r7
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff ff6d 	bl	800a840 <prvSampleTimeNow>
 800a966:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b09      	cmp	r3, #9
 800a96c:	d868      	bhi.n	800aa40 <prvProcessReceivedCommands+0x13c>
 800a96e:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <prvProcessReceivedCommands+0x70>)
 800a970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a974:	0800a99d 	.word	0x0800a99d
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a99d 	.word	0x0800a99d
 800a980:	0800aa41 	.word	0x0800aa41
 800a984:	0800a9f7 	.word	0x0800a9f7
 800a988:	0800aa2d 	.word	0x0800aa2d
 800a98c:	0800a99d 	.word	0x0800a99d
 800a990:	0800a99d 	.word	0x0800a99d
 800a994:	0800aa41 	.word	0x0800aa41
 800a998:	0800a9f7 	.word	0x0800a9f7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	18d1      	adds	r1, r2, r3
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9aa:	f7ff ff69 	bl	800a880 <prvInsertTimerInActiveList>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d045      	beq.n	800aa40 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d13d      	bne.n	800aa40 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	441a      	add	r2, r3
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9d6:	f7ff fe23 	bl	800a620 <xTimerGenericCommand>
 800a9da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d12e      	bne.n	800aa40 <prvProcessReceivedCommands+0x13c>
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	61bb      	str	r3, [r7, #24]
 800a9f4:	e7fe      	b.n	800a9f4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d109      	bne.n	800aa18 <prvProcessReceivedCommands+0x114>
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	e7fe      	b.n	800aa16 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	699a      	ldr	r2, [r3, #24]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	18d1      	adds	r1, r2, r3
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa26:	f7ff ff2b 	bl	800a880 <prvInsertTimerInActiveList>
					break;
 800aa2a:	e009      	b.n	800aa40 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d104      	bne.n	800aa40 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800aa36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa38:	f000 fbb4 	bl	800b1a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa3c:	e000      	b.n	800aa40 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa3e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa40:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <prvProcessReceivedCommands+0x15c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	1d39      	adds	r1, r7, #4
 800aa46:	2200      	movs	r2, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fc71 	bl	8009330 <xQueueReceive>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f47f af5b 	bne.w	800a90c <prvProcessReceivedCommands+0x8>
	}
}
 800aa56:	bf00      	nop
 800aa58:	3730      	adds	r7, #48	; 0x30
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000df0 	.word	0x20000df0

0800aa64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa6a:	e044      	b.n	800aaf6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa6c:	4b2b      	ldr	r3, [pc, #172]	; (800ab1c <prvSwitchTimerLists+0xb8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa76:	4b29      	ldr	r3, [pc, #164]	; (800ab1c <prvSwitchTimerLists+0xb8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3304      	adds	r3, #4
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe f99d 	bl	8008dc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d12d      	bne.n	800aaf6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d90e      	bls.n	800aaca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aab8:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <prvSwitchTimerLists+0xb8>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fe f945 	bl	8008d52 <vListInsert>
 800aac8:	e015      	b.n	800aaf6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aaca:	2300      	movs	r3, #0
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	2300      	movs	r3, #0
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	2100      	movs	r1, #0
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f7ff fda3 	bl	800a620 <xTimerGenericCommand>
 800aada:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d109      	bne.n	800aaf6 <prvSwitchTimerLists+0x92>
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	e7fe      	b.n	800aaf4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aaf6:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <prvSwitchTimerLists+0xb8>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1b5      	bne.n	800aa6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab00:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <prvSwitchTimerLists+0xb8>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab06:	4b06      	ldr	r3, [pc, #24]	; (800ab20 <prvSwitchTimerLists+0xbc>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a04      	ldr	r2, [pc, #16]	; (800ab1c <prvSwitchTimerLists+0xb8>)
 800ab0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab0e:	4a04      	ldr	r2, [pc, #16]	; (800ab20 <prvSwitchTimerLists+0xbc>)
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	6013      	str	r3, [r2, #0]
}
 800ab14:	bf00      	nop
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20000de8 	.word	0x20000de8
 800ab20:	20000dec 	.word	0x20000dec

0800ab24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab2a:	f000 f95f 	bl	800adec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab2e:	4b15      	ldr	r3, [pc, #84]	; (800ab84 <prvCheckForValidListAndQueue+0x60>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d120      	bne.n	800ab78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab36:	4814      	ldr	r0, [pc, #80]	; (800ab88 <prvCheckForValidListAndQueue+0x64>)
 800ab38:	f7fe f8ba 	bl	8008cb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab3c:	4813      	ldr	r0, [pc, #76]	; (800ab8c <prvCheckForValidListAndQueue+0x68>)
 800ab3e:	f7fe f8b7 	bl	8008cb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab42:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <prvCheckForValidListAndQueue+0x6c>)
 800ab44:	4a10      	ldr	r2, [pc, #64]	; (800ab88 <prvCheckForValidListAndQueue+0x64>)
 800ab46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab48:	4b12      	ldr	r3, [pc, #72]	; (800ab94 <prvCheckForValidListAndQueue+0x70>)
 800ab4a:	4a10      	ldr	r2, [pc, #64]	; (800ab8c <prvCheckForValidListAndQueue+0x68>)
 800ab4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <prvCheckForValidListAndQueue+0x74>)
 800ab54:	4a11      	ldr	r2, [pc, #68]	; (800ab9c <prvCheckForValidListAndQueue+0x78>)
 800ab56:	2110      	movs	r1, #16
 800ab58:	200a      	movs	r0, #10
 800ab5a:	f7fe f9c5 	bl	8008ee8 <xQueueGenericCreateStatic>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <prvCheckForValidListAndQueue+0x60>)
 800ab62:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab64:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <prvCheckForValidListAndQueue+0x60>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d005      	beq.n	800ab78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab6c:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <prvCheckForValidListAndQueue+0x60>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	490b      	ldr	r1, [pc, #44]	; (800aba0 <prvCheckForValidListAndQueue+0x7c>)
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe fdc8 	bl	8009708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab78:	f000 f966 	bl	800ae48 <vPortExitCritical>
}
 800ab7c:	bf00      	nop
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20000df0 	.word	0x20000df0
 800ab88:	20000dc0 	.word	0x20000dc0
 800ab8c:	20000dd4 	.word	0x20000dd4
 800ab90:	20000de8 	.word	0x20000de8
 800ab94:	20000dec 	.word	0x20000dec
 800ab98:	20000e9c 	.word	0x20000e9c
 800ab9c:	20000dfc 	.word	0x20000dfc
 800aba0:	0800c01c 	.word	0x0800c01c

0800aba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3b04      	subs	r3, #4
 800abb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3b04      	subs	r3, #4
 800abc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f023 0201 	bic.w	r2, r3, #1
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3b04      	subs	r3, #4
 800abd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abd4:	4a0c      	ldr	r2, [pc, #48]	; (800ac08 <pxPortInitialiseStack+0x64>)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3b14      	subs	r3, #20
 800abde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3b04      	subs	r3, #4
 800abea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f06f 0202 	mvn.w	r2, #2
 800abf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3b20      	subs	r3, #32
 800abf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abfa:	68fb      	ldr	r3, [r7, #12]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	0800ac0d 	.word	0x0800ac0d

0800ac0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac16:	4b11      	ldr	r3, [pc, #68]	; (800ac5c <prvTaskExitError+0x50>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d009      	beq.n	800ac34 <prvTaskExitError+0x28>
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	e7fe      	b.n	800ac32 <prvTaskExitError+0x26>
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac46:	bf00      	nop
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0fc      	beq.n	800ac48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac4e:	bf00      	nop
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	20000118 	.word	0x20000118

0800ac60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <pxCurrentTCBConst2>)
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	6808      	ldr	r0, [r1, #0]
 800ac66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6a:	f380 8809 	msr	PSP, r0
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8811 	msr	BASEPRI, r0
 800ac7a:	4770      	bx	lr
 800ac7c:	f3af 8000 	nop.w

0800ac80 <pxCurrentTCBConst2>:
 800ac80:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac88:	4808      	ldr	r0, [pc, #32]	; (800acac <prvPortStartFirstTask+0x24>)
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	6800      	ldr	r0, [r0, #0]
 800ac8e:	f380 8808 	msr	MSP, r0
 800ac92:	f04f 0000 	mov.w	r0, #0
 800ac96:	f380 8814 	msr	CONTROL, r0
 800ac9a:	b662      	cpsie	i
 800ac9c:	b661      	cpsie	f
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	df00      	svc	0
 800aca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acaa:	bf00      	nop
 800acac:	e000ed08 	.word	0xe000ed08

0800acb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acb6:	4b44      	ldr	r3, [pc, #272]	; (800adc8 <xPortStartScheduler+0x118>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a44      	ldr	r2, [pc, #272]	; (800adcc <xPortStartScheduler+0x11c>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d109      	bne.n	800acd4 <xPortStartScheduler+0x24>
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	613b      	str	r3, [r7, #16]
 800acd2:	e7fe      	b.n	800acd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acd4:	4b3c      	ldr	r3, [pc, #240]	; (800adc8 <xPortStartScheduler+0x118>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a3d      	ldr	r2, [pc, #244]	; (800add0 <xPortStartScheduler+0x120>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d109      	bne.n	800acf2 <xPortStartScheduler+0x42>
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e7fe      	b.n	800acf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acf2:	4b38      	ldr	r3, [pc, #224]	; (800add4 <xPortStartScheduler+0x124>)
 800acf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	22ff      	movs	r2, #255	; 0xff
 800ad02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	4b30      	ldr	r3, [pc, #192]	; (800add8 <xPortStartScheduler+0x128>)
 800ad18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad1a:	4b30      	ldr	r3, [pc, #192]	; (800addc <xPortStartScheduler+0x12c>)
 800ad1c:	2207      	movs	r2, #7
 800ad1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad20:	e009      	b.n	800ad36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ad22:	4b2e      	ldr	r3, [pc, #184]	; (800addc <xPortStartScheduler+0x12c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	4a2c      	ldr	r2, [pc, #176]	; (800addc <xPortStartScheduler+0x12c>)
 800ad2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad3e:	2b80      	cmp	r3, #128	; 0x80
 800ad40:	d0ef      	beq.n	800ad22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad42:	4b26      	ldr	r3, [pc, #152]	; (800addc <xPortStartScheduler+0x12c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f1c3 0307 	rsb	r3, r3, #7
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	d009      	beq.n	800ad62 <xPortStartScheduler+0xb2>
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	60bb      	str	r3, [r7, #8]
 800ad60:	e7fe      	b.n	800ad60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad62:	4b1e      	ldr	r3, [pc, #120]	; (800addc <xPortStartScheduler+0x12c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	4a1c      	ldr	r2, [pc, #112]	; (800addc <xPortStartScheduler+0x12c>)
 800ad6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad6c:	4b1b      	ldr	r3, [pc, #108]	; (800addc <xPortStartScheduler+0x12c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad74:	4a19      	ldr	r2, [pc, #100]	; (800addc <xPortStartScheduler+0x12c>)
 800ad76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad80:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a16      	ldr	r2, [pc, #88]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad8c:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <xPortStartScheduler+0x130>)
 800ad92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad98:	f000 f8d6 	bl	800af48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad9c:	4b11      	ldr	r3, [pc, #68]	; (800ade4 <xPortStartScheduler+0x134>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ada2:	f000 f8f5 	bl	800af90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ada6:	4b10      	ldr	r3, [pc, #64]	; (800ade8 <xPortStartScheduler+0x138>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a0f      	ldr	r2, [pc, #60]	; (800ade8 <xPortStartScheduler+0x138>)
 800adac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800adb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adb2:	f7ff ff69 	bl	800ac88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adb6:	f7ff f8a7 	bl	8009f08 <vTaskSwitchContext>
	prvTaskExitError();
 800adba:	f7ff ff27 	bl	800ac0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	e000ed00 	.word	0xe000ed00
 800adcc:	410fc271 	.word	0x410fc271
 800add0:	410fc270 	.word	0x410fc270
 800add4:	e000e400 	.word	0xe000e400
 800add8:	20000eec 	.word	0x20000eec
 800addc:	20000ef0 	.word	0x20000ef0
 800ade0:	e000ed20 	.word	0xe000ed20
 800ade4:	20000118 	.word	0x20000118
 800ade8:	e000ef34 	.word	0xe000ef34

0800adec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae04:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <vPortEnterCritical+0x54>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	4a0d      	ldr	r2, [pc, #52]	; (800ae40 <vPortEnterCritical+0x54>)
 800ae0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae0e:	4b0c      	ldr	r3, [pc, #48]	; (800ae40 <vPortEnterCritical+0x54>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d10e      	bne.n	800ae34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae16:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <vPortEnterCritical+0x58>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <vPortEnterCritical+0x48>
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	e7fe      	b.n	800ae32 <vPortEnterCritical+0x46>
	}
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20000118 	.word	0x20000118
 800ae44:	e000ed04 	.word	0xe000ed04

0800ae48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d109      	bne.n	800ae6a <vPortExitCritical+0x22>
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	607b      	str	r3, [r7, #4]
 800ae68:	e7fe      	b.n	800ae68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	4a08      	ldr	r2, [pc, #32]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae74:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <vPortExitCritical+0x4c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d104      	bne.n	800ae86 <vPortExitCritical+0x3e>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	20000118 	.word	0x20000118
	...

0800aea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aea0:	f3ef 8009 	mrs	r0, PSP
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <pxCurrentTCBConst>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	f01e 0f10 	tst.w	lr, #16
 800aeb0:	bf08      	it	eq
 800aeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aec4:	f380 8811 	msr	BASEPRI, r0
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f7ff f81a 	bl	8009f08 <vTaskSwitchContext>
 800aed4:	f04f 0000 	mov.w	r0, #0
 800aed8:	f380 8811 	msr	BASEPRI, r0
 800aedc:	bc09      	pop	{r0, r3}
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	6808      	ldr	r0, [r1, #0]
 800aee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee6:	f01e 0f10 	tst.w	lr, #16
 800aeea:	bf08      	it	eq
 800aeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aef0:	f380 8809 	msr	PSP, r0
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst>:
 800af00:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop

0800af08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af20:	f7fe ff34 	bl	8009d8c <xTaskIncrementTick>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <SysTick_Handler+0x3c>)
 800af2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af4c:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <vPortSetupTimerInterrupt+0x34>)
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af52:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <vPortSetupTimerInterrupt+0x38>)
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <vPortSetupTimerInterrupt+0x3c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a0a      	ldr	r2, [pc, #40]	; (800af88 <vPortSetupTimerInterrupt+0x40>)
 800af5e:	fba2 2303 	umull	r2, r3, r2, r3
 800af62:	099b      	lsrs	r3, r3, #6
 800af64:	4a09      	ldr	r2, [pc, #36]	; (800af8c <vPortSetupTimerInterrupt+0x44>)
 800af66:	3b01      	subs	r3, #1
 800af68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af6a:	4b04      	ldr	r3, [pc, #16]	; (800af7c <vPortSetupTimerInterrupt+0x34>)
 800af6c:	2207      	movs	r2, #7
 800af6e:	601a      	str	r2, [r3, #0]
}
 800af70:	bf00      	nop
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	e000e010 	.word	0xe000e010
 800af80:	e000e018 	.word	0xe000e018
 800af84:	20000000 	.word	0x20000000
 800af88:	10624dd3 	.word	0x10624dd3
 800af8c:	e000e014 	.word	0xe000e014

0800af90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afa0 <vPortEnableVFP+0x10>
 800af94:	6801      	ldr	r1, [r0, #0]
 800af96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af9a:	6001      	str	r1, [r0, #0]
 800af9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af9e:	bf00      	nop
 800afa0:	e000ed88 	.word	0xe000ed88

0800afa4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afaa:	f3ef 8305 	mrs	r3, IPSR
 800afae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b0f      	cmp	r3, #15
 800afb4:	d913      	bls.n	800afde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afb6:	4a16      	ldr	r2, [pc, #88]	; (800b010 <vPortValidateInterruptPriority+0x6c>)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afc0:	4b14      	ldr	r3, [pc, #80]	; (800b014 <vPortValidateInterruptPriority+0x70>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	7afa      	ldrb	r2, [r7, #11]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d209      	bcs.n	800afde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	607b      	str	r3, [r7, #4]
 800afdc:	e7fe      	b.n	800afdc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afde:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <vPortValidateInterruptPriority+0x74>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afe6:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <vPortValidateInterruptPriority+0x78>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	d909      	bls.n	800b002 <vPortValidateInterruptPriority+0x5e>
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	e7fe      	b.n	800b000 <vPortValidateInterruptPriority+0x5c>
	}
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	e000e3f0 	.word	0xe000e3f0
 800b014:	20000eec 	.word	0x20000eec
 800b018:	e000ed0c 	.word	0xe000ed0c
 800b01c:	20000ef0 	.word	0x20000ef0

0800b020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	; 0x28
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b02c:	f7fe fdf4 	bl	8009c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b030:	4b57      	ldr	r3, [pc, #348]	; (800b190 <pvPortMalloc+0x170>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b038:	f000 f90c 	bl	800b254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b03c:	4b55      	ldr	r3, [pc, #340]	; (800b194 <pvPortMalloc+0x174>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4013      	ands	r3, r2
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 808c 	bne.w	800b162 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01c      	beq.n	800b08a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b050:	2208      	movs	r2, #8
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4413      	add	r3, r2
 800b056:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f003 0307 	and.w	r3, r3, #7
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d013      	beq.n	800b08a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f023 0307 	bic.w	r3, r3, #7
 800b068:	3308      	adds	r3, #8
 800b06a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	2b00      	cmp	r3, #0
 800b074:	d009      	beq.n	800b08a <pvPortMalloc+0x6a>
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	e7fe      	b.n	800b088 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d068      	beq.n	800b162 <pvPortMalloc+0x142>
 800b090:	4b41      	ldr	r3, [pc, #260]	; (800b198 <pvPortMalloc+0x178>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d863      	bhi.n	800b162 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b09a:	4b40      	ldr	r3, [pc, #256]	; (800b19c <pvPortMalloc+0x17c>)
 800b09c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b09e:	4b3f      	ldr	r3, [pc, #252]	; (800b19c <pvPortMalloc+0x17c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0a4:	e004      	b.n	800b0b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d903      	bls.n	800b0c2 <pvPortMalloc+0xa2>
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1f1      	bne.n	800b0a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0c2:	4b33      	ldr	r3, [pc, #204]	; (800b190 <pvPortMalloc+0x170>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d04a      	beq.n	800b162 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	4413      	add	r3, r2
 800b0d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	1ad2      	subs	r2, r2, r3
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d91e      	bls.n	800b12c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d009      	beq.n	800b114 <pvPortMalloc+0xf4>
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	e7fe      	b.n	800b112 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	1ad2      	subs	r2, r2, r3
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b126:	69b8      	ldr	r0, [r7, #24]
 800b128:	f000 f8f6 	bl	800b318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b12c:	4b1a      	ldr	r3, [pc, #104]	; (800b198 <pvPortMalloc+0x178>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	4a18      	ldr	r2, [pc, #96]	; (800b198 <pvPortMalloc+0x178>)
 800b138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b13a:	4b17      	ldr	r3, [pc, #92]	; (800b198 <pvPortMalloc+0x178>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4b18      	ldr	r3, [pc, #96]	; (800b1a0 <pvPortMalloc+0x180>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d203      	bcs.n	800b14e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b146:	4b14      	ldr	r3, [pc, #80]	; (800b198 <pvPortMalloc+0x178>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a15      	ldr	r2, [pc, #84]	; (800b1a0 <pvPortMalloc+0x180>)
 800b14c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	4b10      	ldr	r3, [pc, #64]	; (800b194 <pvPortMalloc+0x174>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	431a      	orrs	r2, r3
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b162:	f7fe fd67 	bl	8009c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d009      	beq.n	800b184 <pvPortMalloc+0x164>
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	e7fe      	b.n	800b182 <pvPortMalloc+0x162>
	return pvReturn;
 800b184:	69fb      	ldr	r3, [r7, #28]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3728      	adds	r7, #40	; 0x28
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	20004afc 	.word	0x20004afc
 800b194:	20004b08 	.word	0x20004b08
 800b198:	20004b00 	.word	0x20004b00
 800b19c:	20004af4 	.word	0x20004af4
 800b1a0:	20004b04 	.word	0x20004b04

0800b1a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d046      	beq.n	800b244 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1b6:	2308      	movs	r3, #8
 800b1b8:	425b      	negs	r3, r3
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	4413      	add	r3, r2
 800b1be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	4b20      	ldr	r3, [pc, #128]	; (800b24c <vPortFree+0xa8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d109      	bne.n	800b1e6 <vPortFree+0x42>
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e7fe      	b.n	800b1e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <vPortFree+0x5e>
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	60bb      	str	r3, [r7, #8]
 800b200:	e7fe      	b.n	800b200 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <vPortFree+0xa8>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d019      	beq.n	800b244 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d115      	bne.n	800b244 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <vPortFree+0xa8>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b228:	f7fe fcf6 	bl	8009c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <vPortFree+0xac>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4413      	add	r3, r2
 800b236:	4a06      	ldr	r2, [pc, #24]	; (800b250 <vPortFree+0xac>)
 800b238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b23a:	6938      	ldr	r0, [r7, #16]
 800b23c:	f000 f86c 	bl	800b318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b240:	f7fe fcf8 	bl	8009c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b244:	bf00      	nop
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	20004b08 	.word	0x20004b08
 800b250:	20004b00 	.word	0x20004b00

0800b254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b25a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b25e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b260:	4b27      	ldr	r3, [pc, #156]	; (800b300 <prvHeapInit+0xac>)
 800b262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f003 0307 	and.w	r3, r3, #7
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00c      	beq.n	800b288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3307      	adds	r3, #7
 800b272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f023 0307 	bic.w	r3, r3, #7
 800b27a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	4a1f      	ldr	r2, [pc, #124]	; (800b300 <prvHeapInit+0xac>)
 800b284:	4413      	add	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b28c:	4a1d      	ldr	r2, [pc, #116]	; (800b304 <prvHeapInit+0xb0>)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b292:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <prvHeapInit+0xb0>)
 800b294:	2200      	movs	r2, #0
 800b296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	4413      	add	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0307 	bic.w	r3, r3, #7
 800b2ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4a15      	ldr	r2, [pc, #84]	; (800b308 <prvHeapInit+0xb4>)
 800b2b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2b6:	4b14      	ldr	r3, [pc, #80]	; (800b308 <prvHeapInit+0xb4>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2be:	4b12      	ldr	r3, [pc, #72]	; (800b308 <prvHeapInit+0xb4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	1ad2      	subs	r2, r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2d4:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <prvHeapInit+0xb4>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	4a0a      	ldr	r2, [pc, #40]	; (800b30c <prvHeapInit+0xb8>)
 800b2e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4a09      	ldr	r2, [pc, #36]	; (800b310 <prvHeapInit+0xbc>)
 800b2ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2ec:	4b09      	ldr	r3, [pc, #36]	; (800b314 <prvHeapInit+0xc0>)
 800b2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2f2:	601a      	str	r2, [r3, #0]
}
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	20000ef4 	.word	0x20000ef4
 800b304:	20004af4 	.word	0x20004af4
 800b308:	20004afc 	.word	0x20004afc
 800b30c:	20004b04 	.word	0x20004b04
 800b310:	20004b00 	.word	0x20004b00
 800b314:	20004b08 	.word	0x20004b08

0800b318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b320:	4b28      	ldr	r3, [pc, #160]	; (800b3c4 <prvInsertBlockIntoFreeList+0xac>)
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	e002      	b.n	800b32c <prvInsertBlockIntoFreeList+0x14>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	429a      	cmp	r2, r3
 800b334:	d8f7      	bhi.n	800b326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	4413      	add	r3, r2
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	429a      	cmp	r2, r3
 800b346:	d108      	bne.n	800b35a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	441a      	add	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	441a      	add	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d118      	bne.n	800b3a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	4b15      	ldr	r3, [pc, #84]	; (800b3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	429a      	cmp	r2, r3
 800b378:	d00d      	beq.n	800b396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	441a      	add	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	e008      	b.n	800b3a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b396:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e003      	b.n	800b3a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d002      	beq.n	800b3b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3b6:	bf00      	nop
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20004af4 	.word	0x20004af4
 800b3c8:	20004afc 	.word	0x20004afc

0800b3cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	4912      	ldr	r1, [pc, #72]	; (800b41c <MX_USB_DEVICE_Init+0x50>)
 800b3d4:	4812      	ldr	r0, [pc, #72]	; (800b420 <MX_USB_DEVICE_Init+0x54>)
 800b3d6:	f7fc fa9d 	bl	8007914 <USBD_Init>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3e0:	f7f5 fc94 	bl	8000d0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3e4:	490f      	ldr	r1, [pc, #60]	; (800b424 <MX_USB_DEVICE_Init+0x58>)
 800b3e6:	480e      	ldr	r0, [pc, #56]	; (800b420 <MX_USB_DEVICE_Init+0x54>)
 800b3e8:	f7fc fabf 	bl	800796a <USBD_RegisterClass>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3f2:	f7f5 fc8b 	bl	8000d0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3f6:	490c      	ldr	r1, [pc, #48]	; (800b428 <MX_USB_DEVICE_Init+0x5c>)
 800b3f8:	4809      	ldr	r0, [pc, #36]	; (800b420 <MX_USB_DEVICE_Init+0x54>)
 800b3fa:	f7fc f9ed 	bl	80077d8 <USBD_CDC_RegisterInterface>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b404:	f7f5 fc82 	bl	8000d0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b408:	4805      	ldr	r0, [pc, #20]	; (800b420 <MX_USB_DEVICE_Init+0x54>)
 800b40a:	f7fc fac8 	bl	800799e <USBD_Start>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b414:	f7f5 fc7a 	bl	8000d0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b418:	bf00      	nop
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000012c 	.word	0x2000012c
 800b420:	20004ce0 	.word	0x20004ce0
 800b424:	20000014 	.word	0x20000014
 800b428:	2000011c 	.word	0x2000011c

0800b42c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b430:	2200      	movs	r2, #0
 800b432:	4905      	ldr	r1, [pc, #20]	; (800b448 <CDC_Init_FS+0x1c>)
 800b434:	4805      	ldr	r0, [pc, #20]	; (800b44c <CDC_Init_FS+0x20>)
 800b436:	f7fc f9e6 	bl	8007806 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b43a:	4905      	ldr	r1, [pc, #20]	; (800b450 <CDC_Init_FS+0x24>)
 800b43c:	4803      	ldr	r0, [pc, #12]	; (800b44c <CDC_Init_FS+0x20>)
 800b43e:	f7fc f9fc 	bl	800783a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b442:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b444:	4618      	mov	r0, r3
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20004fbc 	.word	0x20004fbc
 800b44c:	20004ce0 	.word	0x20004ce0
 800b450:	20004f7c 	.word	0x20004f7c

0800b454 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b454:	b480      	push	{r7}
 800b456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b458:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
 800b470:	4613      	mov	r3, r2
 800b472:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b474:	79fb      	ldrb	r3, [r7, #7]
 800b476:	2b23      	cmp	r3, #35	; 0x23
 800b478:	d84a      	bhi.n	800b510 <CDC_Control_FS+0xac>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <CDC_Control_FS+0x1c>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b511 	.word	0x0800b511
 800b484:	0800b511 	.word	0x0800b511
 800b488:	0800b511 	.word	0x0800b511
 800b48c:	0800b511 	.word	0x0800b511
 800b490:	0800b511 	.word	0x0800b511
 800b494:	0800b511 	.word	0x0800b511
 800b498:	0800b511 	.word	0x0800b511
 800b49c:	0800b511 	.word	0x0800b511
 800b4a0:	0800b511 	.word	0x0800b511
 800b4a4:	0800b511 	.word	0x0800b511
 800b4a8:	0800b511 	.word	0x0800b511
 800b4ac:	0800b511 	.word	0x0800b511
 800b4b0:	0800b511 	.word	0x0800b511
 800b4b4:	0800b511 	.word	0x0800b511
 800b4b8:	0800b511 	.word	0x0800b511
 800b4bc:	0800b511 	.word	0x0800b511
 800b4c0:	0800b511 	.word	0x0800b511
 800b4c4:	0800b511 	.word	0x0800b511
 800b4c8:	0800b511 	.word	0x0800b511
 800b4cc:	0800b511 	.word	0x0800b511
 800b4d0:	0800b511 	.word	0x0800b511
 800b4d4:	0800b511 	.word	0x0800b511
 800b4d8:	0800b511 	.word	0x0800b511
 800b4dc:	0800b511 	.word	0x0800b511
 800b4e0:	0800b511 	.word	0x0800b511
 800b4e4:	0800b511 	.word	0x0800b511
 800b4e8:	0800b511 	.word	0x0800b511
 800b4ec:	0800b511 	.word	0x0800b511
 800b4f0:	0800b511 	.word	0x0800b511
 800b4f4:	0800b511 	.word	0x0800b511
 800b4f8:	0800b511 	.word	0x0800b511
 800b4fc:	0800b511 	.word	0x0800b511
 800b500:	0800b511 	.word	0x0800b511
 800b504:	0800b511 	.word	0x0800b511
 800b508:	0800b511 	.word	0x0800b511
 800b50c:	0800b511 	.word	0x0800b511
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b510:	bf00      	nop
  }

  return (USBD_OK);
 800b512:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	4805      	ldr	r0, [pc, #20]	; (800b544 <CDC_Receive_FS+0x24>)
 800b52e:	f7fc f984 	bl	800783a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b532:	4804      	ldr	r0, [pc, #16]	; (800b544 <CDC_Receive_FS+0x24>)
 800b534:	f7fc f9c4 	bl	80078c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b538:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20004ce0 	.word	0x20004ce0

0800b548 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b558:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <CDC_Transmit_FS+0x48>)
 800b55a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b55e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e00b      	b.n	800b586 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b56e:	887b      	ldrh	r3, [r7, #2]
 800b570:	461a      	mov	r2, r3
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	4806      	ldr	r0, [pc, #24]	; (800b590 <CDC_Transmit_FS+0x48>)
 800b576:	f7fc f946 	bl	8007806 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b57a:	4805      	ldr	r0, [pc, #20]	; (800b590 <CDC_Transmit_FS+0x48>)
 800b57c:	f7fc f971 	bl	8007862 <USBD_CDC_TransmitPacket>
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20004ce0 	.word	0x20004ce0

0800b594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	6039      	str	r1, [r7, #0]
 800b59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2212      	movs	r2, #18
 800b5a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5a6:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	20000148 	.word	0x20000148

0800b5b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	6039      	str	r1, [r7, #0]
 800b5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2204      	movs	r2, #4
 800b5c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	2000015c 	.word	0x2000015c

0800b5dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d105      	bne.n	800b5fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4907      	ldr	r1, [pc, #28]	; (800b610 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5f2:	4808      	ldr	r0, [pc, #32]	; (800b614 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5f4:	f7fd f90a 	bl	800880c <USBD_GetString>
 800b5f8:	e004      	b.n	800b604 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4904      	ldr	r1, [pc, #16]	; (800b610 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5fe:	4805      	ldr	r0, [pc, #20]	; (800b614 <USBD_FS_ProductStrDescriptor+0x38>)
 800b600:	f7fd f904 	bl	800880c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b604:	4b02      	ldr	r3, [pc, #8]	; (800b610 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20004ffc 	.word	0x20004ffc
 800b614:	0800c024 	.word	0x0800c024

0800b618 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	6039      	str	r1, [r7, #0]
 800b622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	4904      	ldr	r1, [pc, #16]	; (800b638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b628:	4804      	ldr	r0, [pc, #16]	; (800b63c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b62a:	f7fd f8ef 	bl	800880c <USBD_GetString>
  return USBD_StrDesc;
 800b62e:	4b02      	ldr	r3, [pc, #8]	; (800b638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	20004ffc 	.word	0x20004ffc
 800b63c:	0800c03c 	.word	0x0800c03c

0800b640 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	6039      	str	r1, [r7, #0]
 800b64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	221a      	movs	r2, #26
 800b650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b652:	f000 f843 	bl	800b6dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b656:	4b02      	ldr	r3, [pc, #8]	; (800b660 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20000160 	.word	0x20000160

0800b664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b670:	79fb      	ldrb	r3, [r7, #7]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d105      	bne.n	800b682 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	4907      	ldr	r1, [pc, #28]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b67a:	4808      	ldr	r0, [pc, #32]	; (800b69c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b67c:	f7fd f8c6 	bl	800880c <USBD_GetString>
 800b680:	e004      	b.n	800b68c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	4904      	ldr	r1, [pc, #16]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b686:	4805      	ldr	r0, [pc, #20]	; (800b69c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b688:	f7fd f8c0 	bl	800880c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b68c:	4b02      	ldr	r3, [pc, #8]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20004ffc 	.word	0x20004ffc
 800b69c:	0800c050 	.word	0x0800c050

0800b6a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	6039      	str	r1, [r7, #0]
 800b6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d105      	bne.n	800b6be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	4907      	ldr	r1, [pc, #28]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6b6:	4808      	ldr	r0, [pc, #32]	; (800b6d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b8:	f7fd f8a8 	bl	800880c <USBD_GetString>
 800b6bc:	e004      	b.n	800b6c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4904      	ldr	r1, [pc, #16]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6c2:	4805      	ldr	r0, [pc, #20]	; (800b6d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6c4:	f7fd f8a2 	bl	800880c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6c8:	4b02      	ldr	r3, [pc, #8]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20004ffc 	.word	0x20004ffc
 800b6d8:	0800c05c 	.word	0x0800c05c

0800b6dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6e2:	4b0f      	ldr	r3, [pc, #60]	; (800b720 <Get_SerialNum+0x44>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6e8:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <Get_SerialNum+0x48>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6ee:	4b0e      	ldr	r3, [pc, #56]	; (800b728 <Get_SerialNum+0x4c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b702:	2208      	movs	r2, #8
 800b704:	4909      	ldr	r1, [pc, #36]	; (800b72c <Get_SerialNum+0x50>)
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 f814 	bl	800b734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b70c:	2204      	movs	r2, #4
 800b70e:	4908      	ldr	r1, [pc, #32]	; (800b730 <Get_SerialNum+0x54>)
 800b710:	68b8      	ldr	r0, [r7, #8]
 800b712:	f000 f80f 	bl	800b734 <IntToUnicode>
  }
}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	1fff7a10 	.word	0x1fff7a10
 800b724:	1fff7a14 	.word	0x1fff7a14
 800b728:	1fff7a18 	.word	0x1fff7a18
 800b72c:	20000162 	.word	0x20000162
 800b730:	20000172 	.word	0x20000172

0800b734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b734:	b480      	push	{r7}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4613      	mov	r3, r2
 800b740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b746:	2300      	movs	r3, #0
 800b748:	75fb      	strb	r3, [r7, #23]
 800b74a:	e027      	b.n	800b79c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	0f1b      	lsrs	r3, r3, #28
 800b750:	2b09      	cmp	r3, #9
 800b752:	d80b      	bhi.n	800b76c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	0f1b      	lsrs	r3, r3, #28
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	4619      	mov	r1, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	440b      	add	r3, r1
 800b764:	3230      	adds	r2, #48	; 0x30
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	e00a      	b.n	800b782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	0f1b      	lsrs	r3, r3, #28
 800b770:	b2da      	uxtb	r2, r3
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	4619      	mov	r1, r3
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	440b      	add	r3, r1
 800b77c:	3237      	adds	r2, #55	; 0x37
 800b77e:	b2d2      	uxtb	r2, r2
 800b780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	011b      	lsls	r3, r3, #4
 800b786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	3301      	adds	r3, #1
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	4413      	add	r3, r2
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	3301      	adds	r3, #1
 800b79a:	75fb      	strb	r3, [r7, #23]
 800b79c:	7dfa      	ldrb	r2, [r7, #23]
 800b79e:	79fb      	ldrb	r3, [r7, #7]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d3d3      	bcc.n	800b74c <IntToUnicode+0x18>
  }
}
 800b7a4:	bf00      	nop
 800b7a6:	371c      	adds	r7, #28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08a      	sub	sp, #40	; 0x28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7b8:	f107 0314 	add.w	r3, r7, #20
 800b7bc:	2200      	movs	r2, #0
 800b7be:	601a      	str	r2, [r3, #0]
 800b7c0:	605a      	str	r2, [r3, #4]
 800b7c2:	609a      	str	r2, [r3, #8]
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d0:	d147      	bne.n	800b862 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]
 800b7d6:	4b25      	ldr	r3, [pc, #148]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7da:	4a24      	ldr	r2, [pc, #144]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b7dc:	f043 0301 	orr.w	r3, r3, #1
 800b7e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b7e2:	4b22      	ldr	r3, [pc, #136]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	613b      	str	r3, [r7, #16]
 800b7ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b7ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b7fc:	f107 0314 	add.w	r3, r7, #20
 800b800:	4619      	mov	r1, r3
 800b802:	481b      	ldr	r0, [pc, #108]	; (800b870 <HAL_PCD_MspInit+0xc0>)
 800b804:	f7f5 fe6c 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b808:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b80c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b80e:	2302      	movs	r3, #2
 800b810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b812:	2300      	movs	r3, #0
 800b814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b816:	2303      	movs	r3, #3
 800b818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b81a:	230a      	movs	r3, #10
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	4619      	mov	r1, r3
 800b824:	4812      	ldr	r0, [pc, #72]	; (800b870 <HAL_PCD_MspInit+0xc0>)
 800b826:	f7f5 fe5b 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b82a:	4b10      	ldr	r3, [pc, #64]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82e:	4a0f      	ldr	r2, [pc, #60]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b834:	6353      	str	r3, [r2, #52]	; 0x34
 800b836:	2300      	movs	r3, #0
 800b838:	60fb      	str	r3, [r7, #12]
 800b83a:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83e:	4a0b      	ldr	r2, [pc, #44]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b844:	6453      	str	r3, [r2, #68]	; 0x44
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <HAL_PCD_MspInit+0xbc>)
 800b848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b852:	2200      	movs	r2, #0
 800b854:	2105      	movs	r1, #5
 800b856:	2043      	movs	r0, #67	; 0x43
 800b858:	f7f5 fe18 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b85c:	2043      	movs	r0, #67	; 0x43
 800b85e:	f7f5 fe31 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b862:	bf00      	nop
 800b864:	3728      	adds	r7, #40	; 0x28
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	40023800 	.word	0x40023800
 800b870:	40020000 	.word	0x40020000

0800b874 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b888:	4619      	mov	r1, r3
 800b88a:	4610      	mov	r0, r2
 800b88c:	f7fc f8d0 	bl	8007a30 <USBD_LL_SetupStage>
}
 800b890:	bf00      	nop
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b8aa:	78fa      	ldrb	r2, [r7, #3]
 800b8ac:	6879      	ldr	r1, [r7, #4]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	440b      	add	r3, r1
 800b8b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	78fb      	ldrb	r3, [r7, #3]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	f7fc f900 	bl	8007ac6 <USBD_LL_DataOutStage>
}
 800b8c6:	bf00      	nop
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b082      	sub	sp, #8
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b8e0:	78fa      	ldrb	r2, [r7, #3]
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	1a9b      	subs	r3, r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	440b      	add	r3, r1
 800b8ee:	3348      	adds	r3, #72	; 0x48
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	f7fc f957 	bl	8007ba8 <USBD_LL_DataInStage>
}
 800b8fa:	bf00      	nop
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b910:	4618      	mov	r0, r3
 800b912:	f7fc fa65 	bl	8007de0 <USBD_LL_SOF>
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b926:	2301      	movs	r3, #1
 800b928:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d001      	beq.n	800b936 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b932:	f7f5 f9eb 	bl	8000d0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b93c:	7bfa      	ldrb	r2, [r7, #15]
 800b93e:	4611      	mov	r1, r2
 800b940:	4618      	mov	r0, r3
 800b942:	f7fc fa17 	bl	8007d74 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fc f9d0 	bl	8007cf2 <USBD_LL_Reset>
}
 800b952:	bf00      	nop
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fc fa12 	bl	8007d94 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	6812      	ldr	r2, [r2, #0]
 800b97e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b982:	f043 0301 	orr.w	r3, r3, #1
 800b986:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d005      	beq.n	800b99c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b990:	4b04      	ldr	r3, [pc, #16]	; (800b9a4 <HAL_PCD_SuspendCallback+0x48>)
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	4a03      	ldr	r2, [pc, #12]	; (800b9a4 <HAL_PCD_SuspendCallback+0x48>)
 800b996:	f043 0306 	orr.w	r3, r3, #6
 800b99a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	e000ed00 	.word	0xe000ed00

0800b9a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fc fa01 	bl	8007dbe <USBD_LL_Resume>
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9d6:	78fa      	ldrb	r2, [r7, #3]
 800b9d8:	4611      	mov	r1, r2
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fc fa27 	bl	8007e2e <USBD_LL_IsoOUTIncomplete>
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9fa:	78fa      	ldrb	r2, [r7, #3]
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fc fa08 	bl	8007e14 <USBD_LL_IsoINIncomplete>
}
 800ba04:	bf00      	nop
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fc fa14 	bl	8007e48 <USBD_LL_DevConnected>
}
 800ba20:	bf00      	nop
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fc fa11 	bl	8007e5e <USBD_LL_DevDisconnected>
}
 800ba3c:	bf00      	nop
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d13c      	bne.n	800bace <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba54:	4a20      	ldr	r2, [pc, #128]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a1e      	ldr	r2, [pc, #120]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba64:	4b1c      	ldr	r3, [pc, #112]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba6c:	4b1a      	ldr	r3, [pc, #104]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba6e:	2204      	movs	r2, #4
 800ba70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba72:	4b19      	ldr	r3, [pc, #100]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba74:	2202      	movs	r2, #2
 800ba76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba78:	4b17      	ldr	r3, [pc, #92]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba7e:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba80:	2202      	movs	r2, #2
 800ba82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba84:	4b14      	ldr	r3, [pc, #80]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba8a:	4b13      	ldr	r3, [pc, #76]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba90:	4b11      	ldr	r3, [pc, #68]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ba96:	4b10      	ldr	r3, [pc, #64]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba98:	2201      	movs	r2, #1
 800ba9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba9c:	4b0e      	ldr	r3, [pc, #56]	; (800bad8 <USBD_LL_Init+0x94>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800baa2:	480d      	ldr	r0, [pc, #52]	; (800bad8 <USBD_LL_Init+0x94>)
 800baa4:	f7f7 fad8 	bl	8003058 <HAL_PCD_Init>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800baae:	f7f5 f92d 	bl	8000d0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bab2:	2180      	movs	r1, #128	; 0x80
 800bab4:	4808      	ldr	r0, [pc, #32]	; (800bad8 <USBD_LL_Init+0x94>)
 800bab6:	f7f8 fc3c 	bl	8004332 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800baba:	2240      	movs	r2, #64	; 0x40
 800babc:	2100      	movs	r1, #0
 800babe:	4806      	ldr	r0, [pc, #24]	; (800bad8 <USBD_LL_Init+0x94>)
 800bac0:	f7f8 fbf0 	bl	80042a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bac4:	2280      	movs	r2, #128	; 0x80
 800bac6:	2101      	movs	r1, #1
 800bac8:	4803      	ldr	r0, [pc, #12]	; (800bad8 <USBD_LL_Init+0x94>)
 800baca:	f7f8 fbeb 	bl	80042a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	200051fc 	.word	0x200051fc

0800badc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae8:	2300      	movs	r3, #0
 800baea:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f7 fbcd 	bl	8003292 <HAL_PCD_Start>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 f92e 	bl	800bd60 <USBD_Get_USB_Status>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b084      	sub	sp, #16
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4603      	mov	r3, r0
 800bb22:	70fb      	strb	r3, [r7, #3]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70bb      	strb	r3, [r7, #2]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bb3a:	78bb      	ldrb	r3, [r7, #2]
 800bb3c:	883a      	ldrh	r2, [r7, #0]
 800bb3e:	78f9      	ldrb	r1, [r7, #3]
 800bb40:	f7f7 ffa2 	bl	8003a88 <HAL_PCD_EP_Open>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 f908 	bl	800bd60 <USBD_Get_USB_Status>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	460b      	mov	r3, r1
 800bb68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb78:	78fa      	ldrb	r2, [r7, #3]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f7 ffeb 	bl	8003b58 <HAL_PCD_EP_Close>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 f8e9 	bl	800bd60 <USBD_Get_USB_Status>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbb6:	78fa      	ldrb	r2, [r7, #3]
 800bbb8:	4611      	mov	r1, r2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7f8 f8c3 	bl	8003d46 <HAL_PCD_EP_SetStall>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 f8ca 	bl	800bd60 <USBD_Get_USB_Status>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbea:	2300      	movs	r3, #0
 800bbec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbf4:	78fa      	ldrb	r2, [r7, #3]
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f8 f908 	bl	8003e0e <HAL_PCD_EP_ClrStall>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f000 f8ab 	bl	800bd60 <USBD_Get_USB_Status>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	460b      	mov	r3, r1
 800bc22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc2a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bc2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	da0b      	bge.n	800bc4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bc34:	78fb      	ldrb	r3, [r7, #3]
 800bc36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc3a:	68f9      	ldr	r1, [r7, #12]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	00db      	lsls	r3, r3, #3
 800bc40:	1a9b      	subs	r3, r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	440b      	add	r3, r1
 800bc46:	333e      	adds	r3, #62	; 0x3e
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	e00b      	b.n	800bc64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc52:	68f9      	ldr	r1, [r7, #12]
 800bc54:	4613      	mov	r3, r2
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	1a9b      	subs	r3, r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	440b      	add	r3, r1
 800bc5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc8a:	78fa      	ldrb	r2, [r7, #3]
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7f7 fed5 	bl	8003a3e <HAL_PCD_SetAddress>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 f860 	bl	800bd60 <USBD_Get_USB_Status>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b086      	sub	sp, #24
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	460b      	mov	r3, r1
 800bcbc:	72fb      	strb	r3, [r7, #11]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bcd0:	893b      	ldrh	r3, [r7, #8]
 800bcd2:	7af9      	ldrb	r1, [r7, #11]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	f7f7 ffec 	bl	8003cb2 <HAL_PCD_EP_Transmit>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 f83d 	bl	800bd60 <USBD_Get_USB_Status>
 800bce6:	4603      	mov	r3, r0
 800bce8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bcea:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	607a      	str	r2, [r7, #4]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	460b      	mov	r3, r1
 800bd02:	72fb      	strb	r3, [r7, #11]
 800bd04:	4613      	mov	r3, r2
 800bd06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd16:	893b      	ldrh	r3, [r7, #8]
 800bd18:	7af9      	ldrb	r1, [r7, #11]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	f7f7 ff66 	bl	8003bec <HAL_PCD_EP_Receive>
 800bd20:	4603      	mov	r3, r0
 800bd22:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 f81a 	bl	800bd60 <USBD_Get_USB_Status>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bd30:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd4c:	78fa      	ldrb	r2, [r7, #3]
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7f7 ff96 	bl	8003c82 <HAL_PCD_EP_GetRxCount>
 800bd56:	4603      	mov	r3, r0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d817      	bhi.n	800bda4 <USBD_Get_USB_Status+0x44>
 800bd74:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <USBD_Get_USB_Status+0x1c>)
 800bd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7a:	bf00      	nop
 800bd7c:	0800bd8d 	.word	0x0800bd8d
 800bd80:	0800bd93 	.word	0x0800bd93
 800bd84:	0800bd99 	.word	0x0800bd99
 800bd88:	0800bd9f 	.word	0x0800bd9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd90:	e00b      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd92:	2302      	movs	r3, #2
 800bd94:	73fb      	strb	r3, [r7, #15]
    break;
 800bd96:	e008      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9c:	e005      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd9e:	2302      	movs	r3, #2
 800bda0:	73fb      	strb	r3, [r7, #15]
    break;
 800bda2:	e002      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bda4:	2302      	movs	r3, #2
 800bda6:	73fb      	strb	r3, [r7, #15]
    break;
 800bda8:	bf00      	nop
  }
  return usb_status;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <__errno>:
 800bdb8:	4b01      	ldr	r3, [pc, #4]	; (800bdc0 <__errno+0x8>)
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	2000017c 	.word	0x2000017c

0800bdc4 <__libc_init_array>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4e0d      	ldr	r6, [pc, #52]	; (800bdfc <__libc_init_array+0x38>)
 800bdc8:	4c0d      	ldr	r4, [pc, #52]	; (800be00 <__libc_init_array+0x3c>)
 800bdca:	1ba4      	subs	r4, r4, r6
 800bdcc:	10a4      	asrs	r4, r4, #2
 800bdce:	2500      	movs	r5, #0
 800bdd0:	42a5      	cmp	r5, r4
 800bdd2:	d109      	bne.n	800bde8 <__libc_init_array+0x24>
 800bdd4:	4e0b      	ldr	r6, [pc, #44]	; (800be04 <__libc_init_array+0x40>)
 800bdd6:	4c0c      	ldr	r4, [pc, #48]	; (800be08 <__libc_init_array+0x44>)
 800bdd8:	f000 f8f6 	bl	800bfc8 <_init>
 800bddc:	1ba4      	subs	r4, r4, r6
 800bdde:	10a4      	asrs	r4, r4, #2
 800bde0:	2500      	movs	r5, #0
 800bde2:	42a5      	cmp	r5, r4
 800bde4:	d105      	bne.n	800bdf2 <__libc_init_array+0x2e>
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdec:	4798      	blx	r3
 800bdee:	3501      	adds	r5, #1
 800bdf0:	e7ee      	b.n	800bdd0 <__libc_init_array+0xc>
 800bdf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdf6:	4798      	blx	r3
 800bdf8:	3501      	adds	r5, #1
 800bdfa:	e7f2      	b.n	800bde2 <__libc_init_array+0x1e>
 800bdfc:	0800c08c 	.word	0x0800c08c
 800be00:	0800c08c 	.word	0x0800c08c
 800be04:	0800c08c 	.word	0x0800c08c
 800be08:	0800c090 	.word	0x0800c090

0800be0c <malloc>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <malloc+0xc>)
 800be0e:	4601      	mov	r1, r0
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	f000 b86d 	b.w	800bef0 <_malloc_r>
 800be16:	bf00      	nop
 800be18:	2000017c 	.word	0x2000017c

0800be1c <free>:
 800be1c:	4b02      	ldr	r3, [pc, #8]	; (800be28 <free+0xc>)
 800be1e:	4601      	mov	r1, r0
 800be20:	6818      	ldr	r0, [r3, #0]
 800be22:	f000 b817 	b.w	800be54 <_free_r>
 800be26:	bf00      	nop
 800be28:	2000017c 	.word	0x2000017c

0800be2c <memcpy>:
 800be2c:	b510      	push	{r4, lr}
 800be2e:	1e43      	subs	r3, r0, #1
 800be30:	440a      	add	r2, r1
 800be32:	4291      	cmp	r1, r2
 800be34:	d100      	bne.n	800be38 <memcpy+0xc>
 800be36:	bd10      	pop	{r4, pc}
 800be38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be40:	e7f7      	b.n	800be32 <memcpy+0x6>

0800be42 <memset>:
 800be42:	4402      	add	r2, r0
 800be44:	4603      	mov	r3, r0
 800be46:	4293      	cmp	r3, r2
 800be48:	d100      	bne.n	800be4c <memset+0xa>
 800be4a:	4770      	bx	lr
 800be4c:	f803 1b01 	strb.w	r1, [r3], #1
 800be50:	e7f9      	b.n	800be46 <memset+0x4>
	...

0800be54 <_free_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4605      	mov	r5, r0
 800be58:	2900      	cmp	r1, #0
 800be5a:	d045      	beq.n	800bee8 <_free_r+0x94>
 800be5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be60:	1f0c      	subs	r4, r1, #4
 800be62:	2b00      	cmp	r3, #0
 800be64:	bfb8      	it	lt
 800be66:	18e4      	addlt	r4, r4, r3
 800be68:	f000 f8ac 	bl	800bfc4 <__malloc_lock>
 800be6c:	4a1f      	ldr	r2, [pc, #124]	; (800beec <_free_r+0x98>)
 800be6e:	6813      	ldr	r3, [r2, #0]
 800be70:	4610      	mov	r0, r2
 800be72:	b933      	cbnz	r3, 800be82 <_free_r+0x2e>
 800be74:	6063      	str	r3, [r4, #4]
 800be76:	6014      	str	r4, [r2, #0]
 800be78:	4628      	mov	r0, r5
 800be7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be7e:	f000 b8a2 	b.w	800bfc6 <__malloc_unlock>
 800be82:	42a3      	cmp	r3, r4
 800be84:	d90c      	bls.n	800bea0 <_free_r+0x4c>
 800be86:	6821      	ldr	r1, [r4, #0]
 800be88:	1862      	adds	r2, r4, r1
 800be8a:	4293      	cmp	r3, r2
 800be8c:	bf04      	itt	eq
 800be8e:	681a      	ldreq	r2, [r3, #0]
 800be90:	685b      	ldreq	r3, [r3, #4]
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	bf04      	itt	eq
 800be96:	1852      	addeq	r2, r2, r1
 800be98:	6022      	streq	r2, [r4, #0]
 800be9a:	6004      	str	r4, [r0, #0]
 800be9c:	e7ec      	b.n	800be78 <_free_r+0x24>
 800be9e:	4613      	mov	r3, r2
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	b10a      	cbz	r2, 800bea8 <_free_r+0x54>
 800bea4:	42a2      	cmp	r2, r4
 800bea6:	d9fa      	bls.n	800be9e <_free_r+0x4a>
 800bea8:	6819      	ldr	r1, [r3, #0]
 800beaa:	1858      	adds	r0, r3, r1
 800beac:	42a0      	cmp	r0, r4
 800beae:	d10b      	bne.n	800bec8 <_free_r+0x74>
 800beb0:	6820      	ldr	r0, [r4, #0]
 800beb2:	4401      	add	r1, r0
 800beb4:	1858      	adds	r0, r3, r1
 800beb6:	4282      	cmp	r2, r0
 800beb8:	6019      	str	r1, [r3, #0]
 800beba:	d1dd      	bne.n	800be78 <_free_r+0x24>
 800bebc:	6810      	ldr	r0, [r2, #0]
 800bebe:	6852      	ldr	r2, [r2, #4]
 800bec0:	605a      	str	r2, [r3, #4]
 800bec2:	4401      	add	r1, r0
 800bec4:	6019      	str	r1, [r3, #0]
 800bec6:	e7d7      	b.n	800be78 <_free_r+0x24>
 800bec8:	d902      	bls.n	800bed0 <_free_r+0x7c>
 800beca:	230c      	movs	r3, #12
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	e7d3      	b.n	800be78 <_free_r+0x24>
 800bed0:	6820      	ldr	r0, [r4, #0]
 800bed2:	1821      	adds	r1, r4, r0
 800bed4:	428a      	cmp	r2, r1
 800bed6:	bf04      	itt	eq
 800bed8:	6811      	ldreq	r1, [r2, #0]
 800beda:	6852      	ldreq	r2, [r2, #4]
 800bedc:	6062      	str	r2, [r4, #4]
 800bede:	bf04      	itt	eq
 800bee0:	1809      	addeq	r1, r1, r0
 800bee2:	6021      	streq	r1, [r4, #0]
 800bee4:	605c      	str	r4, [r3, #4]
 800bee6:	e7c7      	b.n	800be78 <_free_r+0x24>
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	bf00      	nop
 800beec:	20004b0c 	.word	0x20004b0c

0800bef0 <_malloc_r>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	1ccd      	adds	r5, r1, #3
 800bef4:	f025 0503 	bic.w	r5, r5, #3
 800bef8:	3508      	adds	r5, #8
 800befa:	2d0c      	cmp	r5, #12
 800befc:	bf38      	it	cc
 800befe:	250c      	movcc	r5, #12
 800bf00:	2d00      	cmp	r5, #0
 800bf02:	4606      	mov	r6, r0
 800bf04:	db01      	blt.n	800bf0a <_malloc_r+0x1a>
 800bf06:	42a9      	cmp	r1, r5
 800bf08:	d903      	bls.n	800bf12 <_malloc_r+0x22>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	2000      	movs	r0, #0
 800bf10:	bd70      	pop	{r4, r5, r6, pc}
 800bf12:	f000 f857 	bl	800bfc4 <__malloc_lock>
 800bf16:	4a21      	ldr	r2, [pc, #132]	; (800bf9c <_malloc_r+0xac>)
 800bf18:	6814      	ldr	r4, [r2, #0]
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	b991      	cbnz	r1, 800bf44 <_malloc_r+0x54>
 800bf1e:	4c20      	ldr	r4, [pc, #128]	; (800bfa0 <_malloc_r+0xb0>)
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	b91b      	cbnz	r3, 800bf2c <_malloc_r+0x3c>
 800bf24:	4630      	mov	r0, r6
 800bf26:	f000 f83d 	bl	800bfa4 <_sbrk_r>
 800bf2a:	6020      	str	r0, [r4, #0]
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f000 f838 	bl	800bfa4 <_sbrk_r>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d124      	bne.n	800bf82 <_malloc_r+0x92>
 800bf38:	230c      	movs	r3, #12
 800bf3a:	6033      	str	r3, [r6, #0]
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	f000 f842 	bl	800bfc6 <__malloc_unlock>
 800bf42:	e7e4      	b.n	800bf0e <_malloc_r+0x1e>
 800bf44:	680b      	ldr	r3, [r1, #0]
 800bf46:	1b5b      	subs	r3, r3, r5
 800bf48:	d418      	bmi.n	800bf7c <_malloc_r+0x8c>
 800bf4a:	2b0b      	cmp	r3, #11
 800bf4c:	d90f      	bls.n	800bf6e <_malloc_r+0x7e>
 800bf4e:	600b      	str	r3, [r1, #0]
 800bf50:	50cd      	str	r5, [r1, r3]
 800bf52:	18cc      	adds	r4, r1, r3
 800bf54:	4630      	mov	r0, r6
 800bf56:	f000 f836 	bl	800bfc6 <__malloc_unlock>
 800bf5a:	f104 000b 	add.w	r0, r4, #11
 800bf5e:	1d23      	adds	r3, r4, #4
 800bf60:	f020 0007 	bic.w	r0, r0, #7
 800bf64:	1ac3      	subs	r3, r0, r3
 800bf66:	d0d3      	beq.n	800bf10 <_malloc_r+0x20>
 800bf68:	425a      	negs	r2, r3
 800bf6a:	50e2      	str	r2, [r4, r3]
 800bf6c:	e7d0      	b.n	800bf10 <_malloc_r+0x20>
 800bf6e:	428c      	cmp	r4, r1
 800bf70:	684b      	ldr	r3, [r1, #4]
 800bf72:	bf16      	itet	ne
 800bf74:	6063      	strne	r3, [r4, #4]
 800bf76:	6013      	streq	r3, [r2, #0]
 800bf78:	460c      	movne	r4, r1
 800bf7a:	e7eb      	b.n	800bf54 <_malloc_r+0x64>
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	6849      	ldr	r1, [r1, #4]
 800bf80:	e7cc      	b.n	800bf1c <_malloc_r+0x2c>
 800bf82:	1cc4      	adds	r4, r0, #3
 800bf84:	f024 0403 	bic.w	r4, r4, #3
 800bf88:	42a0      	cmp	r0, r4
 800bf8a:	d005      	beq.n	800bf98 <_malloc_r+0xa8>
 800bf8c:	1a21      	subs	r1, r4, r0
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f000 f808 	bl	800bfa4 <_sbrk_r>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d0cf      	beq.n	800bf38 <_malloc_r+0x48>
 800bf98:	6025      	str	r5, [r4, #0]
 800bf9a:	e7db      	b.n	800bf54 <_malloc_r+0x64>
 800bf9c:	20004b0c 	.word	0x20004b0c
 800bfa0:	20004b10 	.word	0x20004b10

0800bfa4 <_sbrk_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4c06      	ldr	r4, [pc, #24]	; (800bfc0 <_sbrk_r+0x1c>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4605      	mov	r5, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	6023      	str	r3, [r4, #0]
 800bfb0:	f7f5 f8c4 	bl	800113c <_sbrk>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_sbrk_r+0x1a>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_sbrk_r+0x1a>
 800bfbc:	602b      	str	r3, [r5, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	20005604 	.word	0x20005604

0800bfc4 <__malloc_lock>:
 800bfc4:	4770      	bx	lr

0800bfc6 <__malloc_unlock>:
 800bfc6:	4770      	bx	lr

0800bfc8 <_init>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	bf00      	nop
 800bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfce:	bc08      	pop	{r3}
 800bfd0:	469e      	mov	lr, r3
 800bfd2:	4770      	bx	lr

0800bfd4 <_fini>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	bf00      	nop
 800bfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfda:	bc08      	pop	{r3}
 800bfdc:	469e      	mov	lr, r3
 800bfde:	4770      	bx	lr
