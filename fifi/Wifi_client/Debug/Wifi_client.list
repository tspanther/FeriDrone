
Wifi_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008320  08008320  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  200001e0  08008508  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c74  08008508  00021c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198c1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037f9  00000000  00000000  00039ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  0003d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  0003e648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a0f4  00000000  00000000  0003f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013038  00000000  00000000  0005992c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ed49  00000000  00000000  0006c964  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb6ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  000fb728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e0 	.word	0x200001e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008204 	.word	0x08008204

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e4 	.word	0x200001e4
 80001d4:	08008204 	.word	0x08008204

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0c2      	sub	sp, #264	; 0x108
 80004dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fe33 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f8cf 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fa67 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f94f 	bl	800078c <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ee:	f000 f97b 	bl	80007e8 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f2:	f000 f9a7 	bl	8000844 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f6:	f000 f9d5 	bl	80008a4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004fa:	f007 f891 	bl	8007620 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80004fe:	f000 fa07 	bl	8000910 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000502:	f000 fa2f 	bl	8000964 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  uint8_t inicializacija = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  uint8_t prejetoSporocilo[255] = {};
 800050c:	f107 0308 	add.w	r3, r7, #8
 8000510:	4618      	mov	r0, r3
 8000512:	23ff      	movs	r3, #255	; 0xff
 8000514:	461a      	mov	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f007 fdb2 	bl	8008080 <memset>
  char bufferToSend[7] = "9999999";
 800051c:	463b      	mov	r3, r7
 800051e:	4a50      	ldr	r2, [pc, #320]	; (8000660 <main+0x188>)
 8000520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000524:	6018      	str	r0, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	8019      	strh	r1, [r3, #0]
 800052a:	3302      	adds	r3, #2
 800052c:	0c0a      	lsrs	r2, r1, #16
 800052e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  // Debug delay.
	  //HAL_Delay(8000); // 8 s.

	  if(!inicializacija){
 8000530:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000534:	2b00      	cmp	r3, #0
 8000536:	d169      	bne.n	800060c <main+0x134>

		  // Uart1 (PA15_TX ; PB7_RX)-> TCP server.
		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWMODE=1\r\n", 13, 1000); // 1 = ST.
 8000538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053c:	220d      	movs	r2, #13
 800053e:	4949      	ldr	r1, [pc, #292]	; (8000664 <main+0x18c>)
 8000540:	4849      	ldr	r0, [pc, #292]	; (8000668 <main+0x190>)
 8000542:	f003 fec4 	bl	80042ce <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 8000546:	f107 0108 	add.w	r1, r7, #8
 800054a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054e:	22ff      	movs	r2, #255	; 0xff
 8000550:	4845      	ldr	r0, [pc, #276]	; (8000668 <main+0x190>)
 8000552:	f003 ff55 	bl	8004400 <HAL_UART_Receive>
		  //CDC_Transmit_FS(prejetoSporocilo, 255);
		  //memset(prejetoSporocilo, 0, 255);

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWLAP\r\n", 10, 1000); // Connect to router. Tega ne razumem najboljse.
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	220a      	movs	r2, #10
 800055c:	4943      	ldr	r1, [pc, #268]	; (800066c <main+0x194>)
 800055e:	4842      	ldr	r0, [pc, #264]	; (8000668 <main+0x190>)
 8000560:	f003 feb5 	bl	80042ce <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 8000564:	f107 0108 	add.w	r1, r7, #8
 8000568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056c:	22ff      	movs	r2, #255	; 0xff
 800056e:	483e      	ldr	r0, [pc, #248]	; (8000668 <main+0x190>)
 8000570:	f003 ff46 	bl	8004400 <HAL_UART_Receive>
		  //CDC_Transmit_FS(prejetoSporocilo, 255);
		  //memset(prejetoSporocilo, 0, 255);

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWJAP?\r\n", 11, 1000); // Setup server with default port 333.
 8000574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000578:	220b      	movs	r2, #11
 800057a:	493d      	ldr	r1, [pc, #244]	; (8000670 <main+0x198>)
 800057c:	483a      	ldr	r0, [pc, #232]	; (8000668 <main+0x190>)
 800057e:	f003 fea6 	bl	80042ce <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 8000582:	f107 0108 	add.w	r1, r7, #8
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	22ff      	movs	r2, #255	; 0xff
 800058c:	4836      	ldr	r0, [pc, #216]	; (8000668 <main+0x190>)
 800058e:	f003 ff37 	bl	8004400 <HAL_UART_Receive>
		  CDC_Transmit_FS(prejetoSporocilo, 255);
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	21ff      	movs	r1, #255	; 0xff
 8000598:	4618      	mov	r0, r3
 800059a:	f007 f8ff 	bl	800779c <CDC_Transmit_FS>
		  memset(prejetoSporocilo, 0, 255);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	22ff      	movs	r2, #255	; 0xff
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 fd6a 	bl	8008080 <memset>

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWJAP=\"server\",\"123456780\"\r\n", 33, 1000); // Connect to router. Tega ne razumem najboljse.
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	2221      	movs	r2, #33	; 0x21
 80005b2:	4930      	ldr	r1, [pc, #192]	; (8000674 <main+0x19c>)
 80005b4:	482c      	ldr	r0, [pc, #176]	; (8000668 <main+0x190>)
 80005b6:	f003 fe8a 	bl	80042ce <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 80005ba:	f107 0108 	add.w	r1, r7, #8
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	22ff      	movs	r2, #255	; 0xff
 80005c4:	4828      	ldr	r0, [pc, #160]	; (8000668 <main+0x190>)
 80005c6:	f003 ff1b 	bl	8004400 <HAL_UART_Receive>
		  //CDC_Transmit_FS(prejetoSporocilo, 255);
		  //memset(prejetoSporocilo, 0, 255);

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMUX=1\r\n", 13, 1000); // Set wifi mode: AP + ST.
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	220d      	movs	r2, #13
 80005d0:	4929      	ldr	r1, [pc, #164]	; (8000678 <main+0x1a0>)
 80005d2:	4825      	ldr	r0, [pc, #148]	; (8000668 <main+0x190>)
 80005d4:	f003 fe7b 	bl	80042ce <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 80005d8:	f107 0108 	add.w	r1, r7, #8
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	22ff      	movs	r2, #255	; 0xff
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <main+0x190>)
 80005e4:	f003 ff0c 	bl	8004400 <HAL_UART_Receive>
		  //memset(prejetoSporocilo, 0, 255);

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSTART=0,\"TCP\",\"192.168.4.1\",333\r\n", 39, 1000); // Set wifi mode: AP + ST.
 80005e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ec:	2227      	movs	r2, #39	; 0x27
 80005ee:	4923      	ldr	r1, [pc, #140]	; (800067c <main+0x1a4>)
 80005f0:	481d      	ldr	r0, [pc, #116]	; (8000668 <main+0x190>)
 80005f2:	f003 fe6c 	bl	80042ce <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 80005f6:	f107 0108 	add.w	r1, r7, #8
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	22ff      	movs	r2, #255	; 0xff
 8000600:	4819      	ldr	r0, [pc, #100]	; (8000668 <main+0x190>)
 8000602:	f003 fefd 	bl	8004400 <HAL_UART_Receive>
		 /* HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPCLOSE=2\r\n", 15, 1000); // Set wifi mode: AP + ST.
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
		  CDC_Transmit_FS(prejetoSporocilo, 255);
		  memset(prejetoSporocilo, 0, 255);*/

		  inicializacija = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	  }

	  //HAL_Delay(20);

	  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSEND=0,7\r\n", 16, 250); // Set wifi mode: AP + ST.
 800060c:	23fa      	movs	r3, #250	; 0xfa
 800060e:	2210      	movs	r2, #16
 8000610:	491b      	ldr	r1, [pc, #108]	; (8000680 <main+0x1a8>)
 8000612:	4815      	ldr	r0, [pc, #84]	; (8000668 <main+0x190>)
 8000614:	f003 fe5b 	bl	80042ce <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 250);
 8000618:	f107 0108 	add.w	r1, r7, #8
 800061c:	23fa      	movs	r3, #250	; 0xfa
 800061e:	22ff      	movs	r2, #255	; 0xff
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <main+0x190>)
 8000622:	f003 feed 	bl	8004400 <HAL_UART_Receive>
	  //CDC_Transmit_FS(prejetoSporocilo, 255);
	  memset(prejetoSporocilo, 0, 255);
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	22ff      	movs	r2, #255	; 0xff
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fd26 	bl	8008080 <memset>

	  HAL_UART_Transmit(&huart1, (uint8_t*)bufferToSend, 7, 250); // Set wifi mode: AP + ST.
 8000634:	4639      	mov	r1, r7
 8000636:	23fa      	movs	r3, #250	; 0xfa
 8000638:	2207      	movs	r2, #7
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <main+0x190>)
 800063c:	f003 fe47 	bl	80042ce <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 250);
 8000640:	f107 0108 	add.w	r1, r7, #8
 8000644:	23fa      	movs	r3, #250	; 0xfa
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <main+0x190>)
 800064a:	f003 fed9 	bl	8004400 <HAL_UART_Receive>
	  //CDC_Transmit_FS(prejetoSporocilo, 255);
	  memset(prejetoSporocilo, 0, 255);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	22ff      	movs	r2, #255	; 0xff
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fd12 	bl	8008080 <memset>
	  if(!inicializacija){
 800065c:	e768      	b.n	8000530 <main+0x58>
 800065e:	bf00      	nop
 8000660:	080082b0 	.word	0x080082b0
 8000664:	0800821c 	.word	0x0800821c
 8000668:	20000260 	.word	0x20000260
 800066c:	0800822c 	.word	0x0800822c
 8000670:	08008238 	.word	0x08008238
 8000674:	08008244 	.word	0x08008244
 8000678:	08008264 	.word	0x08008264
 800067c:	08008274 	.word	0x08008274
 8000680:	0800829c 	.word	0x0800829c

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09a      	sub	sp, #104	; 0x68
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fcf4 	bl	8008080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b31      	ldr	r3, [pc, #196]	; (8000784 <SystemClock_Config+0x100>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a30      	ldr	r2, [pc, #192]	; (8000784 <SystemClock_Config+0x100>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <SystemClock_Config+0x100>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemClock_Config+0x104>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <SystemClock_Config+0x104>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0x104>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000706:	2304      	movs	r3, #4
 8000708:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070a:	23a8      	movs	r3, #168	; 0xa8
 800070c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071a:	4618      	mov	r0, r3
 800071c:	f002 ffa8 	bl	8003670 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f000 fa21 	bl	8000b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f003 f9d4 	bl	8003af4 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000752:	f000 fa0b 	bl	8000b6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800075a:	23c8      	movs	r3, #200	; 0xc8
 800075c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fbb0 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000776:	f000 f9f9 	bl	8000b6c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3768      	adds	r7, #104	; 0x68
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f000 ffff 	bl	80017cc <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f9ca 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000020c 	.word	0x2000020c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2S2_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_I2S2_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2S2_Init+0x50>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2S2_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_I2S2_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_I2S2_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_I2S2_Init+0x50>)
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <MX_I2S2_Init+0x58>)
 8000810:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_I2S2_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_I2S2_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2S2_Init+0x50>)
 8000820:	2201      	movs	r2, #1
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2S2_Init+0x50>)
 8000826:	f001 f8f9 	bl	8001a1c <HAL_I2S_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 f99c 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000338 	.word	0x20000338
 800083c:	40003800 	.word	0x40003800
 8000840:	00017700 	.word	0x00017700

08000844 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_I2S3_Init+0x54>)
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <MX_I2S3_Init+0x58>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2S3_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_I2S3_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_I2S3_Init+0x54>)
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_I2S3_Init+0x54>)
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <MX_I2S3_Init+0x5c>)
 800086e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_I2S3_Init+0x54>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_I2S3_Init+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_I2S3_Init+0x54>)
 8000884:	f001 f8ca 	bl	8001a1c <HAL_I2S_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800088e:	f000 f96d 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000380 	.word	0x20000380
 800089c:	40003c00 	.word	0x40003c00
 80008a0:	00017700 	.word	0x00017700

080008a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_SPI1_Init+0x64>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_SPI1_Init+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f6:	f003 fc39 	bl	800416c <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000900:	f000 f934 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002a0 	.word	0x200002a0
 800090c:	40013000 	.word	0x40013000

08000910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_USART1_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_USART1_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000948:	f003 fc74 	bl	8004234 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 f90b 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000260 	.word	0x20000260
 8000960:	40011000 	.word	0x40011000

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART2_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800099c:	f003 fc4a 	bl	8004234 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f8e1 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200002f8 	.word	0x200002f8
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	4b60      	ldr	r3, [pc, #384]	; (8000b54 <MX_GPIO_Init+0x19c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a5f      	ldr	r2, [pc, #380]	; (8000b54 <MX_GPIO_Init+0x19c>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b5d      	ldr	r3, [pc, #372]	; (8000b54 <MX_GPIO_Init+0x19c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	61bb      	str	r3, [r7, #24]
 80009e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	4b59      	ldr	r3, [pc, #356]	; (8000b54 <MX_GPIO_Init+0x19c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a58      	ldr	r2, [pc, #352]	; (8000b54 <MX_GPIO_Init+0x19c>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b56      	ldr	r3, [pc, #344]	; (8000b54 <MX_GPIO_Init+0x19c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b52      	ldr	r3, [pc, #328]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a51      	ldr	r2, [pc, #324]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4f      	ldr	r3, [pc, #316]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b4b      	ldr	r3, [pc, #300]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a4a      	ldr	r2, [pc, #296]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b44      	ldr	r3, [pc, #272]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a43      	ldr	r2, [pc, #268]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a3c      	ldr	r2, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x19c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4837      	ldr	r0, [pc, #220]	; (8000b58 <MX_GPIO_Init+0x1a0>)
 8000a7c:	f000 fe8c 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2101      	movs	r1, #1
 8000a84:	4835      	ldr	r0, [pc, #212]	; (8000b5c <MX_GPIO_Init+0x1a4>)
 8000a86:	f000 fe87 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a90:	4833      	ldr	r0, [pc, #204]	; (8000b60 <MX_GPIO_Init+0x1a8>)
 8000a92:	f000 fe81 	bl	8001798 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a96:	2304      	movs	r3, #4
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482b      	ldr	r0, [pc, #172]	; (8000b58 <MX_GPIO_Init+0x1a0>)
 8000aaa:	f000 fcf3 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4824      	ldr	r0, [pc, #144]	; (8000b58 <MX_GPIO_Init+0x1a0>)
 8000ac6:	f000 fce5 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000aca:	2332      	movs	r3, #50	; 0x32
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <MX_GPIO_Init+0x1ac>)
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	481e      	ldr	r0, [pc, #120]	; (8000b58 <MX_GPIO_Init+0x1a0>)
 8000ade:	f000 fcd9 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_GPIO_Init+0x1a4>)
 8000afa:	f000 fccb 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_GPIO_Init+0x1ac>)
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4815      	ldr	r0, [pc, #84]	; (8000b68 <MX_GPIO_Init+0x1b0>)
 8000b12:	f000 fcbf 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000b16:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b1a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_GPIO_Init+0x1a8>)
 8000b30:	f000 fcb0 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b34:	2320      	movs	r3, #32
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_GPIO_Init+0x1a8>)
 8000b48:	f000 fca4 	bl	8001494 <HAL_GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	10120000 	.word	0x10120000
 8000b68:	40020000 	.word	0x40020000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_I2C_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12c      	bne.n	8000c48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c10:	2312      	movs	r3, #18
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <HAL_I2C_MspInit+0x8c>)
 8000c28:	f000 fc34 	bl	8001494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40005400 	.word	0x40005400
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400

08000c5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	; 0x38
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a59      	ldr	r2, [pc, #356]	; (8000de0 <HAL_I2S_MspInit+0x184>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d15b      	bne.n	8000d36 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	4b58      	ldr	r3, [pc, #352]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a57      	ldr	r2, [pc, #348]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b55      	ldr	r3, [pc, #340]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a50      	ldr	r2, [pc, #320]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	483e      	ldr	r0, [pc, #248]	; (8000de8 <HAL_I2S_MspInit+0x18c>)
 8000cee:	f000 fbd1 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d02:	2305      	movs	r3, #5
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4836      	ldr	r0, [pc, #216]	; (8000de8 <HAL_I2S_MspInit+0x18c>)
 8000d0e:	f000 fbc1 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d24:	2305      	movs	r3, #5
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482f      	ldr	r0, [pc, #188]	; (8000dec <HAL_I2S_MspInit+0x190>)
 8000d30:	f000 fbb0 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d34:	e04f      	b.n	8000dd6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	; (8000df0 <HAL_I2S_MspInit+0x194>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d14a      	bne.n	8000dd6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_I2S_MspInit+0x188>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d94:	2310      	movs	r3, #16
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da4:	2306      	movs	r3, #6
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4811      	ldr	r0, [pc, #68]	; (8000df4 <HAL_I2S_MspInit+0x198>)
 8000db0:	f000 fb70 	bl	8001494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000db4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_I2S_MspInit+0x18c>)
 8000dd2:	f000 fb5f 	bl	8001494 <HAL_GPIO_Init>
}
 8000dd6:	bf00      	nop
 8000dd8:	3738      	adds	r7, #56	; 0x38
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40003800 	.word	0x40003800
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40003c00 	.word	0x40003c00
 8000df4:	40020000 	.word	0x40020000

08000df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_SPI_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12b      	bne.n	8000e72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e52:	23e0      	movs	r3, #224	; 0xe0
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e62:	2305      	movs	r3, #5
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_SPI_MspInit+0x8c>)
 8000e6e:	f000 fb11 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a41      	ldr	r2, [pc, #260]	; (8000fac <HAL_UART_MspInit+0x124>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d14b      	bne.n	8000f42 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f10:	2307      	movs	r3, #7
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f1c:	f000 faba 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f30:	2307      	movs	r3, #7
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481f      	ldr	r0, [pc, #124]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000f3c:	f000 faaa 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f40:	e030      	b.n	8000fa4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_UART_MspInit+0x134>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d12b      	bne.n	8000fa4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f84:	230c      	movs	r3, #12
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f94:	2307      	movs	r3, #7
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000fa0:	f000 fa78 	bl	8001494 <HAL_GPIO_Init>
}
 8000fa4:	bf00      	nop
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f8ea 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <OTG_FS_IRQHandler+0x10>)
 8001022:	f001 faeb 	bl	80025fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20001868 	.word	0x20001868

08001030 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <_sbrk+0x50>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x16>
		heap_end = &end;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <_sbrk+0x50>)
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <_sbrk+0x54>)
 8001044:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <_sbrk+0x50>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <_sbrk+0x50>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	466a      	mov	r2, sp
 8001056:	4293      	cmp	r3, r2
 8001058:	d907      	bls.n	800106a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800105a:	f006 ffd7 	bl	800800c <__errno>
 800105e:	4602      	mov	r2, r0
 8001060:	230c      	movs	r3, #12
 8001062:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	e006      	b.n	8001078 <_sbrk+0x48>
	}

	heap_end += incr;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <_sbrk+0x50>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a03      	ldr	r2, [pc, #12]	; (8001080 <_sbrk+0x50>)
 8001074:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200001fc 	.word	0x200001fc
 8001084:	20001c78 	.word	0x20001c78

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <SystemInit+0x60>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001092:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <SystemInit+0x60>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <SystemInit+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <SystemInit+0x64>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <SystemInit+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <SystemInit+0x64>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <SystemInit+0x64>)
 80010b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <SystemInit+0x64>)
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <SystemInit+0x68>)
 80010c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <SystemInit+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <SystemInit+0x64>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SystemInit+0x60>)
 80010d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010dc:	609a      	str	r2, [r3, #8]
#endif
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	40023800 	.word	0x40023800
 80010f0:	24003010 	.word	0x24003010

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010fa:	e003      	b.n	8001104 <LoopCopyDataInit>

080010fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001100:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001102:	3104      	adds	r1, #4

08001104 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001108:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800110a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800110c:	d3f6      	bcc.n	80010fc <CopyDataInit>
  ldr  r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001110:	e002      	b.n	8001118 <LoopFillZerobss>

08001112 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001112:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001114:	f842 3b04 	str.w	r3, [r2], #4

08001118 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800111a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800111c:	d3f9      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800111e:	f7ff ffb3 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f006 ff79 	bl	8008018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff f9d7 	bl	80004d8 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800112c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001130:	08008328 	.word	0x08008328
  ldr  r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001138:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800113c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001140:	20001c74 	.word	0x20001c74

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f94d 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fcfe 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f965 	bl	800147a <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 f92d 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	200003c8 	.word	0x200003c8

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200003c8 	.word	0x200003c8

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_Delay+0x40>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000008 	.word	0x20000008

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff29 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff3e 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff31 	bl	80012d4 <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	e159      	b.n	8001764 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b0:	2201      	movs	r2, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8148 	bne.w	800175e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x4a>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d123      	bne.n	8001526 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	69b9      	ldr	r1, [r7, #24]
 8001522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0203 	and.w	r2, r3, #3
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d00b      	beq.n	800157a <HAL_GPIO_Init+0xe6>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800156e:	2b11      	cmp	r3, #17
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b12      	cmp	r3, #18
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a2 	beq.w	800175e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_GPIO_Init+0x2e4>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x2e4>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_GPIO_Init+0x2e4>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001636:	4a51      	ldr	r2, [pc, #324]	; (800177c <HAL_GPIO_Init+0x2e8>)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_GPIO_Init+0x2ec>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0x202>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x1fe>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a46      	ldr	r2, [pc, #280]	; (8001788 <HAL_GPIO_Init+0x2f4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x1fa>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_GPIO_Init+0x2f8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x1f6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a44      	ldr	r2, [pc, #272]	; (8001790 <HAL_GPIO_Init+0x2fc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x1f2>
 8001682:	2304      	movs	r3, #4
 8001684:	e008      	b.n	8001698 <HAL_GPIO_Init+0x204>
 8001686:	2307      	movs	r3, #7
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x204>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x204>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x204>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x204>
 8001696:	2300      	movs	r3, #0
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a8:	4934      	ldr	r1, [pc, #208]	; (800177c <HAL_GPIO_Init+0x2e8>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x300>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016da:	4a2e      	ldr	r2, [pc, #184]	; (8001794 <HAL_GPIO_Init+0x300>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_GPIO_Init+0x300>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001704:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_GPIO_Init+0x300>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_GPIO_Init+0x300>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172e:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_GPIO_Init+0x300>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_GPIO_Init+0x300>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_GPIO_Init+0x300>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	f67f aea2 	bls.w	80014b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800176c:	bf00      	nop
 800176e:	3724      	adds	r7, #36	; 0x24
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e10f      	b.n	80019fe <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff f9ea 	bl	8000bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2224      	movs	r2, #36	; 0x24
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f002 fb36 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a7b      	ldr	r2, [pc, #492]	; (8001a08 <HAL_I2C_Init+0x23c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x64>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_I2C_Init+0x240>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x72>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a77      	ldr	r2, [pc, #476]	; (8001a10 <HAL_I2C_Init+0x244>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0db      	b.n	80019fe <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a72      	ldr	r2, [pc, #456]	; (8001a14 <HAL_I2C_Init+0x248>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a64      	ldr	r2, [pc, #400]	; (8001a08 <HAL_I2C_Init+0x23c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xb4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xc8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a63      	ldr	r2, [pc, #396]	; (8001a18 <HAL_I2C_Init+0x24c>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4956      	ldr	r1, [pc, #344]	; (8001a08 <HAL_I2C_Init+0x23c>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d80d      	bhi.n	80018d0 <HAL_I2C_Init+0x104>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	bf38      	it	cc
 80018cc:	2304      	movcc	r3, #4
 80018ce:	e04f      	b.n	8001970 <HAL_I2C_Init+0x1a4>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d111      	bne.n	80018fc <HAL_I2C_Init+0x130>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e58      	subs	r0, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e012      	b.n	8001922 <HAL_I2C_Init+0x156>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	0099      	lsls	r1, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Init+0x15e>
 8001926:	2301      	movs	r3, #1
 8001928:	e022      	b.n	8001970 <HAL_I2C_Init+0x1a4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10e      	bne.n	8001950 <HAL_I2C_Init+0x184>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e58      	subs	r0, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	440b      	add	r3, r1
 8001940:	fbb0 f3f3 	udiv	r3, r0, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194e:	e00f      	b.n	8001970 <HAL_I2C_Init+0x1a4>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	0099      	lsls	r1, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	fbb0 f3f3 	udiv	r3, r0, r3
 8001966:	3301      	adds	r3, #1
 8001968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	6809      	ldr	r1, [r1, #0]
 8001974:	4313      	orrs	r3, r2
 8001976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800199e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6911      	ldr	r1, [r2, #16]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	000186a0 	.word	0x000186a0
 8001a0c:	001e847f 	.word	0x001e847f
 8001a10:	003d08ff 	.word	0x003d08ff
 8001a14:	431bde83 	.word	0x431bde83
 8001a18:	10624dd3 	.word	0x10624dd3

08001a1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e128      	b.n	8001c80 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a90      	ldr	r2, [pc, #576]	; (8001c88 <HAL_I2S_Init+0x26c>)
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff f907 	bl	8000c5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a64:	f023 030f 	bic.w	r3, r3, #15
 8001a68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d060      	beq.n	8001b3c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a82:	2310      	movs	r3, #16
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e001      	b.n	8001a8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d802      	bhi.n	8001a9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f002 fb08 	bl	80040b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001aa0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aaa:	d125      	bne.n	8001af8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	3305      	adds	r3, #5
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e01f      	b.n	8001b16 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	461a      	mov	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	3305      	adds	r3, #5
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	e00e      	b.n	8001b16 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	3305      	adds	r3, #5
 8001b14:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <HAL_I2S_Init+0x270>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	08db      	lsrs	r3, r3, #3
 8001b20:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	085b      	lsrs	r3, r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	e003      	b.n	8001b44 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d902      	bls.n	8001b50 <HAL_I2S_Init+0x134>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	2bff      	cmp	r3, #255	; 0xff
 8001b4e:	d907      	bls.n	8001b60 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f043 0210 	orr.w	r2, r3, #16
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e08f      	b.n	8001c80 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	ea42 0103 	orr.w	r1, r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b7e:	f023 030f 	bic.w	r3, r3, #15
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6851      	ldr	r1, [r2, #4]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6892      	ldr	r2, [r2, #8]
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	68d2      	ldr	r2, [r2, #12]
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6992      	ldr	r2, [r2, #24]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d161      	bne.n	8001c70 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <HAL_I2S_Init+0x274>)
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_I2S_Init+0x278>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_I2S_Init+0x1a4>
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_I2S_Init+0x27c>)
 8001bbe:	e001      	b.n	8001bc4 <HAL_I2S_Init+0x1a8>
 8001bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	4932      	ldr	r1, [pc, #200]	; (8001c94 <HAL_I2S_Init+0x278>)
 8001bcc:	428a      	cmp	r2, r1
 8001bce:	d101      	bne.n	8001bd4 <HAL_I2S_Init+0x1b8>
 8001bd0:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <HAL_I2S_Init+0x27c>)
 8001bd2:	e001      	b.n	8001bd8 <HAL_I2S_Init+0x1bc>
 8001bd4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bdc:	f023 030f 	bic.w	r3, r3, #15
 8001be0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2b      	ldr	r2, [pc, #172]	; (8001c94 <HAL_I2S_Init+0x278>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_I2S_Init+0x1d4>
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_I2S_Init+0x27c>)
 8001bee:	e001      	b.n	8001bf4 <HAL_I2S_Init+0x1d8>
 8001bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <HAL_I2S_Init+0x278>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_I2S_Init+0x1ea>
 8001c02:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_I2S_Init+0x27c>)
 8001c04:	e001      	b.n	8001c0a <HAL_I2S_Init+0x1ee>
 8001c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c16:	d003      	beq.n	8001c20 <HAL_I2S_Init+0x204>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e001      	b.n	8001c2c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	b299      	uxth	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001c42:	4303      	orrs	r3, r0
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	430b      	orrs	r3, r1
 8001c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	897b      	ldrh	r3, [r7, #10]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c58:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_I2S_Init+0x278>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_I2S_Init+0x24c>
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_I2S_Init+0x27c>)
 8001c66:	e001      	b.n	8001c6c <HAL_I2S_Init+0x250>
 8001c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c6c:	897a      	ldrh	r2, [r7, #10]
 8001c6e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	08001d93 	.word	0x08001d93
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	08001ea9 	.word	0x08001ea9
 8001c94:	40003800 	.word	0x40003800
 8001c98:	40003400 	.word	0x40003400

08001c9c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	881a      	ldrh	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	1c9a      	adds	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10e      	bne.n	8001d2c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffb8 	bl	8001c9c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	b292      	uxth	r2, r2
 8001d48:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	1c9a      	adds	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10e      	bne.n	8001d8a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff93 	bl	8001cb0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d13a      	bne.n	8001e24 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d109      	bne.n	8001dcc <I2S_IRQHandler+0x3a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	d102      	bne.n	8001dcc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffb4 	bl	8001d34 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d126      	bne.n	8001e24 <I2S_IRQHandler+0x92>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d11f      	bne.n	8001e24 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001df2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff50 	bl	8001cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d136      	bne.n	8001e9e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d109      	bne.n	8001e4e <I2S_IRQHandler+0xbc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d102      	bne.n	8001e4e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff45 	bl	8001cd8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d122      	bne.n	8001e9e <I2S_IRQHandler+0x10c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d11b      	bne.n	8001e9e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e74:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0204 	orr.w	r2, r3, #4
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff13 	bl	8001cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4aa2      	ldr	r2, [pc, #648]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ec2:	4ba2      	ldr	r3, [pc, #648]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ec4:	e001      	b.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a9b      	ldr	r2, [pc, #620]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ee0:	4b9a      	ldr	r3, [pc, #616]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ee2:	e001      	b.n	8001ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d004      	beq.n	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8099 	bne.w	8002032 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f925 	bl	8002164 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f9c8 	bl	80022c4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d13a      	bne.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d035      	beq.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f52:	4b7e      	ldr	r3, [pc, #504]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f54:	e001      	b.n	8001f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4979      	ldr	r1, [pc, #484]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f62:	428b      	cmp	r3, r1
 8001f64:	d101      	bne.n	8001f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f66:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f68:	e001      	b.n	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f72:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f043 0202 	orr.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fe88 	bl	8001cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	f040 80be 	bne.w	800213c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80b8 	beq.w	800213c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fda:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a59      	ldr	r2, [pc, #356]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001fe6:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fe8:	e001      	b.n	8001fee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001fea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4954      	ldr	r1, [pc, #336]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ffa:	4b54      	ldr	r3, [pc, #336]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ffc:	e001      	b.n	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002006:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f043 0204 	orr.w	r2, r3, #4
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fe4a 	bl	8001cc4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002030:	e084      	b.n	800213c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b02      	cmp	r3, #2
 800203a:	d107      	bne.n	800204c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8be 	bl	80021c8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8fd 	bl	8002260 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b40      	cmp	r3, #64	; 0x40
 800206e:	d12f      	bne.n	80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d02a      	beq.n	80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002088:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2e      	ldr	r2, [pc, #184]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002096:	e001      	b.n	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4929      	ldr	r1, [pc, #164]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d101      	bne.n	80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80020aa:	e001      	b.n	80020b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80020ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f043 0202 	orr.w	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fdfa 	bl	8001cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d131      	bne.n	800213e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02c      	beq.n	800213e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80020f0:	e001      	b.n	80020f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80020f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4912      	ldr	r1, [pc, #72]	; (8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80020fe:	428b      	cmp	r3, r1
 8002100:	d101      	bne.n	8002106 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002104:	e001      	b.n	800210a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800210a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800210e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800211e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f043 0204 	orr.w	r2, r3, #4
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fdc5 	bl	8001cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800213a:	e000      	b.n	800213e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800213c:	bf00      	nop
}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40003800 	.word	0x40003800
 800214c:	40003400 	.word	0x40003400

08002150 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c99      	adds	r1, r3, #2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6251      	str	r1, [r2, #36]	; 0x24
 8002176:	881a      	ldrh	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ffc9 	bl	8002150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	1c99      	adds	r1, r3, #2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6251      	str	r1, [r2, #36]	; 0x24
 80021da:	8819      	ldrh	r1, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <I2SEx_TxISR_I2SExt+0x90>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <I2SEx_TxISR_I2SExt+0x22>
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <I2SEx_TxISR_I2SExt+0x94>)
 80021e8:	e001      	b.n	80021ee <I2SEx_TxISR_I2SExt+0x26>
 80021ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ee:	460a      	mov	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d121      	bne.n	800224e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <I2SEx_TxISR_I2SExt+0x90>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <I2SEx_TxISR_I2SExt+0x50>
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <I2SEx_TxISR_I2SExt+0x94>)
 8002216:	e001      	b.n	800221c <I2SEx_TxISR_I2SExt+0x54>
 8002218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	490d      	ldr	r1, [pc, #52]	; (8002258 <I2SEx_TxISR_I2SExt+0x90>)
 8002224:	428b      	cmp	r3, r1
 8002226:	d101      	bne.n	800222c <I2SEx_TxISR_I2SExt+0x64>
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <I2SEx_TxISR_I2SExt+0x94>)
 800222a:	e001      	b.n	8002230 <I2SEx_TxISR_I2SExt+0x68>
 800222c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002230:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002234:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff81 	bl	8002150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40003800 	.word	0x40003800
 800225c:	40003400 	.word	0x40003400

08002260 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68d8      	ldr	r0, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	1c99      	adds	r1, r3, #2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002278:	b282      	uxth	r2, r0
 800227a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d113      	bne.n	80022bc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022a2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff4a 	bl	8002150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a20      	ldr	r2, [pc, #128]	; (8002354 <I2SEx_RxISR_I2SExt+0x90>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <I2SEx_RxISR_I2SExt+0x16>
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <I2SEx_RxISR_I2SExt+0x94>)
 80022d8:	e001      	b.n	80022de <I2SEx_RxISR_I2SExt+0x1a>
 80022da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022de:	68d8      	ldr	r0, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	1c99      	adds	r1, r3, #2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022ea:	b282      	uxth	r2, r0
 80022ec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d121      	bne.n	800234a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <I2SEx_RxISR_I2SExt+0x90>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <I2SEx_RxISR_I2SExt+0x50>
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <I2SEx_RxISR_I2SExt+0x94>)
 8002312:	e001      	b.n	8002318 <I2SEx_RxISR_I2SExt+0x54>
 8002314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	490d      	ldr	r1, [pc, #52]	; (8002354 <I2SEx_RxISR_I2SExt+0x90>)
 8002320:	428b      	cmp	r3, r1
 8002322:	d101      	bne.n	8002328 <I2SEx_RxISR_I2SExt+0x64>
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <I2SEx_RxISR_I2SExt+0x94>)
 8002326:	e001      	b.n	800232c <I2SEx_RxISR_I2SExt+0x68>
 8002328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800232c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002330:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff03 	bl	8002150 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40003800 	.word	0x40003800
 8002358:	40003400 	.word	0x40003400

0800235c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	b08f      	sub	sp, #60	; 0x3c
 8002360:	af0a      	add	r7, sp, #40	; 0x28
 8002362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e10f      	b.n	800258e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f005 fb3b 	bl	8007a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fc36 	bl	8004c1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	687e      	ldr	r6, [r7, #4]
 80023ba:	466d      	mov	r5, sp
 80023bc:	f106 0410 	add.w	r4, r6, #16
 80023c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d0:	1d33      	adds	r3, r6, #4
 80023d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f002 fb0d 	bl	80049f4 <USB_CoreInit>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0d0      	b.n	800258e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fc24 	bl	8004c40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e04a      	b.n	8002494 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	333d      	adds	r3, #61	; 0x3d
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	333c      	adds	r3, #60	; 0x3c
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	b298      	uxth	r0, r3
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3342      	adds	r3, #66	; 0x42
 800243a:	4602      	mov	r2, r0
 800243c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	333f      	adds	r3, #63	; 0x3f
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3344      	adds	r3, #68	; 0x44
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3348      	adds	r3, #72	; 0x48
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3350      	adds	r3, #80	; 0x50
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	3301      	adds	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d3af      	bcc.n	80023fe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e044      	b.n	800252e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d3b5      	bcc.n	80024a4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	687e      	ldr	r6, [r7, #4]
 8002540:	466d      	mov	r5, sp
 8002542:	f106 0410 	add.w	r4, r6, #16
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002552:	e885 0003 	stmia.w	r5, {r0, r1}
 8002556:	1d33      	adds	r3, r6, #4
 8002558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f002 fb9a 	bl	8004c94 <USB_DevInit>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e00d      	b.n	800258e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fb8f 	bl	8005caa <USB_DevDisconnect>

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002596 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_PCD_Start+0x1c>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e020      	b.n	80025f4 <HAL_PCD_Start+0x5e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d109      	bne.n	80025d6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d005      	beq.n	80025d6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fb4d 	bl	8005c7a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fb09 	bl	8004bfc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08d      	sub	sp, #52	; 0x34
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fbf4 	bl	8005e00 <USB_GetMode>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 838e 	bne.w	8002d3c <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fb58 	bl	8005cda <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8384 	beq.w	8002d3a <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fb4f 	bl	8005cda <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d107      	bne.n	8002656 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f002 0202 	and.w	r2, r2, #2
 8002654:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fb3d 	bl	8005cda <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002666:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800266a:	d17b      	bne.n	8002764 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 fb43 	bl	8005d00 <USB_ReadDevAllOutEpInterrupt>
 800267a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800267c:	e06f      	b.n	800275e <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d064      	beq.n	8002752 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fb68 	bl	8005d68 <USB_ReadDevOutEPInterrupt>
 8002698:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b0:	461a      	mov	r2, r3
 80026b2:	2301      	movs	r3, #1
 80026b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fe0d 	bl	80032d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00c      	beq.n	80026e2 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 ff0c 	bl	80034e8 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	2308      	movs	r3, #8
 80026e0:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	2310      	movs	r3, #16
 80026fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d108      	bne.n	8002722 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800271a:	461a      	mov	r2, r3
 800271c:	2101      	movs	r1, #1
 800271e:	f003 fbb3 	bl	8005e88 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	461a      	mov	r2, r3
 8002730:	2320      	movs	r3, #32
 8002732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274a:	461a      	mov	r2, r3
 800274c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002750:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d18c      	bne.n	800267e <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fab6 	bl	8005cda <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002778:	f040 80c4 	bne.w	8002904 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fad7 	bl	8005d34 <USB_ReadDevAllInEpInterrupt>
 8002786:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800278c:	e0b6      	b.n	80028fc <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80ab 	beq.w	80028f0 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fafd 	bl	8005da4 <USB_ReadDevInEPInterrupt>
 80027aa:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d05b      	beq.n	800286e <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	2201      	movs	r2, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69f9      	ldr	r1, [r7, #28]
 80027d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027d6:	4013      	ands	r3, r2
 80027d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	461a      	mov	r2, r3
 80027e8:	2301      	movs	r3, #1
 80027ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d11b      	bne.n	800282c <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3348      	adds	r3, #72	; 0x48
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4403      	add	r3, r0
 8002814:	3344      	adds	r3, #68	; 0x44
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4419      	add	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	3348      	adds	r3, #72	; 0x48
 800282a:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f005 f975 	bl	8007b22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d116      	bne.n	800286e <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d113      	bne.n	800286e <HAL_PCD_IRQHandler+0x272>
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	3350      	adds	r3, #80	; 0x50
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002866:	461a      	mov	r2, r3
 8002868:	2101      	movs	r1, #1
 800286a:	f003 fb0d 	bl	8005e88 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002884:	461a      	mov	r2, r3
 8002886:	2308      	movs	r3, #8
 8002888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	461a      	mov	r2, r3
 80028a2:	2310      	movs	r3, #16
 80028a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028bc:	461a      	mov	r2, r3
 80028be:	2340      	movs	r3, #64	; 0x40
 80028c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d8:	461a      	mov	r2, r3
 80028da:	2302      	movs	r3, #2
 80028dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fc67 	bl	80031be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3301      	adds	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f47f af45 	bne.w	800278e <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f003 f9e6 	bl	8005cda <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002918:	d122      	bne.n	8002960 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002934:	2b01      	cmp	r3, #1
 8002936:	d108      	bne.n	800294a <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002940:	2100      	movs	r1, #0
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fe88 	bl	8003658 <HAL_PCDEx_LPM_Callback>
 8002948:	e002      	b.n	8002950 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f005 f956 	bl	8007bfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800295e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f003 f9b8 	bl	8005cda <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002974:	d112      	bne.n	800299c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d102      	bne.n	800298c <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f005 f912 	bl	8007bb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800299a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 f99a 	bl	8005cda <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	f040 80a7 	bne.w	8002b02 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2110      	movs	r1, #16
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fad2 	bl	8004f78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d8:	e036      	b.n	8002a48 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e6:	461a      	mov	r2, r3
 80029e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fe:	0151      	lsls	r1, r2, #5
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	440a      	add	r2, r1
 8002a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a32:	0151      	lsls	r1, r2, #5
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	440a      	add	r2, r1
 8002a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a40:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	3301      	adds	r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d3c3      	bcc.n	80029da <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7e:	f043 030b 	orr.w	r3, r3, #11
 8002a82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a94:	f043 030b 	orr.w	r3, r3, #11
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	e015      	b.n	8002ac8 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ab2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac2:	f043 030b 	orr.w	r3, r3, #11
 8002ac6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ada:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aec:	461a      	mov	r2, r3
 8002aee:	f003 f9cb 	bl	8005e88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 f8e7 	bl	8005cda <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b16:	d124      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 f97d 	bl	8005e1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f002 fa87 	bl	800503a <USB_GetDevSpeed>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681c      	ldr	r4, [r3, #0]
 8002b38:	f001 f996 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	4620      	mov	r0, r4
 8002b48:	f001 ffb6 	bl	8004ab8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f005 f810 	bl	8007b72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 f8b7 	bl	8005cda <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d161      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0210 	bic.w	r2, r2, #16
 8002b84:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	0c5b      	lsrs	r3, r3, #17
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d124      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d035      	beq.n	8002c2a <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6a38      	ldr	r0, [r7, #32]
 8002bd2:	f002 ff2f 	bl	8005a34 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be2:	441a      	add	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	e016      	b.n	8002c2a <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	0c5b      	lsrs	r3, r3, #17
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d110      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c0e:	2208      	movs	r2, #8
 8002c10:	4619      	mov	r1, r3
 8002c12:	6a38      	ldr	r0, [r7, #32]
 8002c14:	f002 ff0e 	bl	8005a34 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c24:	441a      	add	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0210 	orr.w	r2, r2, #16
 8002c38:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 f84b 	bl	8005cda <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d10a      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f004 ff81 	bl	8007b56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f002 0208 	and.w	r2, r2, #8
 8002c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 f836 	bl	8005cda <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c78:	d10f      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f004 ffd9 	bl	8007c3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 f81b 	bl	8005cda <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cae:	d10f      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f004 ffac 	bl	8007c18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 f800 	bl	8005cda <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d10a      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f004 ffba 	bl	8007c60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 ffea 	bl	8005cda <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d115      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f004 ffaa 	bl	8007c7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	e000      	b.n	8002d3c <HAL_PCD_IRQHandler+0x740>
      return;
 8002d3a:	bf00      	nop
    }
  }
}
 8002d3c:	3734      	adds	r7, #52	; 0x34
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}

08002d42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_PCD_SetAddress+0x1a>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e013      	b.n	8002d84 <HAL_PCD_SetAddress+0x42>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 ff5a 	bl	8005c2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	70fb      	strb	r3, [r7, #3]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	803b      	strh	r3, [r7, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da0f      	bge.n	8002dd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	f003 020f 	and.w	r2, r3, #15
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3338      	adds	r3, #56	; 0x38
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	705a      	strb	r2, [r3, #1]
 8002dd0:	e00f      	b.n	8002df2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dfe:	883a      	ldrh	r2, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	78ba      	ldrb	r2, [r7, #2]
 8002e08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e1c:	78bb      	ldrb	r3, [r7, #2]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_Open+0xaa>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00e      	b.n	8002e54 <HAL_PCD_EP_Open+0xc8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 f91d 	bl	8005084 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da0f      	bge.n	8002e90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3338      	adds	r3, #56	; 0x38
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	705a      	strb	r2, [r3, #1]
 8002e8e:	e00f      	b.n	8002eb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_PCD_EP_Close+0x6e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e00e      	b.n	8002ee8 <HAL_PCD_EP_Close+0x8c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68f9      	ldr	r1, [r7, #12]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 f95b 	bl	8005194 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	460b      	mov	r3, r1
 8002efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	7afb      	ldrb	r3, [r7, #11]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4c:	7afb      	ldrb	r3, [r7, #11]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	f002 fbde 	bl	8005724 <USB_EP0StartXfer>
 8002f68:	e008      	b.n	8002f7c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	f002 f990 	bl	800529c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fa8:	681b      	ldr	r3, [r3, #0]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	3338      	adds	r3, #56	; 0x38
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3304      	adds	r3, #4
 8002fdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6979      	ldr	r1, [r7, #20]
 8003028:	f002 fb7c 	bl	8005724 <USB_EP0StartXfer>
 800302c:	e008      	b.n	8003040 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	f002 f92e 	bl	800529c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d901      	bls.n	8003068 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e050      	b.n	800310a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da0f      	bge.n	8003090 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	3338      	adds	r3, #56	; 0x38
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	3304      	adds	r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	705a      	strb	r2, [r3, #1]
 800308e:	e00d      	b.n	80030ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_PCD_EP_SetStall+0x82>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e01e      	b.n	800310a <HAL_PCD_EP_SetStall+0xc0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68f9      	ldr	r1, [r7, #12]
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fcd3 	bl	8005a86 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	b2d9      	uxtb	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030fa:	461a      	mov	r2, r3
 80030fc:	f002 fec4 	bl	8005e88 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 020f 	and.w	r2, r3, #15
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	d901      	bls.n	8003130 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e042      	b.n	80031b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	da0f      	bge.n	8003158 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	3338      	adds	r3, #56	; 0x38
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	705a      	strb	r2, [r3, #1]
 8003156:	e00f      	b.n	8003178 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_PCD_EP_ClrStall+0x86>
 8003194:	2302      	movs	r3, #2
 8003196:	e00e      	b.n	80031b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fcdb 	bl	8005b62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b08a      	sub	sp, #40	; 0x28
 80031c2:	af02      	add	r7, sp, #8
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	3338      	adds	r3, #56	; 0x38
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d901      	bls.n	80031f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06c      	b.n	80032d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	429a      	cmp	r2, r3
 800320a:	d902      	bls.n	8003212 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3303      	adds	r3, #3
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321a:	e02b      	b.n	8003274 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	429a      	cmp	r2, r3
 8003230:	d902      	bls.n	8003238 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3303      	adds	r3, #3
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68d9      	ldr	r1, [r3, #12]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003250:	b2db      	uxtb	r3, r3
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	6978      	ldr	r0, [r7, #20]
 8003258:	f002 fbb7 	bl	80059ca <USB_WritePacket>

    ep->xfer_buff  += len;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	441a      	add	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	441a      	add	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	b29b      	uxth	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	429a      	cmp	r2, r3
 8003288:	d809      	bhi.n	800329e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003292:	429a      	cmp	r2, r3
 8003294:	d203      	bcs.n	800329e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1be      	bne.n	800321c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d811      	bhi.n	80032ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	6939      	ldr	r1, [r7, #16]
 80032c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ca:	4013      	ands	r3, r2
 80032cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	333c      	adds	r3, #60	; 0x3c
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	f040 80b3 	bne.w	8003476 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d028      	beq.n	800336c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a70      	ldr	r2, [pc, #448]	; (80034e0 <PCD_EP_OutXfrComplete_int+0x208>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d90e      	bls.n	8003340 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f004 fbc1 	bl	8007ac8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003350:	461a      	mov	r2, r3
 8003352:	2101      	movs	r1, #1
 8003354:	f002 fd98 	bl	8005e88 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	461a      	mov	r2, r3
 8003366:	2308      	movs	r3, #8
 8003368:	6093      	str	r3, [r2, #8]
 800336a:	e0b3      	b.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003382:	461a      	mov	r2, r3
 8003384:	2320      	movs	r3, #32
 8003386:	6093      	str	r3, [r2, #8]
 8003388:	e0a4      	b.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 809f 	bne.w	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <PCD_EP_OutXfrComplete_int+0x208>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d90f      	bls.n	80033be <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	6093      	str	r3, [r2, #8]
 80033bc:	e08a      	b.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033d0:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	0159      	lsls	r1, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	440b      	add	r3, r1
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033e4:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4403      	add	r3, r0
 80033f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033f8:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4403      	add	r3, r0
 800341c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4419      	add	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003436:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f004 fb54 	bl	8007aec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d144      	bne.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d138      	bne.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800346c:	461a      	mov	r2, r3
 800346e:	2101      	movs	r1, #1
 8003470:	f002 fd0a 	bl	8005e88 <USB_EP0_OutStart>
 8003474:	e02e      	b.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <PCD_EP_OutXfrComplete_int+0x20c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d124      	bne.n	80034c8 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	e01a      	b.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b4:	461a      	mov	r2, r3
 80034b6:	2320      	movs	r3, #32
 80034b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f004 fb13 	bl	8007aec <HAL_PCD_DataOutStageCallback>
 80034c6:	e005      	b.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f004 fb0c 	bl	8007aec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	4f54300a 	.word	0x4f54300a
 80034e4:	4f54310a 	.word	0x4f54310a

080034e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	333c      	adds	r3, #60	; 0x3c
 8003500:	3304      	adds	r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d113      	bne.n	8003546 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d922      	bls.n	800356c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01d      	beq.n	800356c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	6093      	str	r3, [r2, #8]
 8003544:	e012      	b.n	800356c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <PCD_EP_OutSetupPacket_int+0xbc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10e      	bne.n	800356c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003564:	461a      	mov	r2, r3
 8003566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f004 faab 	bl	8007ac8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d90c      	bls.n	8003594 <PCD_EP_OutSetupPacket_int+0xac>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d108      	bne.n	8003594 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800358c:	461a      	mov	r2, r3
 800358e:	2101      	movs	r1, #1
 8003590:	f002 fc7a 	bl	8005e88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	4f54300a 	.word	0x4f54300a
 80035a4:	4f54310a 	.word	0x4f54310a

080035a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
 80035b4:	4613      	mov	r3, r2
 80035b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035c6:	883b      	ldrh	r3, [r7, #0]
 80035c8:	0419      	lsls	r1, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
 80035d4:	e028      	b.n	8003628 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e00d      	b.n	8003606 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	3340      	adds	r3, #64	; 0x40
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	3301      	adds	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	3b01      	subs	r3, #1
 800360c:	429a      	cmp	r2, r3
 800360e:	d3ec      	bcc.n	80035ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003610:	883b      	ldrh	r3, [r7, #0]
 8003612:	0418      	lsls	r0, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	3b01      	subs	r3, #1
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	4302      	orrs	r2, r0
 8003620:	3340      	adds	r3, #64	; 0x40
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e22d      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d075      	beq.n	800377a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368e:	4ba3      	ldr	r3, [pc, #652]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d00c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4ba0      	ldr	r3, [pc, #640]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d112      	bne.n	80036cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b9d      	ldr	r3, [pc, #628]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b2:	d10b      	bne.n	80036cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	4b99      	ldr	r3, [pc, #612]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05b      	beq.n	8003778 <HAL_RCC_OscConfig+0x108>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d157      	bne.n	8003778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e208      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d106      	bne.n	80036e4 <HAL_RCC_OscConfig+0x74>
 80036d6:	4b91      	ldr	r3, [pc, #580]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a90      	ldr	r2, [pc, #576]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x98>
 80036ee:	4b8b      	ldr	r3, [pc, #556]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a8a      	ldr	r2, [pc, #552]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a87      	ldr	r2, [pc, #540]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 8003708:	4b84      	ldr	r3, [pc, #528]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a83      	ldr	r2, [pc, #524]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b81      	ldr	r3, [pc, #516]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a80      	ldr	r2, [pc, #512]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fd fd74 	bl	8001214 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7fd fd70 	bl	8001214 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e1cd      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b76      	ldr	r3, [pc, #472]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xc0>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fd fd60 	bl	8001214 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fd fd5c 	bl	8001214 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1b9      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	4b6c      	ldr	r3, [pc, #432]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0xe8>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d063      	beq.n	800384e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003786:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b62      	ldr	r3, [pc, #392]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379a:	2b08      	cmp	r3, #8
 800379c:	d11c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b5f      	ldr	r3, [pc, #380]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d116      	bne.n	80037d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	4b5c      	ldr	r3, [pc, #368]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x152>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e18d      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4952      	ldr	r1, [pc, #328]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	e03a      	b.n	800384e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e0:	4b4f      	ldr	r3, [pc, #316]	; (8003920 <HAL_RCC_OscConfig+0x2b0>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fd fd15 	bl	8001214 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fd fd11 	bl	8001214 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e16e      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	4b46      	ldr	r3, [pc, #280]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4940      	ldr	r1, [pc, #256]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
 8003820:	e015      	b.n	800384e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_RCC_OscConfig+0x2b0>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fcf4 	bl	8001214 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003830:	f7fd fcf0 	bl	8001214 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e14d      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d030      	beq.n	80038bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003862:	4b30      	ldr	r3, [pc, #192]	; (8003924 <HAL_RCC_OscConfig+0x2b4>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fd fcd4 	bl	8001214 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003870:	f7fd fcd0 	bl	8001214 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e12d      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x200>
 800388e:	e015      	b.n	80038bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_OscConfig+0x2b4>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003896:	f7fd fcbd 	bl	8001214 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389e:	f7fd fcb9 	bl	8001214 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e116      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a0 	beq.w	8003a0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x2b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d121      	bne.n	800394a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_RCC_OscConfig+0x2b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_RCC_OscConfig+0x2b8>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fd fc7f 	bl	8001214 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e011      	b.n	800393e <HAL_RCC_OscConfig+0x2ce>
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	42470000 	.word	0x42470000
 8003924:	42470e80 	.word	0x42470e80
 8003928:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392c:	f7fd fc72 	bl	8001214 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e0cf      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_OscConfig+0x478>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d106      	bne.n	8003960 <HAL_RCC_OscConfig+0x2f0>
 8003952:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a65      	ldr	r2, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
 800395e:	e01c      	b.n	800399a <HAL_RCC_OscConfig+0x32a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d10c      	bne.n	8003982 <HAL_RCC_OscConfig+0x312>
 8003968:	4b60      	ldr	r3, [pc, #384]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	4a5f      	ldr	r2, [pc, #380]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6713      	str	r3, [r2, #112]	; 0x70
 8003974:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	e00b      	b.n	800399a <HAL_RCC_OscConfig+0x32a>
 8003982:	4b5a      	ldr	r3, [pc, #360]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a59      	ldr	r2, [pc, #356]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	4b57      	ldr	r3, [pc, #348]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a56      	ldr	r2, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d015      	beq.n	80039ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fd fc37 	bl	8001214 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fd fc33 	bl	8001214 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e08e      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ee      	beq.n	80039aa <HAL_RCC_OscConfig+0x33a>
 80039cc:	e014      	b.n	80039f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fc21 	bl	8001214 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fd fc1d 	bl	8001214 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e078      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ee      	bne.n	80039d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a3a      	ldr	r2, [pc, #232]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d064      	beq.n	8003adc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d05c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d141      	bne.n	8003aaa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <HAL_RCC_OscConfig+0x480>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fbf2 	bl	8001214 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd fbee 	bl	8001214 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e04b      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	491d      	ldr	r1, [pc, #116]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7c:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <HAL_RCC_OscConfig+0x480>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fd fbc7 	bl	8001214 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fd fbc3 	bl	8001214 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e020      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x41a>
 8003aa8:	e018      	b.n	8003adc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_RCC_OscConfig+0x480>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fbb0 	bl	8001214 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd fbac 	bl	8001214 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e009      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_RCC_OscConfig+0x47c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x448>
 8003ad6:	e001      	b.n	8003adc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470060 	.word	0x42470060

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0ca      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d90c      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b64      	ldr	r3, [pc, #400]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b6      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b58      	ldr	r3, [pc, #352]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a57      	ldr	r2, [pc, #348]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b52      	ldr	r3, [pc, #328]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a51      	ldr	r2, [pc, #324]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494c      	ldr	r1, [pc, #304]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d044      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b46      	ldr	r3, [pc, #280]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d119      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07d      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b3e      	ldr	r3, [pc, #248]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e06d      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e065      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd2:	4b36      	ldr	r3, [pc, #216]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4933      	ldr	r1, [pc, #204]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fd fb16 	bl	8001214 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fd fb12 	bl	8001214 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e04d      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 020c 	and.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1eb      	bne.n	8003bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d20c      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e030      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4915      	ldr	r1, [pc, #84]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490d      	ldr	r1, [pc, #52]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f81d 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7fd fa78 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023c00 	.word	0x40023c00
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	08008300 	.word	0x08008300
 8003cb4:	20000000 	.word	0x20000000

08003cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cce:	4b63      	ldr	r3, [pc, #396]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d007      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x32>
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x38>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 80b4 	bne.w	8003e4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4b5e      	ldr	r3, [pc, #376]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ce6:	60bb      	str	r3, [r7, #8]
       break;
 8003ce8:	e0b3      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cea:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cec:	60bb      	str	r3, [r7, #8]
      break;
 8003cee:	e0b0      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf0:	4b5a      	ldr	r3, [pc, #360]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfa:	4b58      	ldr	r3, [pc, #352]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d04a      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b55      	ldr	r3, [pc, #340]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	f04f 0400 	mov.w	r4, #0
 8003d10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	ea03 0501 	and.w	r5, r3, r1
 8003d1c:	ea04 0602 	and.w	r6, r4, r2
 8003d20:	4629      	mov	r1, r5
 8003d22:	4632      	mov	r2, r6
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	f04f 0400 	mov.w	r4, #0
 8003d2c:	0154      	lsls	r4, r2, #5
 8003d2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d32:	014b      	lsls	r3, r1, #5
 8003d34:	4619      	mov	r1, r3
 8003d36:	4622      	mov	r2, r4
 8003d38:	1b49      	subs	r1, r1, r5
 8003d3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	f04f 0400 	mov.w	r4, #0
 8003d46:	0194      	lsls	r4, r2, #6
 8003d48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d4c:	018b      	lsls	r3, r1, #6
 8003d4e:	1a5b      	subs	r3, r3, r1
 8003d50:	eb64 0402 	sbc.w	r4, r4, r2
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	00e2      	lsls	r2, r4, #3
 8003d5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d62:	00d9      	lsls	r1, r3, #3
 8003d64:	460b      	mov	r3, r1
 8003d66:	4614      	mov	r4, r2
 8003d68:	195b      	adds	r3, r3, r5
 8003d6a:	eb44 0406 	adc.w	r4, r4, r6
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	0262      	lsls	r2, r4, #9
 8003d78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d7c:	0259      	lsls	r1, r3, #9
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4614      	mov	r4, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	4621      	mov	r1, r4
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	f7fc fa22 	bl	80001d8 <__aeabi_uldivmod>
 8003d94:	4603      	mov	r3, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e049      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9c:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	f04f 0400 	mov.w	r4, #0
 8003da6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	ea03 0501 	and.w	r5, r3, r1
 8003db2:	ea04 0602 	and.w	r6, r4, r2
 8003db6:	4629      	mov	r1, r5
 8003db8:	4632      	mov	r2, r6
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	0154      	lsls	r4, r2, #5
 8003dc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dc8:	014b      	lsls	r3, r1, #5
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4622      	mov	r2, r4
 8003dce:	1b49      	subs	r1, r1, r5
 8003dd0:	eb62 0206 	sbc.w	r2, r2, r6
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	f04f 0400 	mov.w	r4, #0
 8003ddc:	0194      	lsls	r4, r2, #6
 8003dde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003de2:	018b      	lsls	r3, r1, #6
 8003de4:	1a5b      	subs	r3, r3, r1
 8003de6:	eb64 0402 	sbc.w	r4, r4, r2
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	00e2      	lsls	r2, r4, #3
 8003df4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003df8:	00d9      	lsls	r1, r3, #3
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	195b      	adds	r3, r3, r5
 8003e00:	eb44 0406 	adc.w	r4, r4, r6
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	02a2      	lsls	r2, r4, #10
 8003e0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e12:	0299      	lsls	r1, r3, #10
 8003e14:	460b      	mov	r3, r1
 8003e16:	4614      	mov	r4, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f04f 0400 	mov.w	r4, #0
 8003e22:	461a      	mov	r2, r3
 8003e24:	4623      	mov	r3, r4
 8003e26:	f7fc f9d7 	bl	80001d8 <__aeabi_uldivmod>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	60bb      	str	r3, [r7, #8]
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e4e:	60bb      	str	r3, [r7, #8]
      break;
 8003e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e52:	68bb      	ldr	r3, [r7, #8]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	007a1200 	.word	0x007a1200

08003e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000000 	.word	0x20000000

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e84:	f7ff fff0 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e88:	4601      	mov	r1, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0a9b      	lsrs	r3, r3, #10
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	08008310 	.word	0x08008310

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eac:	f7ff ffdc 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0b5b      	lsrs	r3, r3, #13
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	08008310 	.word	0x08008310

08003ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d038      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef8:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003efe:	f7fd f989 	bl	8001214 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f06:	f7fd f985 	bl	8001214 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0bd      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f18:	4b61      	ldr	r3, [pc, #388]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	019b      	lsls	r3, r3, #6
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	071b      	lsls	r3, r3, #28
 8003f36:	495a      	ldr	r1, [pc, #360]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f3e:	4b57      	ldr	r3, [pc, #348]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f44:	f7fd f966 	bl	8001214 <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f4c:	f7fd f962 	bl	8001214 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e09a      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f5e:	4b50      	ldr	r3, [pc, #320]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8083 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	4b48      	ldr	r3, [pc, #288]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	4a47      	ldr	r2, [pc, #284]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6413      	str	r3, [r2, #64]	; 0x40
 8003f88:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a42      	ldr	r2, [pc, #264]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fa0:	f7fd f938 	bl	8001214 <HAL_GetTick>
 8003fa4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fa8:	f7fd f934 	bl	8001214 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e06c      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fba:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d02f      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d028      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fee:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff4:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ffa:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d114      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd f902 	bl	8001214 <HAL_GetTick>
 8004010:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004012:	e00a      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fd f8fe 	bl	8001214 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e034      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ee      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004042:	d10d      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004044:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	4911      	ldr	r1, [pc, #68]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
 800405e:	e005      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004066:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800406a:	6093      	str	r3, [r2, #8]
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	4909      	ldr	r1, [pc, #36]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	4313      	orrs	r3, r2
 800407c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7d1a      	ldrb	r2, [r3, #20]
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004090:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	42470068 	.word	0x42470068
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	42470e40 	.word	0x42470e40
 80040ac:	424711e0 	.word	0x424711e0

080040b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d13f      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d131      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80040e2:	4b1f      	ldr	r3, [pc, #124]	; (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040e4:	617b      	str	r3, [r7, #20]
          break;
 80040e6:	e031      	b.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f4:	d109      	bne.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e008      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800411e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004136:	0f1b      	lsrs	r3, r3, #28
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004142:	617b      	str	r3, [r7, #20]
          break;
 8004144:	e002      	b.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
          break;
 800414a:	bf00      	nop
        }
      }
      break;
 800414c:	bf00      	nop
    }
  }
  return frequency;
 800414e:	697b      	ldr	r3, [r7, #20]
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40023800 	.word	0x40023800
 8004160:	00bb8000 	.word	0x00bb8000
 8004164:	007a1200 	.word	0x007a1200
 8004168:	00f42400 	.word	0x00f42400

0800416c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e056      	b.n	800422c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fc fe2d 	bl	8000df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	ea42 0103 	orr.w	r1, r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	f003 0104 	and.w	r1, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e03f      	b.n	80042c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc fe14 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	; 0x24
 8004264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f9b1 	bl	80045e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800428c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800429c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b088      	sub	sp, #32
 80042d2:	af02      	add	r7, sp, #8
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	f040 8083 	bne.w	80043f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_UART_Transmit+0x2e>
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e07b      	b.n	80043f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_UART_Transmit+0x40>
 800430a:	2302      	movs	r3, #2
 800430c:	e074      	b.n	80043f8 <HAL_UART_Transmit+0x12a>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	; 0x21
 8004320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004324:	f7fc ff76 	bl	8001214 <HAL_GetTick>
 8004328:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004336:	e042      	b.n	80043be <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	d122      	bne.n	8004396 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2200      	movs	r2, #0
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f8f6 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e046      	b.n	80043f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3302      	adds	r3, #2
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	e017      	b.n	80043be <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	e013      	b.n	80043be <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f8d3 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e023      	b.n	80043f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	60ba      	str	r2, [r7, #8]
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1b7      	bne.n	8004338 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	2140      	movs	r1, #64	; 0x40
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f8ba 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e00a      	b.n	80043f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	f040 8090 	bne.w	8004542 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_Receive+0x2e>
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e088      	b.n	8004544 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Receive+0x40>
 800443c:	2302      	movs	r3, #2
 800443e:	e081      	b.n	8004544 <HAL_UART_Receive+0x144>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2222      	movs	r2, #34	; 0x22
 8004452:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004456:	f7fc fedd 	bl	8001214 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004468:	e05c      	b.n	8004524 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d12b      	bne.n	80044da <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	2120      	movs	r1, #32
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f85d 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e053      	b.n	8004544 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10c      	bne.n	80044c2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3302      	adds	r3, #2
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	e030      	b.n	8004524 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	e024      	b.n	8004524 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2120      	movs	r1, #32
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f831 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e027      	b.n	8004544 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d108      	bne.n	800450e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6859      	ldr	r1, [r3, #4]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	60ba      	str	r2, [r7, #8]
 8004508:	b2ca      	uxtb	r2, r1
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e00a      	b.n	8004524 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1c59      	adds	r1, r3, #1
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d19d      	bne.n	800446a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	e02c      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d028      	beq.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <UART_WaitOnFlagUntilTimeout+0x30>
 800456c:	f7fc fe52 	bl	8001214 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d21d      	bcs.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800458a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e00f      	b.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4013      	ands	r3, r2
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d0c3      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004620:	f023 030c 	bic.w	r3, r3, #12
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	430b      	orrs	r3, r1
 800462c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699a      	ldr	r2, [r3, #24]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464c:	f040 80e4 	bne.w	8004818 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4aab      	ldr	r2, [pc, #684]	; (8004904 <UART_SetConfig+0x324>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <UART_SetConfig+0x84>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4aaa      	ldr	r2, [pc, #680]	; (8004908 <UART_SetConfig+0x328>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d16c      	bne.n	800473e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004664:	f7ff fc20 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8004668:	4602      	mov	r2, r0
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009a      	lsls	r2, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	4aa3      	ldr	r2, [pc, #652]	; (800490c <UART_SetConfig+0x32c>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	011c      	lsls	r4, r3, #4
 8004688:	f7ff fc0e 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 800468c:	4602      	mov	r2, r0
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009a      	lsls	r2, r3, #2
 8004696:	441a      	add	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	fbb2 f5f3 	udiv	r5, r2, r3
 80046a2:	f7ff fc01 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	4a93      	ldr	r2, [pc, #588]	; (800490c <UART_SetConfig+0x32c>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2264      	movs	r2, #100	; 0x64
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	1aeb      	subs	r3, r5, r3
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	3332      	adds	r3, #50	; 0x32
 80046d0:	4a8e      	ldr	r2, [pc, #568]	; (800490c <UART_SetConfig+0x32c>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046de:	441c      	add	r4, r3
 80046e0:	f7ff fbe2 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	009a      	lsls	r2, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80046fa:	f7ff fbd5 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80046fe:	4602      	mov	r2, r0
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009a      	lsls	r2, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	4a7d      	ldr	r2, [pc, #500]	; (800490c <UART_SetConfig+0x32c>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2264      	movs	r2, #100	; 0x64
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	1aeb      	subs	r3, r5, r3
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	3332      	adds	r3, #50	; 0x32
 8004728:	4a78      	ldr	r2, [pc, #480]	; (800490c <UART_SetConfig+0x32c>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	f003 0207 	and.w	r2, r3, #7
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4422      	add	r2, r4
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	e154      	b.n	80049e8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800473e:	f7ff fb9f 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004742:	4602      	mov	r2, r0
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	4a6c      	ldr	r2, [pc, #432]	; (800490c <UART_SetConfig+0x32c>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	011c      	lsls	r4, r3, #4
 8004762:	f7ff fb8d 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004766:	4602      	mov	r2, r0
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	009a      	lsls	r2, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fbb2 f5f3 	udiv	r5, r2, r3
 800477c:	f7ff fb80 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004780:	4602      	mov	r2, r0
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009a      	lsls	r2, r3, #2
 800478a:	441a      	add	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	4a5d      	ldr	r2, [pc, #372]	; (800490c <UART_SetConfig+0x32c>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	2264      	movs	r2, #100	; 0x64
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	1aeb      	subs	r3, r5, r3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	3332      	adds	r3, #50	; 0x32
 80047aa:	4a58      	ldr	r2, [pc, #352]	; (800490c <UART_SetConfig+0x32c>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047b8:	441c      	add	r4, r3
 80047ba:	f7ff fb61 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009a      	lsls	r2, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80047d4:	f7ff fb54 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009a      	lsls	r2, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	4a47      	ldr	r2, [pc, #284]	; (800490c <UART_SetConfig+0x32c>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2264      	movs	r2, #100	; 0x64
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	1aeb      	subs	r3, r5, r3
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	3332      	adds	r3, #50	; 0x32
 8004802:	4a42      	ldr	r2, [pc, #264]	; (800490c <UART_SetConfig+0x32c>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 0207 	and.w	r2, r3, #7
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4422      	add	r2, r4
 8004814:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004816:	e0e7      	b.n	80049e8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a39      	ldr	r2, [pc, #228]	; (8004904 <UART_SetConfig+0x324>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <UART_SetConfig+0x24c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a38      	ldr	r2, [pc, #224]	; (8004908 <UART_SetConfig+0x328>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d171      	bne.n	8004910 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800482c:	f7ff fb3c 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8004830:	4602      	mov	r2, r0
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009a      	lsls	r2, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	4a31      	ldr	r2, [pc, #196]	; (800490c <UART_SetConfig+0x32c>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	011c      	lsls	r4, r3, #4
 8004850:	f7ff fb2a 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8004854:	4602      	mov	r2, r0
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009a      	lsls	r2, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	fbb2 f5f3 	udiv	r5, r2, r3
 800486a:	f7ff fb1d 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 800486e:	4602      	mov	r2, r0
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	4a21      	ldr	r2, [pc, #132]	; (800490c <UART_SetConfig+0x32c>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2264      	movs	r2, #100	; 0x64
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	1aeb      	subs	r3, r5, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	; 0x32
 8004898:	4a1c      	ldr	r2, [pc, #112]	; (800490c <UART_SetConfig+0x32c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a4:	441c      	add	r4, r3
 80048a6:	f7ff faff 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80048c0:	f7ff faf2 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009a      	lsls	r2, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <UART_SetConfig+0x32c>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	2264      	movs	r2, #100	; 0x64
 80048e4:	fb02 f303 	mul.w	r3, r2, r3
 80048e8:	1aeb      	subs	r3, r5, r3
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	3332      	adds	r3, #50	; 0x32
 80048ee:	4a07      	ldr	r2, [pc, #28]	; (800490c <UART_SetConfig+0x32c>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f003 020f 	and.w	r2, r3, #15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4422      	add	r2, r4
 8004900:	609a      	str	r2, [r3, #8]
 8004902:	e071      	b.n	80049e8 <UART_SetConfig+0x408>
 8004904:	40011000 	.word	0x40011000
 8004908:	40011400 	.word	0x40011400
 800490c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004910:	f7ff fab6 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004914:	4602      	mov	r2, r0
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009a      	lsls	r2, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	4a31      	ldr	r2, [pc, #196]	; (80049f0 <UART_SetConfig+0x410>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	011c      	lsls	r4, r3, #4
 8004934:	f7ff faa4 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004938:	4602      	mov	r2, r0
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009a      	lsls	r2, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	fbb2 f5f3 	udiv	r5, r2, r3
 800494e:	f7ff fa97 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004952:	4602      	mov	r2, r0
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <UART_SetConfig+0x410>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	1aeb      	subs	r3, r5, r3
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	3332      	adds	r3, #50	; 0x32
 800497c:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <UART_SetConfig+0x410>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004988:	441c      	add	r4, r3
 800498a:	f7ff fa79 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 800498e:	4602      	mov	r2, r0
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009a      	lsls	r2, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049a4:	f7ff fa6c 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <UART_SetConfig+0x410>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2264      	movs	r2, #100	; 0x64
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	1aeb      	subs	r3, r5, r3
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <UART_SetConfig+0x410>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4422      	add	r2, r4
 80049e4:	609a      	str	r2, [r3, #8]
}
 80049e6:	e7ff      	b.n	80049e8 <UART_SetConfig+0x408>
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bdb0      	pop	{r4, r5, r7, pc}
 80049f0:	51eb851f 	.word	0x51eb851f

080049f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049f4:	b084      	sub	sp, #16
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	f107 001c 	add.w	r0, r7, #28
 8004a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d122      	bne.n	8004a52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d105      	bne.n	8004a46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f001 fa7c 	bl	8005f44 <USB_CoreReset>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
 8004a50:	e01a      	b.n	8004a88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f001 fa70 	bl	8005f44 <USB_CoreReset>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7a:	e005      	b.n	8004a88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10b      	bne.n	8004aa6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f043 0206 	orr.w	r2, r3, #6
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab2:	b004      	add	sp, #16
 8004ab4:	4770      	bx	lr
	...

08004ab8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d165      	bne.n	8004b98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a41      	ldr	r2, [pc, #260]	; (8004bd4 <USB_SetTurnaroundTime+0x11c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d906      	bls.n	8004ae2 <USB_SetTurnaroundTime+0x2a>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4a40      	ldr	r2, [pc, #256]	; (8004bd8 <USB_SetTurnaroundTime+0x120>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d802      	bhi.n	8004ae2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004adc:	230f      	movs	r3, #15
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e062      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a3c      	ldr	r2, [pc, #240]	; (8004bd8 <USB_SetTurnaroundTime+0x120>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d906      	bls.n	8004af8 <USB_SetTurnaroundTime+0x40>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <USB_SetTurnaroundTime+0x124>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d802      	bhi.n	8004af8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004af2:	230e      	movs	r3, #14
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e057      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a38      	ldr	r2, [pc, #224]	; (8004bdc <USB_SetTurnaroundTime+0x124>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d906      	bls.n	8004b0e <USB_SetTurnaroundTime+0x56>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4a37      	ldr	r2, [pc, #220]	; (8004be0 <USB_SetTurnaroundTime+0x128>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d802      	bhi.n	8004b0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b08:	230d      	movs	r3, #13
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e04c      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a33      	ldr	r2, [pc, #204]	; (8004be0 <USB_SetTurnaroundTime+0x128>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d906      	bls.n	8004b24 <USB_SetTurnaroundTime+0x6c>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4a32      	ldr	r2, [pc, #200]	; (8004be4 <USB_SetTurnaroundTime+0x12c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d802      	bhi.n	8004b24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b1e:	230c      	movs	r3, #12
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e041      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <USB_SetTurnaroundTime+0x12c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d906      	bls.n	8004b3a <USB_SetTurnaroundTime+0x82>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <USB_SetTurnaroundTime+0x130>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d802      	bhi.n	8004b3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b34:	230b      	movs	r3, #11
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e036      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	; (8004be8 <USB_SetTurnaroundTime+0x130>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d906      	bls.n	8004b50 <USB_SetTurnaroundTime+0x98>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <USB_SetTurnaroundTime+0x134>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d802      	bhi.n	8004b50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b4a:	230a      	movs	r3, #10
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e02b      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4a26      	ldr	r2, [pc, #152]	; (8004bec <USB_SetTurnaroundTime+0x134>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d906      	bls.n	8004b66 <USB_SetTurnaroundTime+0xae>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4a25      	ldr	r2, [pc, #148]	; (8004bf0 <USB_SetTurnaroundTime+0x138>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d802      	bhi.n	8004b66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b60:	2309      	movs	r3, #9
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	e020      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <USB_SetTurnaroundTime+0x138>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d906      	bls.n	8004b7c <USB_SetTurnaroundTime+0xc4>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <USB_SetTurnaroundTime+0x13c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d802      	bhi.n	8004b7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b76:	2308      	movs	r3, #8
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e015      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <USB_SetTurnaroundTime+0x13c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d906      	bls.n	8004b92 <USB_SetTurnaroundTime+0xda>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <USB_SetTurnaroundTime+0x140>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d802      	bhi.n	8004b92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b8c:	2307      	movs	r3, #7
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e00a      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b92:	2306      	movs	r3, #6
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e007      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b9e:	2309      	movs	r3, #9
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e001      	b.n	8004ba8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ba4:	2309      	movs	r3, #9
 8004ba6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	00d8acbf 	.word	0x00d8acbf
 8004bd8:	00e4e1bf 	.word	0x00e4e1bf
 8004bdc:	00f423ff 	.word	0x00f423ff
 8004be0:	0106737f 	.word	0x0106737f
 8004be4:	011a499f 	.word	0x011a499f
 8004be8:	01312cff 	.word	0x01312cff
 8004bec:	014ca43f 	.word	0x014ca43f
 8004bf0:	016e35ff 	.word	0x016e35ff
 8004bf4:	01a6ab1f 	.word	0x01a6ab1f
 8004bf8:	01e847ff 	.word	0x01e847ff

08004bfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f043 0201 	orr.w	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d106      	bne.n	8004c6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	e00b      	b.n	8004c84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	e001      	b.n	8004c84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e003      	b.n	8004c8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c84:	2032      	movs	r0, #50	; 0x32
 8004c86:	f7fc fad1 	bl	800122c <HAL_Delay>

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c94:	b084      	sub	sp, #16
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e009      	b.n	8004cc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	3340      	adds	r3, #64	; 0x40
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b0e      	cmp	r3, #14
 8004ccc:	d9f2      	bls.n	8004cb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d112      	bne.n	8004cfa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cf8:	e00b      	b.n	8004d12 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d24:	4619      	mov	r1, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	680b      	ldr	r3, [r1, #0]
 8004d30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10c      	bne.n	8004d52 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f961 	bl	8005008 <USB_SetDevSpeed>
 8004d46:	e008      	b.n	8004d5a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d48:	2101      	movs	r1, #1
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f95c 	bl	8005008 <USB_SetDevSpeed>
 8004d50:	e003      	b.n	8004d5a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d52:	2103      	movs	r1, #3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f957 	bl	8005008 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d5a:	2110      	movs	r1, #16
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f90b 	bl	8004f78 <USB_FlushTxFifo>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f929 	bl	8004fc4 <USB_FlushRxFifo>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	461a      	mov	r2, r3
 8004d84:	2300      	movs	r3, #0
 8004d86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	e043      	b.n	8004e2e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dbc:	d118      	bne.n	8004df0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	e013      	b.n	8004e02 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e008      	b.n	8004e02 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2300      	movs	r3, #0
 8004e00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2300      	movs	r3, #0
 8004e12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	461a      	mov	r2, r3
 8004e22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d3b7      	bcc.n	8004da6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	e043      	b.n	8004ec4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e52:	d118      	bne.n	8004e86 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	461a      	mov	r2, r3
 8004e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e013      	b.n	8004e98 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	e008      	b.n	8004e98 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	461a      	mov	r2, r3
 8004e94:	2300      	movs	r3, #0
 8004e96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d3b7      	bcc.n	8004e3c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ede:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d111      	bne.n	8004f0a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <USB_DevInit+0x2dc>)
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f04:	f043 0303 	orr.w	r3, r3, #3
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f043 0210 	orr.w	r2, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <USB_DevInit+0x2e0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f043 0208 	orr.w	r2, r3, #8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f6a:	b004      	add	sp, #16
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	00800100 	.word	0x00800100
 8004f74:	803c3800 	.word	0x803c3800

08004f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <USB_FlushTxFifo+0x48>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d0f0      	beq.n	8004f92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	00030d40 	.word	0x00030d40

08004fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <USB_FlushRxFifo+0x40>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e006      	b.n	8004ff6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d0f0      	beq.n	8004fd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	00030d40 	.word	0x00030d40

08005008 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800503a:	b480      	push	{r7}
 800503c:	b087      	sub	sp, #28
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0306 	and.w	r3, r3, #6
 8005052:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
 800505e:	e00a      	b.n	8005076 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d002      	beq.n	800506c <USB_GetDevSpeed+0x32>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d102      	bne.n	8005072 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800506c:	2302      	movs	r3, #2
 800506e:	75fb      	strb	r3, [r7, #23]
 8005070:	e001      	b.n	8005076 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005072:	230f      	movs	r3, #15
 8005074:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d13a      	bne.n	8005116 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	68f9      	ldr	r1, [r7, #12]
 80050ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050be:	4313      	orrs	r3, r2
 80050c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d155      	bne.n	8005184 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	78db      	ldrb	r3, [r3, #3]
 80050f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	059b      	lsls	r3, r3, #22
 80050fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050fc:	4313      	orrs	r3, r2
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	e036      	b.n	8005184 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f303 	lsl.w	r3, r1, r3
 800512c:	041b      	lsls	r3, r3, #16
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005134:	4313      	orrs	r3, r2
 8005136:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11a      	bne.n	8005184 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	78db      	ldrb	r3, [r3, #3]
 8005168:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800516a:	430b      	orrs	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d135      	bne.n	800521c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d0:	4013      	ands	r3, r2
 80051d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	2101      	movs	r1, #1
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051f4:	4013      	ands	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	0159      	lsls	r1, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	440b      	add	r3, r1
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	4619      	mov	r1, r3
 8005214:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <USB_DeactivateEndpoint+0x100>)
 8005216:	4013      	ands	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
 800521a:	e034      	b.n	8005286 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	041b      	lsls	r3, r3, #16
 8005234:	43db      	mvns	r3, r3
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800523c:	4013      	ands	r3, r2
 800523e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2101      	movs	r1, #1
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	041b      	lsls	r3, r3, #16
 8005258:	43db      	mvns	r3, r3
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005260:	4013      	ands	r3, r2
 8005262:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0159      	lsls	r1, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	440b      	add	r3, r1
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	4619      	mov	r1, r3
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <USB_DeactivateEndpoint+0x104>)
 8005282:	4013      	ands	r3, r2
 8005284:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	ec337800 	.word	0xec337800
 8005298:	eff37800 	.word	0xeff37800

0800529c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	f040 815c 	bne.w	8005576 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d132      	bne.n	800532c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005324:	0cdb      	lsrs	r3, r3, #19
 8005326:	04db      	lsls	r3, r3, #19
 8005328:	6113      	str	r3, [r2, #16]
 800532a:	e074      	b.n	8005416 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005346:	0cdb      	lsrs	r3, r3, #19
 8005348:	04db      	lsls	r3, r3, #19
 800534a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005366:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800536a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800536e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6959      	ldr	r1, [r3, #20]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	440b      	add	r3, r1
 8005388:	1e59      	subs	r1, r3, #1
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005392:	04d9      	lsls	r1, r3, #19
 8005394:	4b9d      	ldr	r3, [pc, #628]	; (800560c <USB_EPStartXfer+0x370>)
 8005396:	400b      	ands	r3, r1
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	0148      	lsls	r0, r1, #5
 800539c:	69f9      	ldr	r1, [r7, #28]
 800539e:	4401      	add	r1, r0
 80053a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053a4:	4313      	orrs	r3, r2
 80053a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	0148      	lsls	r0, r1, #5
 80053c2:	69f9      	ldr	r1, [r7, #28]
 80053c4:	4401      	add	r1, r0
 80053c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053ca:	4313      	orrs	r3, r2
 80053cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	78db      	ldrb	r3, [r3, #3]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d11f      	bne.n	8005416 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80053f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005414:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d14b      	bne.n	80054b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	461a      	mov	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	78db      	ldrb	r3, [r3, #3]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d128      	bne.n	8005492 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d110      	bne.n	8005472 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	e00f      	b.n	8005492 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005490:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e12f      	b.n	8005714 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	78db      	ldrb	r3, [r3, #3]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d015      	beq.n	8005508 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8117 	beq.w	8005714 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	2101      	movs	r1, #1
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	69f9      	ldr	r1, [r7, #28]
 80054fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005502:	4313      	orrs	r3, r2
 8005504:	634b      	str	r3, [r1, #52]	; 0x34
 8005506:	e105      	b.n	8005714 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d110      	bne.n	800553a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e00f      	b.n	800555a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005558:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	68d9      	ldr	r1, [r3, #12]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	b298      	uxth	r0, r3
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4603      	mov	r3, r0
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fa2b 	bl	80059ca <USB_WritePacket>
 8005574:	e0ce      	b.n	8005714 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005590:	0cdb      	lsrs	r3, r3, #19
 8005592:	04db      	lsls	r3, r3, #19
 8005594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d126      	bne.n	8005610 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d8:	69b9      	ldr	r1, [r7, #24]
 80055da:	0148      	lsls	r0, r1, #5
 80055dc:	69f9      	ldr	r1, [r7, #28]
 80055de:	4401      	add	r1, r0
 80055e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055e4:	4313      	orrs	r3, r2
 80055e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005606:	6113      	str	r3, [r2, #16]
 8005608:	e036      	b.n	8005678 <USB_EPStartXfer+0x3dc>
 800560a:	bf00      	nop
 800560c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4413      	add	r3, r2
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	8afb      	ldrh	r3, [r7, #22]
 8005636:	04d9      	lsls	r1, r3, #19
 8005638:	4b39      	ldr	r3, [pc, #228]	; (8005720 <USB_EPStartXfer+0x484>)
 800563a:	400b      	ands	r3, r1
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	0148      	lsls	r0, r1, #5
 8005640:	69f9      	ldr	r1, [r7, #28]
 8005642:	4401      	add	r1, r0
 8005644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005648:	4313      	orrs	r3, r2
 800564a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	8af9      	ldrh	r1, [r7, #22]
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	0148      	lsls	r0, r1, #5
 800566c:	69f9      	ldr	r1, [r7, #28]
 800566e:	4401      	add	r1, r0
 8005670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005674:	4313      	orrs	r3, r2
 8005676:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10d      	bne.n	800569a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	68d9      	ldr	r1, [r3, #12]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	460a      	mov	r2, r1
 8005698:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	78db      	ldrb	r3, [r3, #3]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d128      	bne.n	80056f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d110      	bne.n	80056d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00f      	b.n	80056f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	1ff80000 	.word	0x1ff80000

08005724 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	f040 80cd 	bne.w	80058e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d132      	bne.n	80057b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800576c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ac:	0cdb      	lsrs	r3, r3, #19
 80057ae:	04db      	lsls	r3, r3, #19
 80057b0:	6113      	str	r3, [r2, #16]
 80057b2:	e04e      	b.n	8005852 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ce:	0cdb      	lsrs	r3, r3, #19
 80057d0:	04db      	lsls	r3, r3, #19
 80057d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d903      	bls.n	800580c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800582a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005842:	6939      	ldr	r1, [r7, #16]
 8005844:	0148      	lsls	r0, r1, #5
 8005846:	6979      	ldr	r1, [r7, #20]
 8005848:	4401      	add	r1, r0
 800584a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800584e:	4313      	orrs	r3, r2
 8005850:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d11e      	bne.n	8005896 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e092      	b.n	80059bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d07e      	beq.n	80059bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f303 	lsl.w	r3, r1, r3
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058da:	4313      	orrs	r3, r2
 80058dc:	634b      	str	r3, [r1, #52]	; 0x34
 80058de:	e06d      	b.n	80059bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fa:	0cdb      	lsrs	r3, r3, #19
 80058fc:	04db      	lsls	r3, r3, #19
 80058fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800591e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005922:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005952:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800596a:	6939      	ldr	r1, [r7, #16]
 800596c:	0148      	lsls	r0, r1, #5
 800596e:	6979      	ldr	r1, [r7, #20]
 8005970:	4401      	add	r1, r0
 8005972:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005976:	4313      	orrs	r3, r2
 8005978:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10d      	bne.n	800599c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	68d9      	ldr	r1, [r3, #12]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	460a      	mov	r2, r1
 800599a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b089      	sub	sp, #36	; 0x24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	4611      	mov	r1, r2
 80059d6:	461a      	mov	r2, r3
 80059d8:	460b      	mov	r3, r1
 80059da:	71fb      	strb	r3, [r7, #7]
 80059dc:	4613      	mov	r3, r2
 80059de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80059e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11a      	bne.n	8005a26 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059f0:	88bb      	ldrh	r3, [r7, #4]
 80059f2:	3303      	adds	r3, #3
 80059f4:	089b      	lsrs	r3, r3, #2
 80059f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	e00f      	b.n	8005a1e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	031a      	lsls	r2, r3, #12
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3304      	adds	r3, #4
 8005a16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d3eb      	bcc.n	80059fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3724      	adds	r7, #36	; 0x24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b089      	sub	sp, #36	; 0x24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	3303      	adds	r3, #3
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e00b      	b.n	8005a70 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3304      	adds	r3, #4
 8005a68:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3ef      	bcc.n	8005a58 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a78:	69fb      	ldr	r3, [r7, #28]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3724      	adds	r7, #36	; 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d12c      	bne.n	8005afc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db12      	blt.n	8005ada <USB_EPSetStall+0x54>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00f      	beq.n	8005ada <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e02b      	b.n	8005b54 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	db12      	blt.n	8005b34 <USB_EPSetStall+0xae>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00f      	beq.n	8005b34 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b32:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d128      	bne.n	8005bd0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	78db      	ldrb	r3, [r3, #3]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d003      	beq.n	8005bae <USB_EPClearStall+0x4c>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d138      	bne.n	8005c20 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e027      	b.n	8005c20 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	78db      	ldrb	r3, [r3, #3]
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d003      	beq.n	8005c00 <USB_EPClearStall+0x9e>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	78db      	ldrb	r3, [r3, #3]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d10f      	bne.n	8005c20 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c50:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c94:	f023 0302 	bic.w	r3, r3, #2
 8005c98:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005c9a:	2003      	movs	r0, #3
 8005c9c:	f7fb fac6 	bl	800122c <HAL_Delay>

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005cca:	2003      	movs	r0, #3
 8005ccc:	f7fb faae 	bl	800122c <HAL_Delay>

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4013      	ands	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	0c1b      	lsrs	r3, r3, #16
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	4013      	ands	r3, r2
 8005d56:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	b29b      	uxth	r3, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d96:	68bb      	ldr	r3, [r7, #8]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd4:	01db      	lsls	r3, r3, #7
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4013      	ands	r3, r2
 8005df0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005df2:	68bb      	ldr	r3, [r7, #8]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0306 	and.w	r3, r3, #6
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d109      	bne.n	8005e64 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f043 0303 	orr.w	r3, r3, #3
 8005e62:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	460b      	mov	r3, r1
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	333c      	adds	r3, #60	; 0x3c
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4a26      	ldr	r2, [pc, #152]	; (8005f40 <USB_EP0_OutStart+0xb8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d90a      	bls.n	8005ec2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ebc:	d101      	bne.n	8005ec2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e037      	b.n	8005f32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef0:	f043 0318 	orr.w	r3, r3, #24
 8005ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10f      	bne.n	8005f30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	4f54300a 	.word	0x4f54300a

08005f44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <USB_CoreReset+0x64>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d901      	bls.n	8005f62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e01b      	b.n	8005f9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	daf2      	bge.n	8005f50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f043 0201 	orr.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <USB_CoreReset+0x64>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d901      	bls.n	8005f8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e006      	b.n	8005f9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d0f0      	beq.n	8005f7a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	00030d40 	.word	0x00030d40

08005fac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7c1b      	ldrb	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d115      	bne.n	8005ff0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc8:	2202      	movs	r2, #2
 8005fca:	2181      	movs	r1, #129	; 0x81
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 feca 	bl	8007d66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fdc:	2202      	movs	r2, #2
 8005fde:	2101      	movs	r1, #1
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fec0 	bl	8007d66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005fee:	e012      	b.n	8006016 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	2181      	movs	r1, #129	; 0x81
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 feb5 	bl	8007d66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	2202      	movs	r2, #2
 8006006:	2101      	movs	r1, #1
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 feac 	bl	8007d66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006016:	2308      	movs	r3, #8
 8006018:	2203      	movs	r2, #3
 800601a:	2182      	movs	r1, #130	; 0x82
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fea2 	bl	8007d66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006028:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800602c:	f002 f818 	bl	8008060 <malloc>
 8006030:	4603      	mov	r3, r0
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006040:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006044:	2100      	movs	r1, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f002 f81a 	bl	8008080 <memset>
  if(pdev->pClassData == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
 800605a:	e026      	b.n	80060aa <USBD_CDC_Init+0xfe>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006062:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2200      	movs	r2, #0
 800607a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	7c1b      	ldrb	r3, [r3, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <USBD_CDC_Init+0xee>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800608c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006090:	2101      	movs	r1, #1
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 ff58 	bl	8007f48 <USBD_LL_PrepareReceive>
 8006098:	e007      	b.n	80060aa <USBD_CDC_Init+0xfe>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	2101      	movs	r1, #1
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 ff4f 	bl	8007f48 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060c4:	2181      	movs	r1, #129	; 0x81
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fe73 	bl	8007db2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060d2:	2101      	movs	r1, #1
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fe6c 	bl	8007db2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060e2:	2182      	movs	r1, #130	; 0x82
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fe64 	bl	8007db2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800610a:	4618      	mov	r0, r3
 800610c:	f001 ffb0 	bl	8008070 <free>
    pdev->pClassData = NULL;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006132:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006148:	2b00      	cmp	r3, #0
 800614a:	d039      	beq.n	80061c0 <USBD_CDC_Setup+0x9e>
 800614c:	2b20      	cmp	r3, #32
 800614e:	d17c      	bne.n	800624a <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	88db      	ldrh	r3, [r3, #6]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d029      	beq.n	80061ac <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b25b      	sxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	da11      	bge.n	8006186 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800616e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	88d2      	ldrh	r2, [r2, #6]
 8006174:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006176:	6939      	ldr	r1, [r7, #16]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	88db      	ldrh	r3, [r3, #6]
 800617c:	461a      	mov	r2, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f9ca 	bl	8007518 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006184:	e068      	b.n	8006258 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	785a      	ldrb	r2, [r3, #1]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	88db      	ldrh	r3, [r3, #6]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800619c:	6939      	ldr	r1, [r7, #16]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	88db      	ldrh	r3, [r3, #6]
 80061a2:	461a      	mov	r2, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f9e5 	bl	8007574 <USBD_CtlPrepareRx>
    break;
 80061aa:	e055      	b.n	8006258 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	7850      	ldrb	r0, [r2, #1]
 80061b8:	2200      	movs	r2, #0
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	4798      	blx	r3
    break;
 80061be:	e04b      	b.n	8006258 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b0a      	cmp	r3, #10
 80061c6:	d017      	beq.n	80061f8 <USBD_CDC_Setup+0xd6>
 80061c8:	2b0b      	cmp	r3, #11
 80061ca:	d029      	beq.n	8006220 <USBD_CDC_Setup+0xfe>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d133      	bne.n	8006238 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d107      	bne.n	80061ea <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80061da:	f107 030c 	add.w	r3, r7, #12
 80061de:	2202      	movs	r2, #2
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 f998 	bl	8007518 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80061e8:	e02e      	b.n	8006248 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 f928 	bl	8007442 <USBD_CtlError>
			  ret = USBD_FAIL;
 80061f2:	2302      	movs	r3, #2
 80061f4:	75fb      	strb	r3, [r7, #23]
      break;
 80061f6:	e027      	b.n	8006248 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d107      	bne.n	8006212 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006202:	f107 030f 	add.w	r3, r7, #15
 8006206:	2201      	movs	r2, #1
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f984 	bl	8007518 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006210:	e01a      	b.n	8006248 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f914 	bl	8007442 <USBD_CtlError>
			  ret = USBD_FAIL;
 800621a:	2302      	movs	r3, #2
 800621c:	75fb      	strb	r3, [r7, #23]
      break;
 800621e:	e013      	b.n	8006248 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006226:	2b03      	cmp	r3, #3
 8006228:	d00d      	beq.n	8006246 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 f908 	bl	8007442 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006232:	2302      	movs	r3, #2
 8006234:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006236:	e006      	b.n	8006246 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 f901 	bl	8007442 <USBD_CtlError>
      ret = USBD_FAIL;
 8006240:	2302      	movs	r3, #2
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	e000      	b.n	8006248 <USBD_CDC_Setup+0x126>
      break;
 8006246:	bf00      	nop
    }
    break;
 8006248:	e006      	b.n	8006258 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 f8f8 	bl	8007442 <USBD_CtlError>
    ret = USBD_FAIL;
 8006252:	2302      	movs	r3, #2
 8006254:	75fb      	strb	r3, [r7, #23]
    break;
 8006256:	bf00      	nop
  }

  return ret;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006274:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800627c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006284:	2b00      	cmp	r3, #0
 8006286:	d03a      	beq.n	80062fe <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	331c      	adds	r3, #28
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d029      	beq.n	80062f2 <USBD_CDC_DataIn+0x90>
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	331c      	adds	r3, #28
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	78f9      	ldrb	r1, [r7, #3]
 80062b2:	68b8      	ldr	r0, [r7, #8]
 80062b4:	460b      	mov	r3, r1
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	1a5b      	subs	r3, r3, r1
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4403      	add	r3, r0
 80062be:	3344      	adds	r3, #68	; 0x44
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80062c6:	fb03 f301 	mul.w	r3, r3, r1
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d110      	bne.n	80062f2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	331c      	adds	r3, #28
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80062e4:	78f9      	ldrb	r1, [r7, #3]
 80062e6:	2300      	movs	r3, #0
 80062e8:	2200      	movs	r2, #0
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fe09 	bl	8007f02 <USBD_LL_Transmit>
 80062f0:	e003      	b.n	80062fa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e000      	b.n	8006300 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80062fe:	2302      	movs	r3, #2
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800631a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 fe34 	bl	8007f8e <USBD_LL_GetRxDataSize>
 8006326:	4602      	mov	r2, r0
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800634c:	4611      	mov	r1, r2
 800634e:	4798      	blx	r3

    return USBD_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	e000      	b.n	8006356 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006354:	2302      	movs	r3, #2
  }
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800636c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006374:	2b00      	cmp	r3, #0
 8006376:	d015      	beq.n	80063a4 <USBD_CDC_EP0_RxReady+0x46>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800637e:	2bff      	cmp	r3, #255	; 0xff
 8006380:	d010      	beq.n	80063a4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006390:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006398:	b292      	uxth	r2, r2
 800639a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	22ff      	movs	r2, #255	; 0xff
 80063a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2243      	movs	r2, #67	; 0x43
 80063bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80063be:	4b03      	ldr	r3, [pc, #12]	; (80063cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20000094 	.word	0x20000094

080063d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2243      	movs	r2, #67	; 0x43
 80063dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80063de:	4b03      	ldr	r3, [pc, #12]	; (80063ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000050 	.word	0x20000050

080063f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2243      	movs	r2, #67	; 0x43
 80063fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80063fe:	4b03      	ldr	r3, [pc, #12]	; (800640c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	200000d8 	.word	0x200000d8

08006410 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	220a      	movs	r2, #10
 800641c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800641e:	4b03      	ldr	r3, [pc, #12]	; (800642c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	2000000c 	.word	0x2000000c

08006430 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800643a:	2302      	movs	r3, #2
 800643c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800645e:	b480      	push	{r7}
 8006460:	b087      	sub	sp, #28
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	4613      	mov	r3, r2
 800646a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006472:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064c8:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01c      	beq.n	800650e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d115      	bne.n	800650a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2181      	movs	r1, #129	; 0x81
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fcfe 	bl	8007f02 <USBD_LL_Transmit>

      return USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e002      	b.n	8006510 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800650e:	2302      	movs	r3, #2
  }
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006526:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800652e:	2b00      	cmp	r3, #0
 8006530:	d017      	beq.n	8006562 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7c1b      	ldrb	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006544:	2101      	movs	r1, #1
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fcfe 	bl	8007f48 <USBD_LL_PrepareReceive>
 800654c:	e007      	b.n	800655e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006554:	2340      	movs	r3, #64	; 0x40
 8006556:	2101      	movs	r1, #1
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fcf5 	bl	8007f48 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006580:	2302      	movs	r3, #2
 8006582:	e01a      	b.n	80065ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	79fa      	ldrb	r2, [r7, #7]
 80065b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f001 fb70 	bl	8007c98 <USBD_LL_Init>

  return USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d006      	beq.n	80065e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
 80065e2:	e001      	b.n	80065e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80065e4:	2302      	movs	r3, #2
 80065e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fb96 	bl	8007d30 <USBD_LL_Start>

  return USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006630:	2302      	movs	r3, #2
 8006632:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	4611      	mov	r1, r2
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	4611      	mov	r1, r2
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
  return USBD_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fe94 	bl	80073c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d00c      	beq.n	80066de <USBD_LL_SetupStage+0x56>
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d302      	bcc.n	80066ce <USBD_LL_SetupStage+0x46>
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d010      	beq.n	80066ee <USBD_LL_SetupStage+0x66>
 80066cc:	e017      	b.n	80066fe <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa04 	bl	8006ae4 <USBD_StdDevReq>
    break;
 80066dc:	e01a      	b.n	8006714 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa66 	bl	8006bb8 <USBD_StdItfReq>
    break;
 80066ec:	e012      	b.n	8006714 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 faa4 	bl	8006c44 <USBD_StdEPReq>
    break;
 80066fc:	e00a      	b.n	8006714 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006704:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 fb6f 	bl	8007df0 <USBD_LL_StallEP>
    break;
 8006712:	bf00      	nop
  }

  return USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	460b      	mov	r3, r1
 8006728:	607a      	str	r2, [r7, #4]
 800672a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d14b      	bne.n	80067ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006738:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006740:	2b03      	cmp	r3, #3
 8006742:	d134      	bne.n	80067ae <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	429a      	cmp	r2, r3
 800674e:	d919      	bls.n	8006784 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	1ad2      	subs	r2, r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006766:	429a      	cmp	r2, r3
 8006768:	d203      	bcs.n	8006772 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800676e:	b29b      	uxth	r3, r3
 8006770:	e002      	b.n	8006778 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 ff17 	bl	80075b0 <USBD_CtlContinueRx>
 8006782:	e038      	b.n	80067f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006796:	2b03      	cmp	r3, #3
 8006798:	d105      	bne.n	80067a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 ff14 	bl	80075d4 <USBD_CtlSendStatus>
 80067ac:	e023      	b.n	80067f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80067b4:	2b05      	cmp	r3, #5
 80067b6:	d11e      	bne.n	80067f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80067c0:	2100      	movs	r1, #0
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 fb14 	bl	8007df0 <USBD_LL_StallEP>
 80067c8:	e015      	b.n	80067f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00d      	beq.n	80067f2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d108      	bne.n	80067f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	7afa      	ldrb	r2, [r7, #11]
 80067ea:	4611      	mov	r1, r2
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	4798      	blx	r3
 80067f0:	e001      	b.n	80067f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067f2:	2302      	movs	r3, #2
 80067f4:	e000      	b.n	80067f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	460b      	mov	r3, r1
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d17f      	bne.n	8006914 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3314      	adds	r3, #20
 8006818:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006820:	2b02      	cmp	r3, #2
 8006822:	d15c      	bne.n	80068de <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	429a      	cmp	r2, r3
 800682e:	d915      	bls.n	800685c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	b29b      	uxth	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fe81 	bl	8007550 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800684e:	2300      	movs	r3, #0
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f001 fb77 	bl	8007f48 <USBD_LL_PrepareReceive>
 800685a:	e04e      	b.n	80068fa <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	6912      	ldr	r2, [r2, #16]
 8006864:	fbb3 f1f2 	udiv	r1, r3, r2
 8006868:	fb02 f201 	mul.w	r2, r2, r1
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d11c      	bne.n	80068ac <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800687a:	429a      	cmp	r2, r3
 800687c:	d316      	bcc.n	80068ac <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006888:	429a      	cmp	r2, r3
 800688a:	d20f      	bcs.n	80068ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800688c:	2200      	movs	r2, #0
 800688e:	2100      	movs	r1, #0
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fe5d 	bl	8007550 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800689e:	2300      	movs	r3, #0
 80068a0:	2200      	movs	r2, #0
 80068a2:	2100      	movs	r1, #0
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f001 fb4f 	bl	8007f48 <USBD_LL_PrepareReceive>
 80068aa:	e026      	b.n	80068fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d105      	bne.n	80068ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f001 fa8d 	bl	8007df0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fe8f 	bl	80075fa <USBD_CtlReceiveStatus>
 80068dc:	e00d      	b.n	80068fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d004      	beq.n	80068f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80068f2:	2180      	movs	r1, #128	; 0x80
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f001 fa7b 	bl	8007df0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006900:	2b01      	cmp	r3, #1
 8006902:	d11d      	bne.n	8006940 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fe82 	bl	800660e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006912:	e015      	b.n	8006940 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00d      	beq.n	800693c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006926:	2b03      	cmp	r3, #3
 8006928:	d108      	bne.n	800693c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	7afa      	ldrb	r2, [r7, #11]
 8006934:	4611      	mov	r1, r2
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	4798      	blx	r3
 800693a:	e001      	b.n	8006940 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800693c:	2302      	movs	r3, #2
 800693e:	e000      	b.n	8006942 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006952:	2340      	movs	r3, #64	; 0x40
 8006954:	2200      	movs	r2, #0
 8006956:	2100      	movs	r1, #0
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fa04 	bl	8007d66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2240      	movs	r2, #64	; 0x40
 800696a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800696e:	2340      	movs	r3, #64	; 0x40
 8006970:	2200      	movs	r2, #0
 8006972:	2180      	movs	r1, #128	; 0x80
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f9f6 	bl	8007d66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2240      	movs	r2, #64	; 0x40
 8006984:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6852      	ldr	r2, [r2, #4]
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	4611      	mov	r1, r2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
  }

  return USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	78fa      	ldrb	r2, [r7, #3]
 80069dc:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2204      	movs	r2, #4
 8006a04:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d10b      	bne.n	8006a62 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6852      	ldr	r2, [r2, #4]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d004      	beq.n	8006b08 <USBD_StdDevReq+0x24>
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d002      	beq.n	8006b08 <USBD_StdDevReq+0x24>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <USBD_StdDevReq+0x34>
 8006b06:	e04c      	b.n	8006ba2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
    break;
 8006b16:	e049      	b.n	8006bac <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b09      	cmp	r3, #9
 8006b1e:	d83a      	bhi.n	8006b96 <USBD_StdDevReq+0xb2>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <USBD_StdDevReq+0x44>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b8d 	.word	0x08006b8d
 8006b30:	08006b97 	.word	0x08006b97
 8006b34:	08006b83 	.word	0x08006b83
 8006b38:	08006b97 	.word	0x08006b97
 8006b3c:	08006b5b 	.word	0x08006b5b
 8006b40:	08006b51 	.word	0x08006b51
 8006b44:	08006b97 	.word	0x08006b97
 8006b48:	08006b6f 	.word	0x08006b6f
 8006b4c:	08006b65 	.word	0x08006b65
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f9d2 	bl	8006efc <USBD_GetDescriptor>
      break;
 8006b58:	e022      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fac7 	bl	80070f0 <USBD_SetAddress>
      break;
 8006b62:	e01d      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fb04 	bl	8007174 <USBD_SetConfig>
      break;
 8006b6c:	e018      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb8d 	bl	8007290 <USBD_GetConfig>
      break;
 8006b76:	e013      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fbbc 	bl	80072f8 <USBD_GetStatus>
      break;
 8006b80:	e00e      	b.n	8006ba0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fbea 	bl	800735e <USBD_SetFeature>
      break;
 8006b8a:	e009      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fbf9 	bl	8007386 <USBD_ClrFeature>
      break;
 8006b94:	e004      	b.n	8006ba0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fc52 	bl	8007442 <USBD_CtlError>
      break;
 8006b9e:	bf00      	nop
    }
    break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc4c 	bl	8007442 <USBD_CtlError>
    break;
 8006baa:	bf00      	nop
  }

  return ret;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop

08006bb8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d003      	beq.n	8006bda <USBD_StdItfReq+0x22>
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d001      	beq.n	8006bda <USBD_StdItfReq+0x22>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d12a      	bne.n	8006c30 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006be0:	3b01      	subs	r3, #1
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d81d      	bhi.n	8006c22 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	889b      	ldrh	r3, [r3, #4]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d813      	bhi.n	8006c18 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	88db      	ldrh	r3, [r3, #6]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d110      	bne.n	8006c2c <USBD_StdItfReq+0x74>
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fcdf 	bl	80075d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006c16:	e009      	b.n	8006c2c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fc11 	bl	8007442 <USBD_CtlError>
      break;
 8006c20:	e004      	b.n	8006c2c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fc0c 	bl	8007442 <USBD_CtlError>
      break;
 8006c2a:	e000      	b.n	8006c2e <USBD_StdItfReq+0x76>
      break;
 8006c2c:	bf00      	nop
    }
    break;
 8006c2e:	e004      	b.n	8006c3a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fc05 	bl	8007442 <USBD_CtlError>
    break;
 8006c38:	bf00      	nop
  }

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	889b      	ldrh	r3, [r3, #4]
 8006c56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d004      	beq.n	8006c6e <USBD_StdEPReq+0x2a>
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d002      	beq.n	8006c6e <USBD_StdEPReq+0x2a>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d008      	beq.n	8006c7e <USBD_StdEPReq+0x3a>
 8006c6c:	e13b      	b.n	8006ee6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
    break;
 8006c7c:	e138      	b.n	8006ef0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d10a      	bne.n	8006ca0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	e128      	b.n	8006ef2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d03e      	beq.n	8006d26 <USBD_StdEPReq+0xe2>
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d002      	beq.n	8006cb2 <USBD_StdEPReq+0x6e>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d070      	beq.n	8006d92 <USBD_StdEPReq+0x14e>
 8006cb0:	e113      	b.n	8006eda <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d002      	beq.n	8006cc2 <USBD_StdEPReq+0x7e>
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d015      	beq.n	8006cec <USBD_StdEPReq+0xa8>
 8006cc0:	e02b      	b.n	8006d1a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <USBD_StdEPReq+0x9e>
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b80      	cmp	r3, #128	; 0x80
 8006ccc:	d009      	beq.n	8006ce2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 f88c 	bl	8007df0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006cd8:	2180      	movs	r1, #128	; 0x80
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 f888 	bl	8007df0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006ce0:	e020      	b.n	8006d24 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fbac 	bl	8007442 <USBD_CtlError>
        break;
 8006cea:	e01b      	b.n	8006d24 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	885b      	ldrh	r3, [r3, #2]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10e      	bne.n	8006d12 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <USBD_StdEPReq+0xce>
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d008      	beq.n	8006d12 <USBD_StdEPReq+0xce>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	88db      	ldrh	r3, [r3, #6]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f86f 	bl	8007df0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fc5e 	bl	80075d4 <USBD_CtlSendStatus>

        break;
 8006d18:	e004      	b.n	8006d24 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb90 	bl	8007442 <USBD_CtlError>
        break;
 8006d22:	bf00      	nop
      }
      break;
 8006d24:	e0de      	b.n	8006ee4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d002      	beq.n	8006d36 <USBD_StdEPReq+0xf2>
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d015      	beq.n	8006d60 <USBD_StdEPReq+0x11c>
 8006d34:	e026      	b.n	8006d84 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00c      	beq.n	8006d56 <USBD_StdEPReq+0x112>
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d009      	beq.n	8006d56 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f852 	bl	8007df0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 f84e 	bl	8007df0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d54:	e01c      	b.n	8006d90 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb72 	bl	8007442 <USBD_CtlError>
        break;
 8006d5e:	e017      	b.n	8006d90 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	885b      	ldrh	r3, [r3, #2]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d112      	bne.n	8006d8e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d004      	beq.n	8006d7c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f859 	bl	8007e2e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc29 	bl	80075d4 <USBD_CtlSendStatus>
        }
        break;
 8006d82:	e004      	b.n	8006d8e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb5b 	bl	8007442 <USBD_CtlError>
        break;
 8006d8c:	e000      	b.n	8006d90 <USBD_StdEPReq+0x14c>
        break;
 8006d8e:	bf00      	nop
      }
      break;
 8006d90:	e0a8      	b.n	8006ee4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d002      	beq.n	8006da2 <USBD_StdEPReq+0x15e>
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d031      	beq.n	8006e04 <USBD_StdEPReq+0x1c0>
 8006da0:	e095      	b.n	8006ece <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <USBD_StdEPReq+0x174>
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b80      	cmp	r3, #128	; 0x80
 8006dac:	d004      	beq.n	8006db8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb46 	bl	8007442 <USBD_CtlError>
          break;
 8006db6:	e08f      	b.n	8006ed8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	da0b      	bge.n	8006dd8 <USBD_StdEPReq+0x194>
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	3310      	adds	r3, #16
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	e00a      	b.n	8006dee <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fb8b 	bl	8007518 <USBD_CtlSendData>
          break;
 8006e02:	e069      	b.n	8006ed8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	da11      	bge.n	8006e30 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	f003 020f 	and.w	r2, r3, #15
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3318      	adds	r3, #24
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d117      	bne.n	8006e56 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fb0a 	bl	8007442 <USBD_CtlError>
            break;
 8006e2e:	e053      	b.n	8006ed8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	f003 020f 	and.w	r2, r3, #15
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 faf7 	bl	8007442 <USBD_CtlError>
            break;
 8006e54:	e040      	b.n	8006ed8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da0b      	bge.n	8006e76 <USBD_StdEPReq+0x232>
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	3310      	adds	r3, #16
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	3304      	adds	r3, #4
 8006e74:	e00a      	b.n	8006e8c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <USBD_StdEPReq+0x256>
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	2b80      	cmp	r3, #128	; 0x80
 8006e98:	d103      	bne.n	8006ea2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e00e      	b.n	8006ec0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 ffe0 	bl	8007e6c <USBD_LL_IsStallEP>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	e002      	b.n	8006ec0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb26 	bl	8007518 <USBD_CtlSendData>
          break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fab6 	bl	8007442 <USBD_CtlError>
        break;
 8006ed6:	bf00      	nop
      }
      break;
 8006ed8:	e004      	b.n	8006ee4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fab0 	bl	8007442 <USBD_CtlError>
      break;
 8006ee2:	bf00      	nop
    }
    break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 faaa 	bl	8007442 <USBD_CtlError>
    break;
 8006eee:	bf00      	nop
  }

  return ret;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	0a1b      	lsrs	r3, r3, #8
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	f200 80c9 	bhi.w	80070a8 <USBD_GetDescriptor+0x1ac>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <USBD_GetDescriptor+0x20>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f51 	.word	0x08006f51
 8006f24:	08006f91 	.word	0x08006f91
 8006f28:	080070a9 	.word	0x080070a9
 8006f2c:	080070a9 	.word	0x080070a9
 8006f30:	08007055 	.word	0x08007055
 8006f34:	0800707b 	.word	0x0800707b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	7c12      	ldrb	r2, [r2, #16]
 8006f44:	f107 010a 	add.w	r1, r7, #10
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
 8006f4c:	60f8      	str	r0, [r7, #12]
    break;
 8006f4e:	e0b0      	b.n	80070b2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7c1b      	ldrb	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10d      	bne.n	8006f74 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	f107 020a 	add.w	r2, r7, #10
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	2202      	movs	r2, #2
 8006f70:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006f72:	e09e      	b.n	80070b2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	f107 020a 	add.w	r2, r7, #10
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	701a      	strb	r2, [r3, #0]
    break;
 8006f8e:	e090      	b.n	80070b2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	885b      	ldrh	r3, [r3, #2]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	d856      	bhi.n	8007048 <USBD_GetDescriptor+0x14c>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_GetDescriptor+0xa4>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fb9 	.word	0x08006fb9
 8006fa4:	08006fd1 	.word	0x08006fd1
 8006fa8:	08006fe9 	.word	0x08006fe9
 8006fac:	08007001 	.word	0x08007001
 8006fb0:	08007019 	.word	0x08007019
 8006fb4:	08007031 	.word	0x08007031
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	7c12      	ldrb	r2, [r2, #16]
 8006fc4:	f107 010a 	add.w	r1, r7, #10
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	60f8      	str	r0, [r7, #12]
      break;
 8006fce:	e040      	b.n	8007052 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	7c12      	ldrb	r2, [r2, #16]
 8006fdc:	f107 010a 	add.w	r1, r7, #10
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4798      	blx	r3
 8006fe4:	60f8      	str	r0, [r7, #12]
      break;
 8006fe6:	e034      	b.n	8007052 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 010a 	add.w	r1, r7, #10
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
      break;
 8006ffe:	e028      	b.n	8007052 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c12      	ldrb	r2, [r2, #16]
 800700c:	f107 010a 	add.w	r1, r7, #10
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
      break;
 8007016:	e01c      	b.n	8007052 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	7c12      	ldrb	r2, [r2, #16]
 8007024:	f107 010a 	add.w	r1, r7, #10
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
 800702c:	60f8      	str	r0, [r7, #12]
      break;
 800702e:	e010      	b.n	8007052 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7c12      	ldrb	r2, [r2, #16]
 800703c:	f107 010a 	add.w	r1, r7, #10
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
 8007044:	60f8      	str	r0, [r7, #12]
      break;
 8007046:	e004      	b.n	8007052 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f9f9 	bl	8007442 <USBD_CtlError>
      return;
 8007050:	e04b      	b.n	80070ea <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007052:	e02e      	b.n	80070b2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	7c1b      	ldrb	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	f107 020a 	add.w	r2, r7, #10
 8007068:	4610      	mov	r0, r2
 800706a:	4798      	blx	r3
 800706c:	60f8      	str	r0, [r7, #12]
      break;
 800706e:	e020      	b.n	80070b2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9e5 	bl	8007442 <USBD_CtlError>
      return;
 8007078:	e037      	b.n	80070ea <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7c1b      	ldrb	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	f107 020a 	add.w	r2, r7, #10
 800708e:	4610      	mov	r0, r2
 8007090:	4798      	blx	r3
 8007092:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	2207      	movs	r2, #7
 800709a:	701a      	strb	r2, [r3, #0]
      break;
 800709c:	e009      	b.n	80070b2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f9ce 	bl	8007442 <USBD_CtlError>
      return;
 80070a6:	e020      	b.n	80070ea <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9c9 	bl	8007442 <USBD_CtlError>
    return;
 80070b0:	e01b      	b.n	80070ea <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80070b2:	897b      	ldrh	r3, [r7, #10]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d011      	beq.n	80070dc <USBD_GetDescriptor+0x1e0>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	88db      	ldrh	r3, [r3, #6]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	88da      	ldrh	r2, [r3, #6]
 80070c4:	897b      	ldrh	r3, [r7, #10]
 80070c6:	4293      	cmp	r3, r2
 80070c8:	bf28      	it	cs
 80070ca:	4613      	movcs	r3, r2
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80070d0:	897b      	ldrh	r3, [r7, #10]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68f9      	ldr	r1, [r7, #12]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa1e 	bl	8007518 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	88db      	ldrh	r3, [r3, #6]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa75 	bl	80075d4 <USBD_CtlSendStatus>
  }
}
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	889b      	ldrh	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d130      	bne.n	8007164 <USBD_SetAddress+0x74>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	88db      	ldrh	r3, [r3, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d12c      	bne.n	8007164 <USBD_SetAddress+0x74>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	885b      	ldrh	r3, [r3, #2]
 800710e:	2b7f      	cmp	r3, #127	; 0x7f
 8007110:	d828      	bhi.n	8007164 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007124:	2b03      	cmp	r3, #3
 8007126:	d104      	bne.n	8007132 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f989 	bl	8007442 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007130:	e01c      	b.n	800716c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7bfa      	ldrb	r2, [r7, #15]
 8007136:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fec0 	bl	8007ec4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa45 	bl	80075d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007158:	e008      	b.n	800716c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007162:	e003      	b.n	800716c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f96b 	bl	8007442 <USBD_CtlError>
  }
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	4b41      	ldr	r3, [pc, #260]	; (800728c <USBD_SetConfig+0x118>)
 8007186:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007188:	4b40      	ldr	r3, [pc, #256]	; (800728c <USBD_SetConfig+0x118>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d904      	bls.n	800719a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f955 	bl	8007442 <USBD_CtlError>
 8007198:	e075      	b.n	8007286 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d002      	beq.n	80071aa <USBD_SetConfig+0x36>
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d023      	beq.n	80071f0 <USBD_SetConfig+0x7c>
 80071a8:	e062      	b.n	8007270 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80071aa:	4b38      	ldr	r3, [pc, #224]	; (800728c <USBD_SetConfig+0x118>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01a      	beq.n	80071e8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80071b2:	4b36      	ldr	r3, [pc, #216]	; (800728c <USBD_SetConfig+0x118>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2203      	movs	r2, #3
 80071c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071c4:	4b31      	ldr	r3, [pc, #196]	; (800728c <USBD_SetConfig+0x118>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fa2a 	bl	8006624 <USBD_SetClassConfig>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d104      	bne.n	80071e0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f932 	bl	8007442 <USBD_CtlError>
          return;
 80071de:	e052      	b.n	8007286 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9f7 	bl	80075d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80071e6:	e04e      	b.n	8007286 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9f3 	bl	80075d4 <USBD_CtlSendStatus>
      break;
 80071ee:	e04a      	b.n	8007286 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071f0:	4b26      	ldr	r3, [pc, #152]	; (800728c <USBD_SetConfig+0x118>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d112      	bne.n	800721e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007200:	4b22      	ldr	r3, [pc, #136]	; (800728c <USBD_SetConfig+0x118>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800720a:	4b20      	ldr	r3, [pc, #128]	; (800728c <USBD_SetConfig+0x118>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff fa26 	bl	8006662 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9dc 	bl	80075d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800721c:	e033      	b.n	8007286 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800721e:	4b1b      	ldr	r3, [pc, #108]	; (800728c <USBD_SetConfig+0x118>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d01d      	beq.n	8007268 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fa14 	bl	8006662 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <USBD_SetConfig+0x118>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <USBD_SetConfig+0x118>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f9ea 	bl	8006624 <USBD_SetClassConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	2b02      	cmp	r3, #2
 8007254:	d104      	bne.n	8007260 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f8f2 	bl	8007442 <USBD_CtlError>
          return;
 800725e:	e012      	b.n	8007286 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f9b7 	bl	80075d4 <USBD_CtlSendStatus>
      break;
 8007266:	e00e      	b.n	8007286 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f9b3 	bl	80075d4 <USBD_CtlSendStatus>
      break;
 800726e:	e00a      	b.n	8007286 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f8e5 	bl	8007442 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007278:	4b04      	ldr	r3, [pc, #16]	; (800728c <USBD_SetConfig+0x118>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff f9ef 	bl	8006662 <USBD_ClrClassConfig>
      break;
 8007284:	bf00      	nop
    }
  }
}
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20000200 	.word	0x20000200

08007290 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d004      	beq.n	80072ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f8cc 	bl	8007442 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80072aa:	e021      	b.n	80072f0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	db17      	blt.n	80072e6 <USBD_GetConfig+0x56>
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	dd02      	ble.n	80072c0 <USBD_GetConfig+0x30>
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d00b      	beq.n	80072d6 <USBD_GetConfig+0x46>
 80072be:	e012      	b.n	80072e6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3308      	adds	r3, #8
 80072ca:	2201      	movs	r2, #1
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f922 	bl	8007518 <USBD_CtlSendData>
      break;
 80072d4:	e00c      	b.n	80072f0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3304      	adds	r3, #4
 80072da:	2201      	movs	r2, #1
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f91a 	bl	8007518 <USBD_CtlSendData>
      break;
 80072e4:	e004      	b.n	80072f0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f8aa 	bl	8007442 <USBD_CtlError>
      break;
 80072ee:	bf00      	nop
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007308:	3b01      	subs	r3, #1
 800730a:	2b02      	cmp	r3, #2
 800730c:	d81e      	bhi.n	800734c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	88db      	ldrh	r3, [r3, #6]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d004      	beq.n	8007320 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f892 	bl	8007442 <USBD_CtlError>
      break;
 800731e:	e01a      	b.n	8007356 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f043 0202 	orr.w	r2, r3, #2
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	330c      	adds	r3, #12
 8007340:	2202      	movs	r2, #2
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f8e7 	bl	8007518 <USBD_CtlSendData>
    break;
 800734a:	e004      	b.n	8007356 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f877 	bl	8007442 <USBD_CtlError>
    break;
 8007354:	bf00      	nop
  }
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	885b      	ldrh	r3, [r3, #2]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d106      	bne.n	800737e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f92b 	bl	80075d4 <USBD_CtlSendStatus>
  }

}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007396:	3b01      	subs	r3, #1
 8007398:	2b02      	cmp	r3, #2
 800739a:	d80b      	bhi.n	80073b4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	885b      	ldrh	r3, [r3, #2]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d10c      	bne.n	80073be <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f911 	bl	80075d4 <USBD_CtlSendStatus>
    }
    break;
 80073b2:	e004      	b.n	80073be <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f843 	bl	8007442 <USBD_CtlError>
    break;
 80073bc:	e000      	b.n	80073c0 <USBD_ClrFeature+0x3a>
    break;
 80073be:	bf00      	nop
  }
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	785a      	ldrb	r2, [r3, #1]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	3302      	adds	r3, #2
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	3303      	adds	r3, #3
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	3304      	adds	r3, #4
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	b29a      	uxth	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	3305      	adds	r3, #5
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	b29b      	uxth	r3, r3
 8007412:	4413      	add	r3, r2
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	3306      	adds	r3, #6
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b29a      	uxth	r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	3307      	adds	r3, #7
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	b29b      	uxth	r3, r3
 800742e:	4413      	add	r3, r2
 8007430:	b29a      	uxth	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	80da      	strh	r2, [r3, #6]

}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800744c:	2180      	movs	r1, #128	; 0x80
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fcce 	bl	8007df0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fcca 	bl	8007df0 <USBD_LL_StallEP>
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d032      	beq.n	80074e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f834 	bl	80074e8 <USBD_GetLen>
 8007480:	4603      	mov	r3, r0
 8007482:	3301      	adds	r3, #1
 8007484:	b29b      	uxth	r3, r3
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	75fa      	strb	r2, [r7, #23]
 8007494:	461a      	mov	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4413      	add	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	75fa      	strb	r2, [r7, #23]
 80074a6:	461a      	mov	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4413      	add	r3, r2
 80074ac:	2203      	movs	r2, #3
 80074ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80074b0:	e012      	b.n	80074d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	60fa      	str	r2, [r7, #12]
 80074b8:	7dfa      	ldrb	r2, [r7, #23]
 80074ba:	1c51      	adds	r1, r2, #1
 80074bc:	75f9      	strb	r1, [r7, #23]
 80074be:	4611      	mov	r1, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	440a      	add	r2, r1
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	75fa      	strb	r2, [r7, #23]
 80074ce:	461a      	mov	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4413      	add	r3, r2
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e8      	bne.n	80074b2 <USBD_GetString+0x4e>
    }
  }
}
 80074e0:	bf00      	nop
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80074f4:	e005      	b.n	8007502 <USBD_GetLen+0x1a>
    {
        len++;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	3301      	adds	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
        buf++;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3301      	adds	r3, #1
 8007500:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f5      	bne.n	80074f6 <USBD_GetLen+0xe>
    }

    return len;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2202      	movs	r2, #2
 800752a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	2100      	movs	r1, #0
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fcde 	bl	8007f02 <USBD_LL_Transmit>

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800755e:	88fb      	ldrh	r3, [r7, #6]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	2100      	movs	r1, #0
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fccc 	bl	8007f02 <USBD_LL_Transmit>

  return USBD_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2203      	movs	r2, #3
 8007586:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	2100      	movs	r1, #0
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fcd1 	bl	8007f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	2100      	movs	r1, #0
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fcbf 	bl	8007f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2204      	movs	r2, #4
 80075e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075e4:	2300      	movs	r3, #0
 80075e6:	2200      	movs	r2, #0
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fc89 	bl	8007f02 <USBD_LL_Transmit>

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2205      	movs	r2, #5
 8007606:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800760a:	2300      	movs	r3, #0
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc99 	bl	8007f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007624:	2200      	movs	r2, #0
 8007626:	4912      	ldr	r1, [pc, #72]	; (8007670 <MX_USB_DEVICE_Init+0x50>)
 8007628:	4812      	ldr	r0, [pc, #72]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800762a:	f7fe ff9f 	bl	800656c <USBD_Init>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007634:	f7f9 fa9a 	bl	8000b6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007638:	490f      	ldr	r1, [pc, #60]	; (8007678 <MX_USB_DEVICE_Init+0x58>)
 800763a:	480e      	ldr	r0, [pc, #56]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800763c:	f7fe ffc1 	bl	80065c2 <USBD_RegisterClass>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007646:	f7f9 fa91 	bl	8000b6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800764a:	490c      	ldr	r1, [pc, #48]	; (800767c <MX_USB_DEVICE_Init+0x5c>)
 800764c:	4809      	ldr	r0, [pc, #36]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800764e:	f7fe feef 	bl	8006430 <USBD_CDC_RegisterInterface>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007658:	f7f9 fa88 	bl	8000b6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800765c:	4805      	ldr	r0, [pc, #20]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800765e:	f7fe ffca 	bl	80065f6 <USBD_Start>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007668:	f7f9 fa80 	bl	8000b6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800766c:	bf00      	nop
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000012c 	.word	0x2000012c
 8007674:	200003cc 	.word	0x200003cc
 8007678:	20000018 	.word	0x20000018
 800767c:	2000011c 	.word	0x2000011c

08007680 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007684:	2200      	movs	r2, #0
 8007686:	4905      	ldr	r1, [pc, #20]	; (800769c <CDC_Init_FS+0x1c>)
 8007688:	4805      	ldr	r0, [pc, #20]	; (80076a0 <CDC_Init_FS+0x20>)
 800768a:	f7fe fee8 	bl	800645e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800768e:	4905      	ldr	r1, [pc, #20]	; (80076a4 <CDC_Init_FS+0x24>)
 8007690:	4803      	ldr	r0, [pc, #12]	; (80076a0 <CDC_Init_FS+0x20>)
 8007692:	f7fe fefe 	bl	8006492 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007696:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007698:	4618      	mov	r0, r3
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000e68 	.word	0x20000e68
 80076a0:	200003cc 	.word	0x200003cc
 80076a4:	20000668 	.word	0x20000668

080076a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
 80076c4:	4613      	mov	r3, r2
 80076c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	2b23      	cmp	r3, #35	; 0x23
 80076cc:	d84a      	bhi.n	8007764 <CDC_Control_FS+0xac>
 80076ce:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <CDC_Control_FS+0x1c>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	08007765 	.word	0x08007765
 80076d8:	08007765 	.word	0x08007765
 80076dc:	08007765 	.word	0x08007765
 80076e0:	08007765 	.word	0x08007765
 80076e4:	08007765 	.word	0x08007765
 80076e8:	08007765 	.word	0x08007765
 80076ec:	08007765 	.word	0x08007765
 80076f0:	08007765 	.word	0x08007765
 80076f4:	08007765 	.word	0x08007765
 80076f8:	08007765 	.word	0x08007765
 80076fc:	08007765 	.word	0x08007765
 8007700:	08007765 	.word	0x08007765
 8007704:	08007765 	.word	0x08007765
 8007708:	08007765 	.word	0x08007765
 800770c:	08007765 	.word	0x08007765
 8007710:	08007765 	.word	0x08007765
 8007714:	08007765 	.word	0x08007765
 8007718:	08007765 	.word	0x08007765
 800771c:	08007765 	.word	0x08007765
 8007720:	08007765 	.word	0x08007765
 8007724:	08007765 	.word	0x08007765
 8007728:	08007765 	.word	0x08007765
 800772c:	08007765 	.word	0x08007765
 8007730:	08007765 	.word	0x08007765
 8007734:	08007765 	.word	0x08007765
 8007738:	08007765 	.word	0x08007765
 800773c:	08007765 	.word	0x08007765
 8007740:	08007765 	.word	0x08007765
 8007744:	08007765 	.word	0x08007765
 8007748:	08007765 	.word	0x08007765
 800774c:	08007765 	.word	0x08007765
 8007750:	08007765 	.word	0x08007765
 8007754:	08007765 	.word	0x08007765
 8007758:	08007765 	.word	0x08007765
 800775c:	08007765 	.word	0x08007765
 8007760:	08007765 	.word	0x08007765
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007764:	bf00      	nop
  }

  return (USBD_OK);
 8007766:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4805      	ldr	r0, [pc, #20]	; (8007798 <CDC_Receive_FS+0x24>)
 8007782:	f7fe fe86 	bl	8006492 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007786:	4804      	ldr	r0, [pc, #16]	; (8007798 <CDC_Receive_FS+0x24>)
 8007788:	f7fe fec6 	bl	8006518 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800778c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	200003cc 	.word	0x200003cc

0800779c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80077ac:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <CDC_Transmit_FS+0x48>)
 80077ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80077be:	2301      	movs	r3, #1
 80077c0:	e00b      	b.n	80077da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80077c2:	887b      	ldrh	r3, [r7, #2]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	4806      	ldr	r0, [pc, #24]	; (80077e4 <CDC_Transmit_FS+0x48>)
 80077ca:	f7fe fe48 	bl	800645e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80077ce:	4805      	ldr	r0, [pc, #20]	; (80077e4 <CDC_Transmit_FS+0x48>)
 80077d0:	f7fe fe73 	bl	80064ba <USBD_CDC_TransmitPacket>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200003cc 	.word	0x200003cc

080077e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2212      	movs	r2, #18
 80077f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077fa:	4b03      	ldr	r3, [pc, #12]	; (8007808 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	20000148 	.word	0x20000148

0800780c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2204      	movs	r2, #4
 800781c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800781e:	4b03      	ldr	r3, [pc, #12]	; (800782c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	2000015c 	.word	0x2000015c

08007830 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	6039      	str	r1, [r7, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	4907      	ldr	r1, [pc, #28]	; (8007864 <USBD_FS_ProductStrDescriptor+0x34>)
 8007846:	4808      	ldr	r0, [pc, #32]	; (8007868 <USBD_FS_ProductStrDescriptor+0x38>)
 8007848:	f7ff fe0c 	bl	8007464 <USBD_GetString>
 800784c:	e004      	b.n	8007858 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4904      	ldr	r1, [pc, #16]	; (8007864 <USBD_FS_ProductStrDescriptor+0x34>)
 8007852:	4805      	ldr	r0, [pc, #20]	; (8007868 <USBD_FS_ProductStrDescriptor+0x38>)
 8007854:	f7ff fe06 	bl	8007464 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20001668 	.word	0x20001668
 8007868:	080082b8 	.word	0x080082b8

0800786c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	6039      	str	r1, [r7, #0]
 8007876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	4904      	ldr	r1, [pc, #16]	; (800788c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800787c:	4804      	ldr	r0, [pc, #16]	; (8007890 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800787e:	f7ff fdf1 	bl	8007464 <USBD_GetString>
  return USBD_StrDesc;
 8007882:	4b02      	ldr	r3, [pc, #8]	; (800788c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20001668 	.word	0x20001668
 8007890:	080082d0 	.word	0x080082d0

08007894 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	221a      	movs	r2, #26
 80078a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078a6:	f000 f843 	bl	8007930 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80078aa:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000160 	.word	0x20000160

080078b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d105      	bne.n	80078d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4907      	ldr	r1, [pc, #28]	; (80078ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ce:	4808      	ldr	r0, [pc, #32]	; (80078f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078d0:	f7ff fdc8 	bl	8007464 <USBD_GetString>
 80078d4:	e004      	b.n	80078e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	4904      	ldr	r1, [pc, #16]	; (80078ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80078da:	4805      	ldr	r0, [pc, #20]	; (80078f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078dc:	f7ff fdc2 	bl	8007464 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20001668 	.word	0x20001668
 80078f0:	080082e4 	.word	0x080082e4

080078f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d105      	bne.n	8007912 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	4907      	ldr	r1, [pc, #28]	; (8007928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800790a:	4808      	ldr	r0, [pc, #32]	; (800792c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800790c:	f7ff fdaa 	bl	8007464 <USBD_GetString>
 8007910:	e004      	b.n	800791c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4904      	ldr	r1, [pc, #16]	; (8007928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007916:	4805      	ldr	r0, [pc, #20]	; (800792c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007918:	f7ff fda4 	bl	8007464 <USBD_GetString>
  }
  return USBD_StrDesc;
 800791c:	4b02      	ldr	r3, [pc, #8]	; (8007928 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20001668 	.word	0x20001668
 800792c:	080082f0 	.word	0x080082f0

08007930 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007936:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <Get_SerialNum+0x44>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800793c:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <Get_SerialNum+0x48>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007942:	4b0e      	ldr	r3, [pc, #56]	; (800797c <Get_SerialNum+0x4c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007956:	2208      	movs	r2, #8
 8007958:	4909      	ldr	r1, [pc, #36]	; (8007980 <Get_SerialNum+0x50>)
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 f814 	bl	8007988 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007960:	2204      	movs	r2, #4
 8007962:	4908      	ldr	r1, [pc, #32]	; (8007984 <Get_SerialNum+0x54>)
 8007964:	68b8      	ldr	r0, [r7, #8]
 8007966:	f000 f80f 	bl	8007988 <IntToUnicode>
  }
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	1fff7a10 	.word	0x1fff7a10
 8007978:	1fff7a14 	.word	0x1fff7a14
 800797c:	1fff7a18 	.word	0x1fff7a18
 8007980:	20000162 	.word	0x20000162
 8007984:	20000172 	.word	0x20000172

08007988 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800799a:	2300      	movs	r3, #0
 800799c:	75fb      	strb	r3, [r7, #23]
 800799e:	e027      	b.n	80079f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	0f1b      	lsrs	r3, r3, #28
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d80b      	bhi.n	80079c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	0f1b      	lsrs	r3, r3, #28
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4619      	mov	r1, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	440b      	add	r3, r1
 80079b8:	3230      	adds	r2, #48	; 0x30
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e00a      	b.n	80079d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	0f1b      	lsrs	r3, r3, #28
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	4619      	mov	r1, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	440b      	add	r3, r1
 80079d0:	3237      	adds	r2, #55	; 0x37
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	3301      	adds	r3, #1
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	4413      	add	r3, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	3301      	adds	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
 80079f0:	7dfa      	ldrb	r2, [r7, #23]
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d3d3      	bcc.n	80079a0 <IntToUnicode+0x18>
  }
}
 80079f8:	bf00      	nop
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08a      	sub	sp, #40	; 0x28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a0c:	f107 0314 	add.w	r3, r7, #20
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	609a      	str	r2, [r3, #8]
 8007a18:	60da      	str	r2, [r3, #12]
 8007a1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a24:	d147      	bne.n	8007ab6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	4b25      	ldr	r3, [pc, #148]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	4a24      	ldr	r2, [pc, #144]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a30:	f043 0301 	orr.w	r3, r3, #1
 8007a34:	6313      	str	r3, [r2, #48]	; 0x30
 8007a36:	4b22      	ldr	r3, [pc, #136]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	613b      	str	r3, [r7, #16]
 8007a40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007a50:	f107 0314 	add.w	r3, r7, #20
 8007a54:	4619      	mov	r1, r3
 8007a56:	481b      	ldr	r0, [pc, #108]	; (8007ac4 <HAL_PCD_MspInit+0xc0>)
 8007a58:	f7f9 fd1c 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007a5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a62:	2302      	movs	r3, #2
 8007a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a6e:	230a      	movs	r3, #10
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a72:	f107 0314 	add.w	r3, r7, #20
 8007a76:	4619      	mov	r1, r3
 8007a78:	4812      	ldr	r0, [pc, #72]	; (8007ac4 <HAL_PCD_MspInit+0xc0>)
 8007a7a:	f7f9 fd0b 	bl	8001494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a7e:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a82:	4a0f      	ldr	r2, [pc, #60]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	6353      	str	r3, [r2, #52]	; 0x34
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	4a0b      	ldr	r2, [pc, #44]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a98:	6453      	str	r3, [r2, #68]	; 0x44
 8007a9a:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <HAL_PCD_MspInit+0xbc>)
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	2043      	movs	r0, #67	; 0x43
 8007aac:	f7f9 fcbb 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ab0:	2043      	movs	r0, #67	; 0x43
 8007ab2:	f7f9 fcd4 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	3728      	adds	r7, #40	; 0x28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40020000 	.word	0x40020000

08007ac8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f7fe fdd2 	bl	8006688 <USBD_LL_SetupStage>
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007afe:	78fa      	ldrb	r2, [r7, #3]
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f7fe fe02 	bl	800671e <USBD_LL_DataOutStage>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	3348      	adds	r3, #72	; 0x48
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f7fe fe59 	bl	8006800 <USBD_LL_DataInStage>
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe ff67 	bl	8006a38 <USBD_LL_SOF>
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d001      	beq.n	8007b8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b86:	f7f8 fff1 	bl	8000b6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b90:	7bfa      	ldrb	r2, [r7, #15]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe ff19 	bl	80069cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fed2 	bl	800694a <USBD_LL_Reset>
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe ff14 	bl	80069ec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <HAL_PCD_SuspendCallback+0x48>)
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	4a03      	ldr	r2, [pc, #12]	; (8007bf8 <HAL_PCD_SuspendCallback+0x48>)
 8007bea:	f043 0306 	orr.w	r3, r3, #6
 8007bee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	e000ed00 	.word	0xe000ed00

08007bfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe ff03 	bl	8006a16 <USBD_LL_Resume>
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe ff29 	bl	8006a86 <USBD_LL_IsoOUTIncomplete>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe ff0a 	bl	8006a6c <USBD_LL_IsoINIncomplete>
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe ff16 	bl	8006aa0 <USBD_LL_DevConnected>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe ff13 	bl	8006ab6 <USBD_LL_DevDisconnected>
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d13c      	bne.n	8007d22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ca8:	4a20      	ldr	r2, [pc, #128]	; (8007d2c <USBD_LL_Init+0x94>)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a1e      	ldr	r2, [pc, #120]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cb8:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cc6:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cc8:	2202      	movs	r2, #2
 8007cca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ccc:	4b17      	ldr	r3, [pc, #92]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cd2:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cd8:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <USBD_LL_Init+0x94>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ce4:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <USBD_LL_Init+0x94>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007cea:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cf0:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007cf6:	480d      	ldr	r0, [pc, #52]	; (8007d2c <USBD_LL_Init+0x94>)
 8007cf8:	f7fa fb30 	bl	800235c <HAL_PCD_Init>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d02:	f7f8 ff33 	bl	8000b6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	4808      	ldr	r0, [pc, #32]	; (8007d2c <USBD_LL_Init+0x94>)
 8007d0a:	f7fb fc94 	bl	8003636 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d0e:	2240      	movs	r2, #64	; 0x40
 8007d10:	2100      	movs	r1, #0
 8007d12:	4806      	ldr	r0, [pc, #24]	; (8007d2c <USBD_LL_Init+0x94>)
 8007d14:	f7fb fc48 	bl	80035a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d18:	2280      	movs	r2, #128	; 0x80
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	4803      	ldr	r0, [pc, #12]	; (8007d2c <USBD_LL_Init+0x94>)
 8007d1e:	f7fb fc43 	bl	80035a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20001868 	.word	0x20001868

08007d30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fa fc25 	bl	8002596 <HAL_PCD_Start>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f92e 	bl	8007fb4 <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4611      	mov	r1, r2
 8007d72:	461a      	mov	r2, r3
 8007d74:	4603      	mov	r3, r0
 8007d76:	70fb      	strb	r3, [r7, #3]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70bb      	strb	r3, [r7, #2]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007d8e:	78bb      	ldrb	r3, [r7, #2]
 8007d90:	883a      	ldrh	r2, [r7, #0]
 8007d92:	78f9      	ldrb	r1, [r7, #3]
 8007d94:	f7fa fffa 	bl	8002d8c <HAL_PCD_EP_Open>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 f908 	bl	8007fb4 <USBD_Get_USB_Status>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fb f843 	bl	8002e5c <HAL_PCD_EP_Close>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f8e9 	bl	8007fb4 <USBD_Get_USB_Status>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fb f91b 	bl	800304a <HAL_PCD_EP_SetStall>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f8ca 	bl	8007fb4 <USBD_Get_USB_Status>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e48:	78fa      	ldrb	r2, [r7, #3]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fb f960 	bl	8003112 <HAL_PCD_EP_ClrStall>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 f8ab 	bl	8007fb4 <USBD_Get_USB_Status>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e7e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	da0b      	bge.n	8007ea0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	4613      	mov	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	333e      	adds	r3, #62	; 0x3e
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	e00b      	b.n	8007eb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007eb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007ede:	78fa      	ldrb	r2, [r7, #3]
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fa ff2d 	bl	8002d42 <HAL_PCD_SetAddress>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f860 	bl	8007fb4 <USBD_Get_USB_Status>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	460b      	mov	r3, r1
 8007f10:	72fb      	strb	r3, [r7, #11]
 8007f12:	4613      	mov	r3, r2
 8007f14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f24:	893b      	ldrh	r3, [r7, #8]
 8007f26:	7af9      	ldrb	r1, [r7, #11]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	f7fb f844 	bl	8002fb6 <HAL_PCD_EP_Transmit>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f83d 	bl	8007fb4 <USBD_Get_USB_Status>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007f3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	461a      	mov	r2, r3
 8007f54:	460b      	mov	r3, r1
 8007f56:	72fb      	strb	r3, [r7, #11]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f6a:	893b      	ldrh	r3, [r7, #8]
 8007f6c:	7af9      	ldrb	r1, [r7, #11]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	f7fa ffbe 	bl	8002ef0 <HAL_PCD_EP_Receive>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f81a 	bl	8007fb4 <USBD_Get_USB_Status>
 8007f80:	4603      	mov	r3, r0
 8007f82:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007f84:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fa ffee 	bl	8002f86 <HAL_PCD_EP_GetRxCount>
 8007faa:	4603      	mov	r3, r0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d817      	bhi.n	8007ff8 <USBD_Get_USB_Status+0x44>
 8007fc8:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <USBD_Get_USB_Status+0x1c>)
 8007fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fce:	bf00      	nop
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	08007fe7 	.word	0x08007fe7
 8007fd8:	08007fed 	.word	0x08007fed
 8007fdc:	08007ff3 	.word	0x08007ff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe4:	e00b      	b.n	8007ffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fea:	e008      	b.n	8007ffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff0:	e005      	b.n	8007ffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff6:	e002      	b.n	8007ffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8007ffc:	bf00      	nop
  }
  return usb_status;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <__errno>:
 800800c:	4b01      	ldr	r3, [pc, #4]	; (8008014 <__errno+0x8>)
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	2000017c 	.word	0x2000017c

08008018 <__libc_init_array>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	4e0d      	ldr	r6, [pc, #52]	; (8008050 <__libc_init_array+0x38>)
 800801c:	4c0d      	ldr	r4, [pc, #52]	; (8008054 <__libc_init_array+0x3c>)
 800801e:	1ba4      	subs	r4, r4, r6
 8008020:	10a4      	asrs	r4, r4, #2
 8008022:	2500      	movs	r5, #0
 8008024:	42a5      	cmp	r5, r4
 8008026:	d109      	bne.n	800803c <__libc_init_array+0x24>
 8008028:	4e0b      	ldr	r6, [pc, #44]	; (8008058 <__libc_init_array+0x40>)
 800802a:	4c0c      	ldr	r4, [pc, #48]	; (800805c <__libc_init_array+0x44>)
 800802c:	f000 f8ea 	bl	8008204 <_init>
 8008030:	1ba4      	subs	r4, r4, r6
 8008032:	10a4      	asrs	r4, r4, #2
 8008034:	2500      	movs	r5, #0
 8008036:	42a5      	cmp	r5, r4
 8008038:	d105      	bne.n	8008046 <__libc_init_array+0x2e>
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008040:	4798      	blx	r3
 8008042:	3501      	adds	r5, #1
 8008044:	e7ee      	b.n	8008024 <__libc_init_array+0xc>
 8008046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800804a:	4798      	blx	r3
 800804c:	3501      	adds	r5, #1
 800804e:	e7f2      	b.n	8008036 <__libc_init_array+0x1e>
 8008050:	08008320 	.word	0x08008320
 8008054:	08008320 	.word	0x08008320
 8008058:	08008320 	.word	0x08008320
 800805c:	08008324 	.word	0x08008324

08008060 <malloc>:
 8008060:	4b02      	ldr	r3, [pc, #8]	; (800806c <malloc+0xc>)
 8008062:	4601      	mov	r1, r0
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	f000 b861 	b.w	800812c <_malloc_r>
 800806a:	bf00      	nop
 800806c:	2000017c 	.word	0x2000017c

08008070 <free>:
 8008070:	4b02      	ldr	r3, [pc, #8]	; (800807c <free+0xc>)
 8008072:	4601      	mov	r1, r0
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	f000 b80b 	b.w	8008090 <_free_r>
 800807a:	bf00      	nop
 800807c:	2000017c 	.word	0x2000017c

08008080 <memset>:
 8008080:	4402      	add	r2, r0
 8008082:	4603      	mov	r3, r0
 8008084:	4293      	cmp	r3, r2
 8008086:	d100      	bne.n	800808a <memset+0xa>
 8008088:	4770      	bx	lr
 800808a:	f803 1b01 	strb.w	r1, [r3], #1
 800808e:	e7f9      	b.n	8008084 <memset+0x4>

08008090 <_free_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4605      	mov	r5, r0
 8008094:	2900      	cmp	r1, #0
 8008096:	d045      	beq.n	8008124 <_free_r+0x94>
 8008098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809c:	1f0c      	subs	r4, r1, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bfb8      	it	lt
 80080a2:	18e4      	addlt	r4, r4, r3
 80080a4:	f000 f8ac 	bl	8008200 <__malloc_lock>
 80080a8:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <_free_r+0x98>)
 80080aa:	6813      	ldr	r3, [r2, #0]
 80080ac:	4610      	mov	r0, r2
 80080ae:	b933      	cbnz	r3, 80080be <_free_r+0x2e>
 80080b0:	6063      	str	r3, [r4, #4]
 80080b2:	6014      	str	r4, [r2, #0]
 80080b4:	4628      	mov	r0, r5
 80080b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ba:	f000 b8a2 	b.w	8008202 <__malloc_unlock>
 80080be:	42a3      	cmp	r3, r4
 80080c0:	d90c      	bls.n	80080dc <_free_r+0x4c>
 80080c2:	6821      	ldr	r1, [r4, #0]
 80080c4:	1862      	adds	r2, r4, r1
 80080c6:	4293      	cmp	r3, r2
 80080c8:	bf04      	itt	eq
 80080ca:	681a      	ldreq	r2, [r3, #0]
 80080cc:	685b      	ldreq	r3, [r3, #4]
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	bf04      	itt	eq
 80080d2:	1852      	addeq	r2, r2, r1
 80080d4:	6022      	streq	r2, [r4, #0]
 80080d6:	6004      	str	r4, [r0, #0]
 80080d8:	e7ec      	b.n	80080b4 <_free_r+0x24>
 80080da:	4613      	mov	r3, r2
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	b10a      	cbz	r2, 80080e4 <_free_r+0x54>
 80080e0:	42a2      	cmp	r2, r4
 80080e2:	d9fa      	bls.n	80080da <_free_r+0x4a>
 80080e4:	6819      	ldr	r1, [r3, #0]
 80080e6:	1858      	adds	r0, r3, r1
 80080e8:	42a0      	cmp	r0, r4
 80080ea:	d10b      	bne.n	8008104 <_free_r+0x74>
 80080ec:	6820      	ldr	r0, [r4, #0]
 80080ee:	4401      	add	r1, r0
 80080f0:	1858      	adds	r0, r3, r1
 80080f2:	4282      	cmp	r2, r0
 80080f4:	6019      	str	r1, [r3, #0]
 80080f6:	d1dd      	bne.n	80080b4 <_free_r+0x24>
 80080f8:	6810      	ldr	r0, [r2, #0]
 80080fa:	6852      	ldr	r2, [r2, #4]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	4401      	add	r1, r0
 8008100:	6019      	str	r1, [r3, #0]
 8008102:	e7d7      	b.n	80080b4 <_free_r+0x24>
 8008104:	d902      	bls.n	800810c <_free_r+0x7c>
 8008106:	230c      	movs	r3, #12
 8008108:	602b      	str	r3, [r5, #0]
 800810a:	e7d3      	b.n	80080b4 <_free_r+0x24>
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	1821      	adds	r1, r4, r0
 8008110:	428a      	cmp	r2, r1
 8008112:	bf04      	itt	eq
 8008114:	6811      	ldreq	r1, [r2, #0]
 8008116:	6852      	ldreq	r2, [r2, #4]
 8008118:	6062      	str	r2, [r4, #4]
 800811a:	bf04      	itt	eq
 800811c:	1809      	addeq	r1, r1, r0
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	605c      	str	r4, [r3, #4]
 8008122:	e7c7      	b.n	80080b4 <_free_r+0x24>
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	20000204 	.word	0x20000204

0800812c <_malloc_r>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	1ccd      	adds	r5, r1, #3
 8008130:	f025 0503 	bic.w	r5, r5, #3
 8008134:	3508      	adds	r5, #8
 8008136:	2d0c      	cmp	r5, #12
 8008138:	bf38      	it	cc
 800813a:	250c      	movcc	r5, #12
 800813c:	2d00      	cmp	r5, #0
 800813e:	4606      	mov	r6, r0
 8008140:	db01      	blt.n	8008146 <_malloc_r+0x1a>
 8008142:	42a9      	cmp	r1, r5
 8008144:	d903      	bls.n	800814e <_malloc_r+0x22>
 8008146:	230c      	movs	r3, #12
 8008148:	6033      	str	r3, [r6, #0]
 800814a:	2000      	movs	r0, #0
 800814c:	bd70      	pop	{r4, r5, r6, pc}
 800814e:	f000 f857 	bl	8008200 <__malloc_lock>
 8008152:	4a21      	ldr	r2, [pc, #132]	; (80081d8 <_malloc_r+0xac>)
 8008154:	6814      	ldr	r4, [r2, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	b991      	cbnz	r1, 8008180 <_malloc_r+0x54>
 800815a:	4c20      	ldr	r4, [pc, #128]	; (80081dc <_malloc_r+0xb0>)
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	b91b      	cbnz	r3, 8008168 <_malloc_r+0x3c>
 8008160:	4630      	mov	r0, r6
 8008162:	f000 f83d 	bl	80081e0 <_sbrk_r>
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	4629      	mov	r1, r5
 800816a:	4630      	mov	r0, r6
 800816c:	f000 f838 	bl	80081e0 <_sbrk_r>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d124      	bne.n	80081be <_malloc_r+0x92>
 8008174:	230c      	movs	r3, #12
 8008176:	6033      	str	r3, [r6, #0]
 8008178:	4630      	mov	r0, r6
 800817a:	f000 f842 	bl	8008202 <__malloc_unlock>
 800817e:	e7e4      	b.n	800814a <_malloc_r+0x1e>
 8008180:	680b      	ldr	r3, [r1, #0]
 8008182:	1b5b      	subs	r3, r3, r5
 8008184:	d418      	bmi.n	80081b8 <_malloc_r+0x8c>
 8008186:	2b0b      	cmp	r3, #11
 8008188:	d90f      	bls.n	80081aa <_malloc_r+0x7e>
 800818a:	600b      	str	r3, [r1, #0]
 800818c:	50cd      	str	r5, [r1, r3]
 800818e:	18cc      	adds	r4, r1, r3
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f836 	bl	8008202 <__malloc_unlock>
 8008196:	f104 000b 	add.w	r0, r4, #11
 800819a:	1d23      	adds	r3, r4, #4
 800819c:	f020 0007 	bic.w	r0, r0, #7
 80081a0:	1ac3      	subs	r3, r0, r3
 80081a2:	d0d3      	beq.n	800814c <_malloc_r+0x20>
 80081a4:	425a      	negs	r2, r3
 80081a6:	50e2      	str	r2, [r4, r3]
 80081a8:	e7d0      	b.n	800814c <_malloc_r+0x20>
 80081aa:	428c      	cmp	r4, r1
 80081ac:	684b      	ldr	r3, [r1, #4]
 80081ae:	bf16      	itet	ne
 80081b0:	6063      	strne	r3, [r4, #4]
 80081b2:	6013      	streq	r3, [r2, #0]
 80081b4:	460c      	movne	r4, r1
 80081b6:	e7eb      	b.n	8008190 <_malloc_r+0x64>
 80081b8:	460c      	mov	r4, r1
 80081ba:	6849      	ldr	r1, [r1, #4]
 80081bc:	e7cc      	b.n	8008158 <_malloc_r+0x2c>
 80081be:	1cc4      	adds	r4, r0, #3
 80081c0:	f024 0403 	bic.w	r4, r4, #3
 80081c4:	42a0      	cmp	r0, r4
 80081c6:	d005      	beq.n	80081d4 <_malloc_r+0xa8>
 80081c8:	1a21      	subs	r1, r4, r0
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 f808 	bl	80081e0 <_sbrk_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d0cf      	beq.n	8008174 <_malloc_r+0x48>
 80081d4:	6025      	str	r5, [r4, #0]
 80081d6:	e7db      	b.n	8008190 <_malloc_r+0x64>
 80081d8:	20000204 	.word	0x20000204
 80081dc:	20000208 	.word	0x20000208

080081e0 <_sbrk_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4c06      	ldr	r4, [pc, #24]	; (80081fc <_sbrk_r+0x1c>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4605      	mov	r5, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	f7f8 ff20 	bl	8001030 <_sbrk>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_sbrk_r+0x1a>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_sbrk_r+0x1a>
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	20001c70 	.word	0x20001c70

08008200 <__malloc_lock>:
 8008200:	4770      	bx	lr

08008202 <__malloc_unlock>:
 8008202:	4770      	bx	lr

08008204 <_init>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr

08008210 <_fini>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr
