
Wifi_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a8  080081a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081b0  080081b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b0  080081b0  000181b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080081b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  200001e0  08008398  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c34  08008398  00021c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019844  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037f9  00000000  00000000  00039a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003d250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a0f4  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012ffe  00000000  00000000  0005989c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ed21  00000000  00000000  0006c89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb5bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  000fb638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e0 	.word	0x200001e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080d8 	.word	0x080080d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e4 	.word	0x200001e4
 80001d4:	080080d8 	.word	0x080080d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0c0      	sub	sp, #256	; 0x100
 80004dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fd9d 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f897 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fa05 	bl	80008f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f917 	bl	800071c <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ee:	f000 f943 	bl	8000778 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f2:	f000 f96f 	bl	80007d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f6:	f000 f99d 	bl	8000834 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004fa:	f000 f9d1 	bl	80008a0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004fe:	f006 fff9 	bl	80074f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t inicializacija = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  uint8_t prejetoSporocilo[255] = {};
 8000508:	463b      	mov	r3, r7
 800050a:	4618      	mov	r0, r3
 800050c:	23ff      	movs	r3, #255	; 0xff
 800050e:	461a      	mov	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f007 fd1f 	bl	8007f54 <memset>
  while (1)
  {
	  // Debug delay.
	 // HAL_Delay(8000); // 8 s.

	  if(!inicializacija){
 8000516:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800051a:	2b00      	cmp	r3, #0
 800051c:	d15c      	bne.n	80005d8 <main+0x100>
		  // Uart1 (PA15_TX ; PB7_RX)-> TCP server.
		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWMODE=2\r\n", 13, 1000); // 2 = AP.
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	220d      	movs	r2, #13
 8000524:	4936      	ldr	r1, [pc, #216]	; (8000600 <main+0x128>)
 8000526:	4837      	ldr	r0, [pc, #220]	; (8000604 <main+0x12c>)
 8000528:	f003 fe3b 	bl	80041a2 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 800052c:	4639      	mov	r1, r7
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	22ff      	movs	r2, #255	; 0xff
 8000534:	4833      	ldr	r0, [pc, #204]	; (8000604 <main+0x12c>)
 8000536:	f003 fecd 	bl	80042d4 <HAL_UART_Receive>
		  memset(prejetoSporocilo, 0, 255);
 800053a:	463b      	mov	r3, r7
 800053c:	22ff      	movs	r2, #255	; 0xff
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f007 fd07 	bl	8007f54 <memset>

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWSAP=\"server\",\"123456780\",1,3\r\n", 35, 1000); // Enable multiple comms.
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	2223      	movs	r2, #35	; 0x23
 800054c:	492e      	ldr	r1, [pc, #184]	; (8000608 <main+0x130>)
 800054e:	482d      	ldr	r0, [pc, #180]	; (8000604 <main+0x12c>)
 8000550:	f003 fe27 	bl	80041a2 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 8000554:	4639      	mov	r1, r7
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	22ff      	movs	r2, #255	; 0xff
 800055c:	4829      	ldr	r0, [pc, #164]	; (8000604 <main+0x12c>)
 800055e:	f003 feb9 	bl	80042d4 <HAL_UART_Receive>
		  CDC_Transmit_FS(prejetoSporocilo, 255);
 8000562:	463b      	mov	r3, r7
 8000564:	21ff      	movs	r1, #255	; 0xff
 8000566:	4618      	mov	r0, r3
 8000568:	f007 f882 	bl	8007670 <CDC_Transmit_FS>
		  memset(prejetoSporocilo, 0, 255);
 800056c:	463b      	mov	r3, r7
 800056e:	22ff      	movs	r2, #255	; 0xff
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f007 fcee 	bl	8007f54 <memset>

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMUX=1\r\n", 13, 1000); // Enable multiple comms.
 8000578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057c:	220d      	movs	r2, #13
 800057e:	4923      	ldr	r1, [pc, #140]	; (800060c <main+0x134>)
 8000580:	4820      	ldr	r0, [pc, #128]	; (8000604 <main+0x12c>)
 8000582:	f003 fe0e 	bl	80041a2 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 8000586:	4639      	mov	r1, r7
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	22ff      	movs	r2, #255	; 0xff
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <main+0x12c>)
 8000590:	f003 fea0 	bl	80042d4 <HAL_UART_Receive>
		  memset(prejetoSporocilo, 0, 255);
 8000594:	463b      	mov	r3, r7
 8000596:	22ff      	movs	r2, #255	; 0xff
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f007 fcda 	bl	8007f54 <memset>

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSERVER=1\r\n", 16, 1000); // Setup server with default port 333.
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	2210      	movs	r2, #16
 80005a6:	491a      	ldr	r1, [pc, #104]	; (8000610 <main+0x138>)
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <main+0x12c>)
 80005aa:	f003 fdfa 	bl	80041a2 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 80005ae:	4639      	mov	r1, r7
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	22ff      	movs	r2, #255	; 0xff
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <main+0x12c>)
 80005b8:	f003 fe8c 	bl	80042d4 <HAL_UART_Receive>
		  CDC_Transmit_FS(prejetoSporocilo, 255);
 80005bc:	463b      	mov	r3, r7
 80005be:	21ff      	movs	r1, #255	; 0xff
 80005c0:	4618      	mov	r0, r3
 80005c2:	f007 f855 	bl	8007670 <CDC_Transmit_FS>
		  memset(prejetoSporocilo, 0, 255);
 80005c6:	463b      	mov	r3, r7
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f007 fcc1 	bl	8007f54 <memset>

		  // Server IP: 192.168.4.1

		  inicializacija = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	  }

	  //HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSTATUS\r\n", 14, 1000); // Setup server with default port 333.
	  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 500);
 80005d8:	4639      	mov	r1, r7
 80005da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005de:	22ff      	movs	r2, #255	; 0xff
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <main+0x12c>)
 80005e2:	f003 fe77 	bl	80042d4 <HAL_UART_Receive>
	  CDC_Transmit_FS(prejetoSporocilo, 255);
 80005e6:	463b      	mov	r3, r7
 80005e8:	21ff      	movs	r1, #255	; 0xff
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 f840 	bl	8007670 <CDC_Transmit_FS>
	  memset(prejetoSporocilo, 0, 255);
 80005f0:	463b      	mov	r3, r7
 80005f2:	22ff      	movs	r2, #255	; 0xff
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 fcac 	bl	8007f54 <memset>
	  if(!inicializacija){
 80005fc:	e78b      	b.n	8000516 <main+0x3e>
 80005fe:	bf00      	nop
 8000600:	080080f0 	.word	0x080080f0
 8000604:	20000260 	.word	0x20000260
 8000608:	08008100 	.word	0x08008100
 800060c:	08008124 	.word	0x08008124
 8000610:	08008134 	.word	0x08008134

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b09a      	sub	sp, #104	; 0x68
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f007 fc96 	bl	8007f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <SystemClock_Config+0x100>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	4a30      	ldr	r2, [pc, #192]	; (8000714 <SystemClock_Config+0x100>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	6413      	str	r3, [r2, #64]	; 0x40
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <SystemClock_Config+0x100>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <SystemClock_Config+0x104>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <SystemClock_Config+0x104>)
 8000670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0x104>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000682:	2301      	movs	r3, #1
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000696:	2304      	movs	r3, #4
 8000698:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069a:	23a8      	movs	r3, #168	; 0xa8
 800069c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 ff4a 	bl	8003544 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b6:	f000 f9f7 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f976 	bl	80039c8 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006e2:	f000 f9e1 	bl	8000aa8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006ea:	23c8      	movs	r3, #200	; 0xc8
 80006ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006ee:	2305      	movs	r3, #5
 80006f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fb52 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000706:	f000 f9cf 	bl	8000aa8 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3768      	adds	r7, #104	; 0x68
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_I2C1_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_I2C1_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_I2C1_Init+0x50>)
 800073a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_I2C1_Init+0x50>)
 800075a:	f000 ffa1 	bl	80016a0 <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 f9a0 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000020c 	.word	0x2000020c
 8000770:	40005400 	.word	0x40005400
 8000774:	000186a0 	.word	0x000186a0

08000778 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2S2_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2S2_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2S2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2S2_Init+0x50>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <MX_I2S2_Init+0x58>)
 80007a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b6:	f001 f89b 	bl	80018f0 <HAL_I2S_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f972 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200002f8 	.word	0x200002f8
 80007cc:	40003800 	.word	0x40003800
 80007d0:	00017700 	.word	0x00017700

080007d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2S3_Init+0x54>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_I2S3_Init+0x58>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_I2S3_Init+0x54>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_I2S3_Init+0x5c>)
 80007fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_I2S3_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2S3_Init+0x54>)
 8000814:	f001 f86c 	bl	80018f0 <HAL_I2S_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081e:	f000 f943 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000340 	.word	0x20000340
 800082c:	40003c00 	.word	0x40003c00
 8000830:	00017700 	.word	0x00017700

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_SPI1_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <MX_SPI1_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_SPI1_Init+0x64>)
 8000840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_SPI1_Init+0x64>)
 8000880:	220a      	movs	r2, #10
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_SPI1_Init+0x64>)
 8000886:	f003 fbdb 	bl	8004040 <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 f90a 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200002a0 	.word	0x200002a0
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_USART1_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d8:	f003 fc16 	bl	8004108 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 f8e1 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000260 	.word	0x20000260
 80008f0:	40011000 	.word	0x40011000

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a5f      	ldr	r2, [pc, #380]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b5d      	ldr	r3, [pc, #372]	; (8000a90 <MX_GPIO_Init+0x19c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	4b59      	ldr	r3, [pc, #356]	; (8000a90 <MX_GPIO_Init+0x19c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a58      	ldr	r2, [pc, #352]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a51      	ldr	r2, [pc, #324]	; (8000a90 <MX_GPIO_Init+0x19c>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a4a      	ldr	r2, [pc, #296]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b44      	ldr	r3, [pc, #272]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a43      	ldr	r2, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x19c>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <MX_GPIO_Init+0x19c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <MX_GPIO_Init+0x19c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a3c      	ldr	r2, [pc, #240]	; (8000a90 <MX_GPIO_Init+0x19c>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <MX_GPIO_Init+0x19c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2108      	movs	r1, #8
 80009b6:	4837      	ldr	r0, [pc, #220]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 80009b8:	f000 fe58 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	4835      	ldr	r0, [pc, #212]	; (8000a98 <MX_GPIO_Init+0x1a4>)
 80009c2:	f000 fe53 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009c6:	2200      	movs	r2, #0
 80009c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009cc:	4833      	ldr	r0, [pc, #204]	; (8000a9c <MX_GPIO_Init+0x1a8>)
 80009ce:	f000 fe4d 	bl	800166c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009d2:	2304      	movs	r3, #4
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	482b      	ldr	r0, [pc, #172]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 80009e6:	f000 fcbf 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ea:	2308      	movs	r3, #8
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4824      	ldr	r0, [pc, #144]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000a02:	f000 fcb1 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a06:	2332      	movs	r3, #50	; 0x32
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x1ac>)
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481e      	ldr	r0, [pc, #120]	; (8000a94 <MX_GPIO_Init+0x1a0>)
 8000a1a:	f000 fca5 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <MX_GPIO_Init+0x1a4>)
 8000a36:	f000 fc97 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0x1ac>)
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <MX_GPIO_Init+0x1b0>)
 8000a4e:	f000 fc8b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a52:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a56:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_GPIO_Init+0x1a8>)
 8000a6c:	f000 fc7c 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a70:	2320      	movs	r3, #32
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_GPIO_Init+0x1a8>)
 8000a84:	f000 fc70 	bl	8001368 <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	10120000 	.word	0x10120000
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_I2C_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12c      	bne.n	8000b84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4c:	2312      	movs	r3, #18
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <HAL_I2C_MspInit+0x8c>)
 8000b64:	f000 fc00 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a59      	ldr	r2, [pc, #356]	; (8000d1c <HAL_I2S_MspInit+0x184>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d15b      	bne.n	8000c72 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
 8000bbe:	4b58      	ldr	r3, [pc, #352]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a57      	ldr	r2, [pc, #348]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	4b51      	ldr	r3, [pc, #324]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a50      	ldr	r2, [pc, #320]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b4a      	ldr	r3, [pc, #296]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a49      	ldr	r2, [pc, #292]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	483e      	ldr	r0, [pc, #248]	; (8000d24 <HAL_I2S_MspInit+0x18c>)
 8000c2a:	f000 fb9d 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4836      	ldr	r0, [pc, #216]	; (8000d24 <HAL_I2S_MspInit+0x18c>)
 8000c4a:	f000 fb8d 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c60:	2305      	movs	r3, #5
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	482f      	ldr	r0, [pc, #188]	; (8000d28 <HAL_I2S_MspInit+0x190>)
 8000c6c:	f000 fb7c 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c70:	e04f      	b.n	8000d12 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a2d      	ldr	r2, [pc, #180]	; (8000d2c <HAL_I2S_MspInit+0x194>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d14a      	bne.n	8000d12 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_I2S_MspInit+0x188>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <HAL_I2S_MspInit+0x198>)
 8000cec:	f000 fb3c 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cf0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d02:	2306      	movs	r3, #6
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_I2S_MspInit+0x18c>)
 8000d0e:	f000 fb2b 	bl	8001368 <HAL_GPIO_Init>
}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40003800 	.word	0x40003800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020800 	.word	0x40020800
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 fadd 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <HAL_UART_MspInit+0xc0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d14a      	bne.n	8000e7c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <HAL_UART_MspInit+0xc8>)
 8000e58:	f000 fa86 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <HAL_UART_MspInit+0xcc>)
 8000e78:	f000 fa76 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40011000 	.word	0x40011000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8ea 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <OTG_FS_IRQHandler+0x10>)
 8000ef6:	f001 faeb 	bl	80024d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20001828 	.word	0x20001828

08000f04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x50>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x16>
		heap_end = &end;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <_sbrk+0x50>)
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <_sbrk+0x54>)
 8000f18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <_sbrk+0x50>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <_sbrk+0x50>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	466a      	mov	r2, sp
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d907      	bls.n	8000f3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f2e:	f006 ffd7 	bl	8007ee0 <__errno>
 8000f32:	4602      	mov	r2, r0
 8000f34:	230c      	movs	r3, #12
 8000f36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	e006      	b.n	8000f4c <_sbrk+0x48>
	}

	heap_end += incr;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <_sbrk+0x50>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <_sbrk+0x50>)
 8000f48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001fc 	.word	0x200001fc
 8000f58:	20001c38 	.word	0x20001c38

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <SystemInit+0x60>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <SystemInit+0x60>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <SystemInit+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <SystemInit+0x64>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <SystemInit+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <SystemInit+0x64>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <SystemInit+0x64>)
 8000f88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <SystemInit+0x64>)
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <SystemInit+0x68>)
 8000f96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <SystemInit+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <SystemInit+0x64>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SystemInit+0x60>)
 8000fac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb0:	609a      	str	r2, [r3, #8]
#endif
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	24003010 	.word	0x24003010

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fce:	e003      	b.n	8000fd8 <LoopCopyDataInit>

08000fd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fd6:	3104      	adds	r1, #4

08000fd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe0:	d3f6      	bcc.n	8000fd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fe4:	e002      	b.n	8000fec <LoopFillZerobss>

08000fe6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fe6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe8:	f842 3b04 	str.w	r3, [r2], #4

08000fec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff0:	d3f9      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ffb3 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f006 ff79 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fa6d 	bl	80004d8 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001004:	080081b8 	.word	0x080081b8
  ldr  r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800100c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001010:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001014:	20001c34 	.word	0x20001c34

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_Init+0x40>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_Init+0x40>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x40>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f94d 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fd32 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f965 	bl	800134e <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f92d 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000388 	.word	0x20000388

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000388 	.word	0x20000388

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_Delay+0x40>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e159      	b.n	8001638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8148 	bne.w	8001632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x4a>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d123      	bne.n	80013fa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	69b9      	ldr	r1, [r7, #24]
 80013f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0203 	and.w	r2, r3, #3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d00b      	beq.n	800144e <HAL_GPIO_Init+0xe6>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001442:	2b11      	cmp	r3, #17
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b12      	cmp	r3, #18
 800144c:	d130      	bne.n	80014b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001484:	2201      	movs	r2, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f003 0201 	and.w	r2, r3, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a2 	beq.w	8001632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b56      	ldr	r3, [pc, #344]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a55      	ldr	r2, [pc, #340]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_GPIO_Init+0x2e4>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a51      	ldr	r2, [pc, #324]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x202>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1fe>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a46      	ldr	r2, [pc, #280]	; (800165c <HAL_GPIO_Init+0x2f4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a45      	ldr	r2, [pc, #276]	; (8001660 <HAL_GPIO_Init+0x2f8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1f6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a44      	ldr	r2, [pc, #272]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1f2>
 8001556:	2304      	movs	r3, #4
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155a:	2307      	movs	r3, #7
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x204>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4934      	ldr	r1, [pc, #208]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x300>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ae:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d8:	4a23      	ldr	r2, [pc, #140]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_GPIO_Init+0x300>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_GPIO_Init+0x300>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f aea2 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	3724      	adds	r7, #36	; 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	619a      	str	r2, [r3, #24]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e10f      	b.n	80018d2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fa1e 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e4:	f002 fb36 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 80016e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a7b      	ldr	r2, [pc, #492]	; (80018dc <HAL_I2C_Init+0x23c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d807      	bhi.n	8001704 <HAL_I2C_Init+0x64>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <HAL_I2C_Init+0x240>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	bf94      	ite	ls
 80016fc:	2301      	movls	r3, #1
 80016fe:	2300      	movhi	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e006      	b.n	8001712 <HAL_I2C_Init+0x72>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a77      	ldr	r2, [pc, #476]	; (80018e4 <HAL_I2C_Init+0x244>)
 8001708:	4293      	cmp	r3, r2
 800170a:	bf94      	ite	ls
 800170c:	2301      	movls	r3, #1
 800170e:	2300      	movhi	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0db      	b.n	80018d2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a72      	ldr	r2, [pc, #456]	; (80018e8 <HAL_I2C_Init+0x248>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0c9b      	lsrs	r3, r3, #18
 8001724:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a64      	ldr	r2, [pc, #400]	; (80018dc <HAL_I2C_Init+0x23c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d802      	bhi.n	8001754 <HAL_I2C_Init+0xb4>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	e009      	b.n	8001768 <HAL_I2C_Init+0xc8>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	4a63      	ldr	r2, [pc, #396]	; (80018ec <HAL_I2C_Init+0x24c>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	3301      	adds	r3, #1
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	430b      	orrs	r3, r1
 800176e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800177a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4956      	ldr	r1, [pc, #344]	; (80018dc <HAL_I2C_Init+0x23c>)
 8001784:	428b      	cmp	r3, r1
 8001786:	d80d      	bhi.n	80017a4 <HAL_I2C_Init+0x104>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e59      	subs	r1, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fbb1 f3f3 	udiv	r3, r1, r3
 8001796:	3301      	adds	r3, #1
 8001798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179c:	2b04      	cmp	r3, #4
 800179e:	bf38      	it	cc
 80017a0:	2304      	movcc	r3, #4
 80017a2:	e04f      	b.n	8001844 <HAL_I2C_Init+0x1a4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_I2C_Init+0x130>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e012      	b.n	80017f6 <HAL_I2C_Init+0x156>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	0099      	lsls	r1, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x15e>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e022      	b.n	8001844 <HAL_I2C_Init+0x1a4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10e      	bne.n	8001824 <HAL_I2C_Init+0x184>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e58      	subs	r0, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	440b      	add	r3, r1
 8001814:	fbb0 f3f3 	udiv	r3, r0, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	e00f      	b.n	8001844 <HAL_I2C_Init+0x1a4>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	0099      	lsls	r1, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	6809      	ldr	r1, [r1, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6911      	ldr	r1, [r2, #16]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68d2      	ldr	r2, [r2, #12]
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	000186a0 	.word	0x000186a0
 80018e0:	001e847f 	.word	0x001e847f
 80018e4:	003d08ff 	.word	0x003d08ff
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e128      	b.n	8001b54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a90      	ldr	r2, [pc, #576]	; (8001b5c <HAL_I2S_Init+0x26c>)
 800191a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f93b 	bl	8000b98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001938:	f023 030f 	bic.w	r3, r3, #15
 800193c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d060      	beq.n	8001a10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001956:	2310      	movs	r3, #16
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e001      	b.n	8001960 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b20      	cmp	r3, #32
 8001966:	d802      	bhi.n	800196e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800196e:	2001      	movs	r0, #1
 8001970:	f002 fb08 	bl	8003f84 <HAL_RCCEx_GetPeriphCLKFreq>
 8001974:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197e:	d125      	bne.n	80019cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d010      	beq.n	80019aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	3305      	adds	r3, #5
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e01f      	b.n	80019ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	461a      	mov	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	3305      	adds	r3, #5
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00e      	b.n	80019ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	3305      	adds	r3, #5
 80019e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4a5c      	ldr	r2, [pc, #368]	; (8001b60 <HAL_I2S_Init+0x270>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	e003      	b.n	8001a18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d902      	bls.n	8001a24 <HAL_I2S_Init+0x134>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d907      	bls.n	8001a34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e08f      	b.n	8001b54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	ea42 0103 	orr.w	r1, r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a52:	f023 030f 	bic.w	r3, r3, #15
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6851      	ldr	r1, [r2, #4]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6892      	ldr	r2, [r2, #8]
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68d2      	ldr	r2, [r2, #12]
 8001a64:	4311      	orrs	r1, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6992      	ldr	r2, [r2, #24]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d161      	bne.n	8001b44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a38      	ldr	r2, [pc, #224]	; (8001b64 <HAL_I2S_Init+0x274>)
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <HAL_I2S_Init+0x278>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2S_Init+0x1a4>
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <HAL_I2S_Init+0x27c>)
 8001a92:	e001      	b.n	8001a98 <HAL_I2S_Init+0x1a8>
 8001a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4932      	ldr	r1, [pc, #200]	; (8001b68 <HAL_I2S_Init+0x278>)
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_I2S_Init+0x1b8>
 8001aa4:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <HAL_I2S_Init+0x27c>)
 8001aa6:	e001      	b.n	8001aac <HAL_I2S_Init+0x1bc>
 8001aa8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001aac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ab0:	f023 030f 	bic.w	r3, r3, #15
 8001ab4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <HAL_I2S_Init+0x278>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2S_Init+0x1d4>
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_I2S_Init+0x27c>)
 8001ac2:	e001      	b.n	8001ac8 <HAL_I2S_Init+0x1d8>
 8001ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ac8:	2202      	movs	r2, #2
 8001aca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_I2S_Init+0x278>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_I2S_Init+0x1ea>
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_I2S_Init+0x27c>)
 8001ad8:	e001      	b.n	8001ade <HAL_I2S_Init+0x1ee>
 8001ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aea:	d003      	beq.n	8001af4 <HAL_I2S_Init+0x204>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e001      	b.n	8001b00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b16:	4303      	orrs	r3, r0
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_I2S_Init+0x278>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_I2S_Init+0x24c>
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_I2S_Init+0x27c>)
 8001b3a:	e001      	b.n	8001b40 <HAL_I2S_Init+0x250>
 8001b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b40:	897a      	ldrh	r2, [r7, #10]
 8001b42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08001c67 	.word	0x08001c67
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	08001d7d 	.word	0x08001d7d
 8001b68:	40003800 	.word	0x40003800
 8001b6c:	40003400 	.word	0x40003400

08001b70 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	1c9a      	adds	r2, r3, #2
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10e      	bne.n	8001c00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bf0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb8 	bl	8001b70 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	1c9a      	adds	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10e      	bne.n	8001c5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff93 	bl	8001b84 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d13a      	bne.n	8001cf8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d109      	bne.n	8001ca0 <I2S_IRQHandler+0x3a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	2b40      	cmp	r3, #64	; 0x40
 8001c98:	d102      	bne.n	8001ca0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffb4 	bl	8001c08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	d126      	bne.n	8001cf8 <I2S_IRQHandler+0x92>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d11f      	bne.n	8001cf8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0202 	orr.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff50 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d136      	bne.n	8001d72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d109      	bne.n	8001d22 <I2S_IRQHandler+0xbc>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	2b80      	cmp	r3, #128	; 0x80
 8001d1a:	d102      	bne.n	8001d22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff45 	bl	8001bac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d122      	bne.n	8001d72 <I2S_IRQHandler+0x10c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d11b      	bne.n	8001d72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	f043 0204 	orr.w	r2, r3, #4
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff13 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4aa2      	ldr	r2, [pc, #648]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d96:	4ba2      	ldr	r3, [pc, #648]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d98:	e001      	b.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a9b      	ldr	r2, [pc, #620]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001db4:	4b9a      	ldr	r3, [pc, #616]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001db6:	e001      	b.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc8:	d004      	beq.n	8001dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8099 	bne.w	8001f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d107      	bne.n	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f925 	bl	8002038 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9c8 	bl	8002198 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d13a      	bne.n	8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d035      	beq.n	8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a7e      	ldr	r2, [pc, #504]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e26:	4b7e      	ldr	r3, [pc, #504]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e28:	e001      	b.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4979      	ldr	r1, [pc, #484]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e36:	428b      	cmp	r3, r1
 8001e38:	d101      	bne.n	8001e3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e3a:	4b79      	ldr	r3, [pc, #484]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e3c:	e001      	b.n	8001e42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0202 	orr.w	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fe88 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	f040 80be 	bne.w	8002010 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80b8 	beq.w	8002010 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a59      	ldr	r2, [pc, #356]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001eba:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ebc:	e001      	b.n	8001ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4954      	ldr	r1, [pc, #336]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eca:	428b      	cmp	r3, r1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ece:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ed0:	e001      	b.n	8001ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eda:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe4a 	bl	8001b98 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f04:	e084      	b.n	8002010 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d107      	bne.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8be 	bl	800209c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8fd 	bl	8002134 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d12f      	bne.n	8001fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02a      	beq.n	8001fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f6a:	e001      	b.n	8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4929      	ldr	r1, [pc, #164]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f78:	428b      	cmp	r3, r1
 8001f7a:	d101      	bne.n	8001f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f7e:	e001      	b.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fdfa 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d131      	bne.n	8002012 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02c      	beq.n	8002012 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fc4:	e001      	b.n	8001fca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4912      	ldr	r1, [pc, #72]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	d101      	bne.n	8001fda <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fd8:	e001      	b.n	8001fde <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fe2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ff2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f043 0204 	orr.w	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fdc5 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800200e:	e000      	b.n	8002012 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002010:	bf00      	nop
}
 8002012:	bf00      	nop
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40003800 	.word	0x40003800
 8002020:	40003400 	.word	0x40003400

08002024 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	1c99      	adds	r1, r3, #2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6251      	str	r1, [r2, #36]	; 0x24
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d113      	bne.n	8002092 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002078:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ffc9 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c99      	adds	r1, r3, #2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6251      	str	r1, [r2, #36]	; 0x24
 80020ae:	8819      	ldrh	r1, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <I2SEx_TxISR_I2SExt+0x90>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <I2SEx_TxISR_I2SExt+0x22>
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <I2SEx_TxISR_I2SExt+0x94>)
 80020bc:	e001      	b.n	80020c2 <I2SEx_TxISR_I2SExt+0x26>
 80020be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020c2:	460a      	mov	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d121      	bne.n	8002122 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <I2SEx_TxISR_I2SExt+0x90>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d101      	bne.n	80020ec <I2SEx_TxISR_I2SExt+0x50>
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <I2SEx_TxISR_I2SExt+0x94>)
 80020ea:	e001      	b.n	80020f0 <I2SEx_TxISR_I2SExt+0x54>
 80020ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	490d      	ldr	r1, [pc, #52]	; (800212c <I2SEx_TxISR_I2SExt+0x90>)
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d101      	bne.n	8002100 <I2SEx_TxISR_I2SExt+0x64>
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <I2SEx_TxISR_I2SExt+0x94>)
 80020fe:	e001      	b.n	8002104 <I2SEx_TxISR_I2SExt+0x68>
 8002100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff81 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40003800 	.word	0x40003800
 8002130:	40003400 	.word	0x40003400

08002134 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68d8      	ldr	r0, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	1c99      	adds	r1, r3, #2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800214c:	b282      	uxth	r2, r0
 800214e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002176:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ff4a 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a20      	ldr	r2, [pc, #128]	; (8002228 <I2SEx_RxISR_I2SExt+0x90>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <I2SEx_RxISR_I2SExt+0x16>
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <I2SEx_RxISR_I2SExt+0x94>)
 80021ac:	e001      	b.n	80021b2 <I2SEx_RxISR_I2SExt+0x1a>
 80021ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b2:	68d8      	ldr	r0, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	1c99      	adds	r1, r3, #2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021be:	b282      	uxth	r2, r0
 80021c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <I2SEx_RxISR_I2SExt+0x90>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <I2SEx_RxISR_I2SExt+0x50>
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <I2SEx_RxISR_I2SExt+0x94>)
 80021e6:	e001      	b.n	80021ec <I2SEx_RxISR_I2SExt+0x54>
 80021e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	490d      	ldr	r1, [pc, #52]	; (8002228 <I2SEx_RxISR_I2SExt+0x90>)
 80021f4:	428b      	cmp	r3, r1
 80021f6:	d101      	bne.n	80021fc <I2SEx_RxISR_I2SExt+0x64>
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <I2SEx_RxISR_I2SExt+0x94>)
 80021fa:	e001      	b.n	8002200 <I2SEx_RxISR_I2SExt+0x68>
 80021fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002200:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002204:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff03 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40003800 	.word	0x40003800
 800222c:	40003400 	.word	0x40003400

08002230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	b08f      	sub	sp, #60	; 0x3c
 8002234:	af0a      	add	r7, sp, #40	; 0x28
 8002236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e10f      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f005 fb3b 	bl	80078d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fc36 	bl	8004af2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	687e      	ldr	r6, [r7, #4]
 800228e:	466d      	mov	r5, sp
 8002290:	f106 0410 	add.w	r4, r6, #16
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a4:	1d33      	adds	r3, r6, #4
 80022a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f002 fb0d 	bl	80048c8 <USB_CoreInit>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d0      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fc24 	bl	8004b14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e04a      	b.n	8002368 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	333d      	adds	r3, #61	; 0x3d
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	333c      	adds	r3, #60	; 0x3c
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b298      	uxth	r0, r3
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3342      	adds	r3, #66	; 0x42
 800230e:	4602      	mov	r2, r0
 8002310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	333f      	adds	r3, #63	; 0x3f
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3344      	adds	r3, #68	; 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3348      	adds	r3, #72	; 0x48
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3350      	adds	r3, #80	; 0x50
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3301      	adds	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d3af      	bcc.n	80022d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e044      	b.n	8002402 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	3301      	adds	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d3b5      	bcc.n	8002378 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	687e      	ldr	r6, [r7, #4]
 8002414:	466d      	mov	r5, sp
 8002416:	f106 0410 	add.w	r4, r6, #16
 800241a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002426:	e885 0003 	stmia.w	r5, {r0, r1}
 800242a:	1d33      	adds	r3, r6, #4
 800242c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f002 fb9a 	bl	8004b68 <USB_DevInit>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00d      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fb8f 	bl	8005b7e <USB_DevDisconnect>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_PCD_Start+0x1c>
 8002482:	2302      	movs	r3, #2
 8002484:	e020      	b.n	80024c8 <HAL_PCD_Start+0x5e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	2b01      	cmp	r3, #1
 8002494:	d109      	bne.n	80024aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fb4d 	bl	8005b4e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fb09 	bl	8004ad0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b08d      	sub	sp, #52	; 0x34
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fbf4 	bl	8005cd4 <USB_GetMode>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 838e 	bne.w	8002c10 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fb58 	bl	8005bae <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8384 	beq.w	8002c0e <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fb4f 	bl	8005bae <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d107      	bne.n	800252a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f002 0202 	and.w	r2, r2, #2
 8002528:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fb3d 	bl	8005bae <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800253e:	d17b      	bne.n	8002638 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f003 fb43 	bl	8005bd4 <USB_ReadDevAllOutEpInterrupt>
 800254e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002550:	e06f      	b.n	8002632 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d064      	beq.n	8002626 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fb68 	bl	8005c3c <USB_ReadDevOutEPInterrupt>
 800256c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002584:	461a      	mov	r2, r3
 8002586:	2301      	movs	r3, #1
 8002588:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800258a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fe0d 	bl	80031ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800259c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 ff0c 	bl	80033bc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b0:	461a      	mov	r2, r3
 80025b2:	2308      	movs	r3, #8
 80025b4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	2310      	movs	r3, #16
 80025d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d108      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025ee:	461a      	mov	r2, r3
 80025f0:	2101      	movs	r1, #1
 80025f2:	f003 fbb3 	bl	8005d5c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002602:	461a      	mov	r2, r3
 8002604:	2320      	movs	r3, #32
 8002606:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800261e:	461a      	mov	r2, r3
 8002620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002624:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d18c      	bne.n	8002552 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fab6 	bl	8005bae <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800264c:	f040 80c4 	bne.w	80027d8 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fad7 	bl	8005c08 <USB_ReadDevAllInEpInterrupt>
 800265a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002660:	e0b6      	b.n	80027d0 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80ab 	beq.w	80027c4 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fafd 	bl	8005c78 <USB_ReadDevInEPInterrupt>
 800267e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d05b      	beq.n	8002742 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	2201      	movs	r2, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69f9      	ldr	r1, [r7, #28]
 80026a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026aa:	4013      	ands	r3, r2
 80026ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ba:	461a      	mov	r2, r3
 80026bc:	2301      	movs	r3, #1
 80026be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d11b      	bne.n	8002700 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3348      	adds	r3, #72	; 0x48
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4403      	add	r3, r0
 80026e8:	3344      	adds	r3, #68	; 0x44
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4419      	add	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4403      	add	r3, r0
 80026fc:	3348      	adds	r3, #72	; 0x48
 80026fe:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f005 f975 	bl	80079f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d116      	bne.n	8002742 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2b00      	cmp	r3, #0
 8002718:	d113      	bne.n	8002742 <HAL_PCD_IRQHandler+0x272>
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3350      	adds	r3, #80	; 0x50
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d108      	bne.n	8002742 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800273a:	461a      	mov	r2, r3
 800273c:	2101      	movs	r1, #1
 800273e:	f003 fb0d 	bl	8005d5c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002758:	461a      	mov	r2, r3
 800275a:	2308      	movs	r3, #8
 800275c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002774:	461a      	mov	r2, r3
 8002776:	2310      	movs	r3, #16
 8002778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002790:	461a      	mov	r2, r3
 8002792:	2340      	movs	r3, #64	; 0x40
 8002794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ac:	461a      	mov	r2, r3
 80027ae:	2302      	movs	r3, #2
 80027b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fc67 	bl	8003092 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	3301      	adds	r3, #1
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f47f af45 	bne.w	8002662 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 f9e6 	bl	8005bae <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ec:	d122      	bne.n	8002834 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002808:	2b01      	cmp	r3, #1
 800280a:	d108      	bne.n	800281e <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002814:	2100      	movs	r1, #0
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fe88 	bl	800352c <HAL_PCDEx_LPM_Callback>
 800281c:	e002      	b.n	8002824 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f005 f956 	bl	8007ad0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f003 f9b8 	bl	8005bae <USB_ReadInterrupts>
 800283e:	4603      	mov	r3, r0
 8002840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002848:	d112      	bne.n	8002870 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f005 f912 	bl	8007a84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800286e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 f99a 	bl	8005bae <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	f040 80a7 	bne.w	80029d6 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2110      	movs	r1, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fad2 	bl	8004e4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ac:	e036      	b.n	800291c <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ba:	461a      	mov	r2, r3
 80028bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d2:	0151      	lsls	r1, r2, #5
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	440a      	add	r2, r1
 80028d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ee:	461a      	mov	r2, r3
 80028f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002906:	0151      	lsls	r1, r2, #5
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	440a      	add	r2, r1
 800290c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002914:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	3301      	adds	r3, #1
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002922:	429a      	cmp	r2, r3
 8002924:	d3c3      	bcc.n	80028ae <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002934:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002938:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	2b00      	cmp	r3, #0
 8002940:	d016      	beq.n	8002970 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002952:	f043 030b 	orr.w	r3, r3, #11
 8002956:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002968:	f043 030b 	orr.w	r3, r3, #11
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	e015      	b.n	800299c <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002982:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002986:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002996:	f043 030b 	orr.w	r3, r3, #11
 800299a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029c0:	461a      	mov	r2, r3
 80029c2:	f003 f9cb 	bl	8005d5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 f8e7 	bl	8005bae <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ea:	d124      	bne.n	8002a36 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 f97d 	bl	8005cf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fa87 	bl	8004f0e <USB_GetDevSpeed>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681c      	ldr	r4, [r3, #0]
 8002a0c:	f001 f996 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8002a10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f001 ffb6 	bl	800498c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f005 f810 	bl	8007a46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 f8b7 	bl	8005bae <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d161      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0210 	bic.w	r2, r2, #16
 8002a58:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f003 020f 	and.w	r2, r3, #15
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	0c5b      	lsrs	r3, r3, #17
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d124      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d035      	beq.n	8002afe <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6a38      	ldr	r0, [r7, #32]
 8002aa6:	f002 ff2f 	bl	8005908 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab6:	441a      	add	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac8:	441a      	add	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	619a      	str	r2, [r3, #24]
 8002ace:	e016      	b.n	8002afe <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	0c5b      	lsrs	r3, r3, #17
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d110      	bne.n	8002afe <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6a38      	ldr	r0, [r7, #32]
 8002ae8:	f002 ff0e 	bl	8005908 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af8:	441a      	add	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0210 	orr.w	r2, r2, #16
 8002b0c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 f84b 	bl	8005bae <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d10a      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f004 ff81 	bl	8007a2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 0208 	and.w	r2, r2, #8
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 f836 	bl	8005bae <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4c:	d10f      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f004 ffd9 	bl	8007b10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 f81b 	bl	8005bae <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b82:	d10f      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f004 ffac 	bl	8007aec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 f800 	bl	8005bae <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f004 ffba 	bl	8007b34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 ffea 	bl	8005bae <USB_ReadInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d115      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f004 ffaa 	bl	8007b50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	e000      	b.n	8002c10 <HAL_PCD_IRQHandler+0x740>
      return;
 8002c0e:	bf00      	nop
    }
  }
}
 8002c10:	3734      	adds	r7, #52	; 0x34
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}

08002c16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_PCD_SetAddress+0x1a>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e013      	b.n	8002c58 <HAL_PCD_SetAddress+0x42>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 ff5a 	bl	8005b02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	70fb      	strb	r3, [r7, #3]
 8002c72:	460b      	mov	r3, r1
 8002c74:	803b      	strh	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da0f      	bge.n	8002ca6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3338      	adds	r3, #56	; 0x38
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	705a      	strb	r2, [r3, #1]
 8002ca4:	e00f      	b.n	8002cc6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 020f 	and.w	r2, r3, #15
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cd2:	883a      	ldrh	r2, [r7, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	78ba      	ldrb	r2, [r7, #2]
 8002cdc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cf0:	78bb      	ldrb	r3, [r7, #2]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d102      	bne.n	8002cfc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_PCD_EP_Open+0xaa>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e00e      	b.n	8002d28 <HAL_PCD_EP_Open+0xc8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 f91d 	bl	8004f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d26:	7afb      	ldrb	r3, [r7, #11]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da0f      	bge.n	8002d64 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3338      	adds	r3, #56	; 0x38
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	705a      	strb	r2, [r3, #1]
 8002d62:	e00f      	b.n	8002d84 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 020f 	and.w	r2, r3, #15
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_PCD_EP_Close+0x6e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e00e      	b.n	8002dbc <HAL_PCD_EP_Close+0x8c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68f9      	ldr	r1, [r7, #12]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 f95b 	bl	8005068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
 8002dd6:	f003 020f 	and.w	r2, r3, #15
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e20:	7afb      	ldrb	r3, [r7, #11]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	f002 fbde 	bl	80055f8 <USB_EP0StartXfer>
 8002e3c:	e008      	b.n	8002e50 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6979      	ldr	r1, [r7, #20]
 8002e4c:	f002 f990 	bl	8005170 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e7c:	681b      	ldr	r3, [r3, #0]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	460b      	mov	r3, r1
 8002e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6979      	ldr	r1, [r7, #20]
 8002efc:	f002 fb7c 	bl	80055f8 <USB_EP0StartXfer>
 8002f00:	e008      	b.n	8002f14 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6979      	ldr	r1, [r7, #20]
 8002f10:	f002 f92e 	bl	8005170 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d901      	bls.n	8002f3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e050      	b.n	8002fde <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da0f      	bge.n	8002f64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3338      	adds	r3, #56	; 0x38
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	705a      	strb	r2, [r3, #1]
 8002f62:	e00d      	b.n	8002f80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_PCD_EP_SetStall+0x82>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e01e      	b.n	8002fde <HAL_PCD_EP_SetStall+0xc0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68f9      	ldr	r1, [r7, #12]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fcd3 	bl	800595a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	b2d9      	uxtb	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f002 fec4 	bl	8005d5c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d901      	bls.n	8003004 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e042      	b.n	800308a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da0f      	bge.n	800302c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	705a      	strb	r2, [r3, #1]
 800302a:	e00f      	b.n	800304c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 020f 	and.w	r2, r3, #15
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_PCD_EP_ClrStall+0x86>
 8003068:	2302      	movs	r3, #2
 800306a:	e00e      	b.n	800308a <HAL_PCD_EP_ClrStall+0xa4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fcdb 	bl	8005a36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b08a      	sub	sp, #40	; 0x28
 8003096:	af02      	add	r7, sp, #8
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3338      	adds	r3, #56	; 0x38
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d901      	bls.n	80030ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06c      	b.n	80031a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d902      	bls.n	80030e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3303      	adds	r3, #3
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ee:	e02b      	b.n	8003148 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	429a      	cmp	r2, r3
 8003104:	d902      	bls.n	800310c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3303      	adds	r3, #3
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68d9      	ldr	r1, [r3, #12]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003124:	b2db      	uxtb	r3, r3
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	4603      	mov	r3, r0
 800312a:	6978      	ldr	r0, [r7, #20]
 800312c:	f002 fbb7 	bl	800589e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	441a      	add	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	441a      	add	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	b29b      	uxth	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	429a      	cmp	r2, r3
 800315c:	d809      	bhi.n	8003172 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003166:	429a      	cmp	r2, r3
 8003168:	d203      	bcs.n	8003172 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1be      	bne.n	80030f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	429a      	cmp	r2, r3
 800317c:	d811      	bhi.n	80031a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	2201      	movs	r2, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	43db      	mvns	r3, r3
 8003198:	6939      	ldr	r1, [r7, #16]
 800319a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800319e:	4013      	ands	r3, r2
 80031a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	333c      	adds	r3, #60	; 0x3c
 80031c4:	3304      	adds	r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	f040 80b3 	bne.w	800334a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d028      	beq.n	8003240 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a70      	ldr	r2, [pc, #448]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x208>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d90e      	bls.n	8003214 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003212:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f004 fbc1 	bl	800799c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003224:	461a      	mov	r2, r3
 8003226:	2101      	movs	r1, #1
 8003228:	f002 fd98 	bl	8005d5c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	2308      	movs	r3, #8
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	e0b3      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	2320      	movs	r3, #32
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e0a4      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 809f 	bne.w	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x208>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d90f      	bls.n	8003292 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e08a      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032a4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	0159      	lsls	r1, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032b8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4403      	add	r3, r0
 80032c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032cc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4403      	add	r3, r0
 80032f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4419      	add	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4403      	add	r3, r0
 8003306:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800330a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f004 fb54 	bl	80079c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d144      	bne.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d138      	bne.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003340:	461a      	mov	r2, r3
 8003342:	2101      	movs	r1, #1
 8003344:	f002 fd0a 	bl	8005d5c <USB_EP0_OutStart>
 8003348:	e02e      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d124      	bne.n	800339c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	e01a      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	461a      	mov	r2, r3
 800338a:	2320      	movs	r3, #32
 800338c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f004 fb13 	bl	80079c0 <HAL_PCD_DataOutStageCallback>
 800339a:	e005      	b.n	80033a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f004 fb0c 	bl	80079c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	4f54300a 	.word	0x4f54300a
 80033b8:	4f54310a 	.word	0x4f54310a

080033bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	3304      	adds	r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d113      	bne.n	800341a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <PCD_EP_OutSetupPacket_int+0xb8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d922      	bls.n	8003440 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01d      	beq.n	8003440 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003416:	6093      	str	r3, [r2, #8]
 8003418:	e012      	b.n	8003440 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <PCD_EP_OutSetupPacket_int+0xbc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10e      	bne.n	8003440 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	461a      	mov	r2, r3
 800343a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f004 faab 	bl	800799c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <PCD_EP_OutSetupPacket_int+0xb8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d90c      	bls.n	8003468 <PCD_EP_OutSetupPacket_int+0xac>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003460:	461a      	mov	r2, r3
 8003462:	2101      	movs	r1, #1
 8003464:	f002 fc7a 	bl	8005d5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	4f54300a 	.word	0x4f54300a
 8003478:	4f54310a 	.word	0x4f54310a

0800347c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
 8003488:	4613      	mov	r3, r2
 800348a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800349a:	883b      	ldrh	r3, [r7, #0]
 800349c:	0419      	lsls	r1, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
 80034a8:	e028      	b.n	80034fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e00d      	b.n	80034da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	3340      	adds	r3, #64	; 0x40
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4413      	add	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3301      	adds	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	3b01      	subs	r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3ec      	bcc.n	80034be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034e4:	883b      	ldrh	r3, [r7, #0]
 80034e6:	0418      	lsls	r0, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4302      	orrs	r2, r0
 80034f4:	3340      	adds	r3, #64	; 0x40
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e22d      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d075      	beq.n	800364e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	4ba3      	ldr	r3, [pc, #652]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b04      	cmp	r3, #4
 800356c:	d00c      	beq.n	8003588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4ba0      	ldr	r3, [pc, #640]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003576:	2b08      	cmp	r3, #8
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b9d      	ldr	r3, [pc, #628]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b99      	ldr	r3, [pc, #612]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d157      	bne.n	800364c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e208      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x74>
 80035aa:	4b91      	ldr	r3, [pc, #580]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a90      	ldr	r2, [pc, #576]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x98>
 80035c2:	4b8b      	ldr	r3, [pc, #556]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a8a      	ldr	r2, [pc, #552]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b88      	ldr	r3, [pc, #544]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a87      	ldr	r2, [pc, #540]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035dc:	4b84      	ldr	r3, [pc, #528]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a83      	ldr	r2, [pc, #524]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b81      	ldr	r3, [pc, #516]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a80      	ldr	r2, [pc, #512]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fd74 	bl	80010e8 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003604:	f7fd fd70 	bl	80010e8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1cd      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b76      	ldr	r3, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xc0>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fd fd60 	bl	80010e8 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362c:	f7fd fd5c 	bl	80010e8 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1b9      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0xe8>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003666:	4b62      	ldr	r3, [pc, #392]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e18d      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b56      	ldr	r3, [pc, #344]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4952      	ldr	r1, [pc, #328]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	e03a      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <HAL_RCC_OscConfig+0x2b0>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fd15 	bl	80010e8 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fd fd11 	bl	80010e8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e16e      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4940      	ldr	r1, [pc, #256]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_RCC_OscConfig+0x2b0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd fcf4 	bl	80010e8 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003704:	f7fd fcf0 	bl	80010e8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e14d      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d030      	beq.n	8003790 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCC_OscConfig+0x2b4>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd fcd4 	bl	80010e8 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003744:	f7fd fcd0 	bl	80010e8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e12d      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x200>
 8003762:	e015      	b.n	8003790 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_OscConfig+0x2b4>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376a:	f7fd fcbd 	bl	80010e8 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003772:	f7fd fcb9 	bl	80010e8 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e116      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a0 	beq.w	80038de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x2b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d121      	bne.n	800381e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_RCC_OscConfig+0x2b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_RCC_OscConfig+0x2b8>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fd fc7f 	bl	80010e8 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	e011      	b.n	8003812 <HAL_RCC_OscConfig+0x2ce>
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	42470000 	.word	0x42470000
 80037f8:	42470e80 	.word	0x42470e80
 80037fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fd fc72 	bl	80010e8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0cf      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCC_OscConfig+0x478>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x2f0>
 8003826:	4b66      	ldr	r3, [pc, #408]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	e01c      	b.n	800386e <HAL_RCC_OscConfig+0x32a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x312>
 800383c:	4b60      	ldr	r3, [pc, #384]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a5f      	ldr	r2, [pc, #380]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	4b5d      	ldr	r3, [pc, #372]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a5c      	ldr	r2, [pc, #368]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
 8003854:	e00b      	b.n	800386e <HAL_RCC_OscConfig+0x32a>
 8003856:	4b5a      	ldr	r3, [pc, #360]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a59      	ldr	r2, [pc, #356]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a56      	ldr	r2, [pc, #344]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 8003868:	f023 0304 	bic.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fd fc37 	bl	80010e8 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fd fc33 	bl	80010e8 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e08e      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	4b4a      	ldr	r3, [pc, #296]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ee      	beq.n	800387e <HAL_RCC_OscConfig+0x33a>
 80038a0:	e014      	b.n	80038cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fd fc21 	bl	80010e8 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fd fc1d 	bl	80010e8 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e078      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ee      	bne.n	80038aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d2:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a3a      	ldr	r2, [pc, #232]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 80038d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d064      	beq.n	80039b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e6:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d05c      	beq.n	80039ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d141      	bne.n	800397e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <HAL_RCC_OscConfig+0x480>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fbf2 	bl	80010e8 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003908:	f7fd fbee 	bl	80010e8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e04b      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	491d      	ldr	r1, [pc, #116]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <HAL_RCC_OscConfig+0x480>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fd fbc7 	bl	80010e8 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7fd fbc3 	bl	80010e8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e020      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x41a>
 800397c:	e018      	b.n	80039b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_RCC_OscConfig+0x480>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fbb0 	bl	80010e8 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398c:	f7fd fbac 	bl	80010e8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e009      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_RCC_OscConfig+0x47c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x448>
 80039aa:	e001      	b.n	80039b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40007000 	.word	0x40007000
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470060 	.word	0x42470060

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0ca      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b67      	ldr	r3, [pc, #412]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d90c      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b64      	ldr	r3, [pc, #400]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b62      	ldr	r3, [pc, #392]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0b6      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b58      	ldr	r3, [pc, #352]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a51      	ldr	r2, [pc, #324]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494c      	ldr	r1, [pc, #304]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d044      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07d      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06d      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e065      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4933      	ldr	r1, [pc, #204]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab8:	f7fd fb16 	bl	80010e8 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fd fb12 	bl	80010e8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e04d      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d20c      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e030      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4915      	ldr	r1, [pc, #84]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	490d      	ldr	r1, [pc, #52]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4e:	f000 f81d 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b52:	4601      	mov	r1, r0
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	5cd3      	ldrb	r3, [r2, r3]
 8003b62:	fa21 f303 	lsr.w	r3, r1, r3
 8003b66:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fd fa78 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00
 8003b80:	40023800 	.word	0x40023800
 8003b84:	08008190 	.word	0x08008190
 8003b88:	20000000 	.word	0x20000000

08003b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba2:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d007      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x32>
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d008      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x38>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 80b4 	bne.w	8003d20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b5e      	ldr	r3, [pc, #376]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bba:	60bb      	str	r3, [r7, #8]
       break;
 8003bbc:	e0b3      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bbe:	4b5e      	ldr	r3, [pc, #376]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003bc0:	60bb      	str	r3, [r7, #8]
      break;
 8003bc2:	e0b0      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bce:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04a      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	f04f 0400 	mov.w	r4, #0
 8003be4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	ea03 0501 	and.w	r5, r3, r1
 8003bf0:	ea04 0602 	and.w	r6, r4, r2
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4632      	mov	r2, r6
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f04f 0400 	mov.w	r4, #0
 8003c00:	0154      	lsls	r4, r2, #5
 8003c02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c06:	014b      	lsls	r3, r1, #5
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	1b49      	subs	r1, r1, r5
 8003c0e:	eb62 0206 	sbc.w	r2, r2, r6
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	f04f 0400 	mov.w	r4, #0
 8003c1a:	0194      	lsls	r4, r2, #6
 8003c1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c20:	018b      	lsls	r3, r1, #6
 8003c22:	1a5b      	subs	r3, r3, r1
 8003c24:	eb64 0402 	sbc.w	r4, r4, r2
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	00e2      	lsls	r2, r4, #3
 8003c32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c36:	00d9      	lsls	r1, r3, #3
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	195b      	adds	r3, r3, r5
 8003c3e:	eb44 0406 	adc.w	r4, r4, r6
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	0262      	lsls	r2, r4, #9
 8003c4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c50:	0259      	lsls	r1, r3, #9
 8003c52:	460b      	mov	r3, r1
 8003c54:	4614      	mov	r4, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	4621      	mov	r1, r4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f04f 0400 	mov.w	r4, #0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	f7fc fab8 	bl	80001d8 <__aeabi_uldivmod>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	e049      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	f04f 0400 	mov.w	r4, #0
 8003c7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	ea03 0501 	and.w	r5, r3, r1
 8003c86:	ea04 0602 	and.w	r6, r4, r2
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	0154      	lsls	r4, r2, #5
 8003c98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c9c:	014b      	lsls	r3, r1, #5
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	1b49      	subs	r1, r1, r5
 8003ca4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	f04f 0400 	mov.w	r4, #0
 8003cb0:	0194      	lsls	r4, r2, #6
 8003cb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cb6:	018b      	lsls	r3, r1, #6
 8003cb8:	1a5b      	subs	r3, r3, r1
 8003cba:	eb64 0402 	sbc.w	r4, r4, r2
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	00e2      	lsls	r2, r4, #3
 8003cc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ccc:	00d9      	lsls	r1, r3, #3
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	195b      	adds	r3, r3, r5
 8003cd4:	eb44 0406 	adc.w	r4, r4, r6
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	02a2      	lsls	r2, r4, #10
 8003ce2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ce6:	0299      	lsls	r1, r3, #10
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4614      	mov	r4, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	4621      	mov	r1, r4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	f7fc fa6d 	bl	80001d8 <__aeabi_uldivmod>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	60bb      	str	r3, [r7, #8]
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d22:	60bb      	str	r3, [r7, #8]
      break;
 8003d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d26:	68bb      	ldr	r3, [r7, #8]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000000 	.word	0x20000000

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4601      	mov	r1, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4a03      	ldr	r2, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	080081a0 	.word	0x080081a0

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4601      	mov	r1, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	080081a0 	.word	0x080081a0

08003da4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d038      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dcc:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dd2:	f7fd f989 	bl	80010e8 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dda:	f7fd f985 	bl	80010e8 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0bd      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	019b      	lsls	r3, r3, #6
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	071b      	lsls	r3, r3, #28
 8003e0a:	495a      	ldr	r1, [pc, #360]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e12:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e18:	f7fd f966 	bl	80010e8 <HAL_GetTick>
 8003e1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e20:	f7fd f962 	bl	80010e8 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e09a      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e32:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8083 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	4b48      	ldr	r3, [pc, #288]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	4a47      	ldr	r2, [pc, #284]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e68:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a42      	ldr	r2, [pc, #264]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fd f938 	bl	80010e8 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fd f934 	bl	80010e8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e06c      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e8e:	4b3a      	ldr	r3, [pc, #232]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e9a:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02f      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d028      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec8:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed4:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d114      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd f902 	bl	80010e8 <HAL_GetTick>
 8003ee4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd f8fe 	bl	80010e8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e034      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ee      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	4911      	ldr	r1, [pc, #68]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
 8003f32:	e005      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003f34:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f3e:	6093      	str	r3, [r2, #8]
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4c:	4909      	ldr	r1, [pc, #36]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7d1a      	ldrb	r2, [r3, #20]
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003f64:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	42470068 	.word	0x42470068
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	42470e40 	.word	0x42470e40
 8003f80:	424711e0 	.word	0x424711e0

08003f84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d13f      	bne.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003fa2:	4b23      	ldr	r3, [pc, #140]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003faa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d131      	bne.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fb6:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fb8:	617b      	str	r3, [r7, #20]
          break;
 8003fba:	e031      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc8:	d109      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd4:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400a:	0f1b      	lsrs	r3, r3, #28
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
          break;
 8004018:	e002      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
          break;
 800401e:	bf00      	nop
        }
      }
      break;
 8004020:	bf00      	nop
    }
  }
  return frequency;
 8004022:	697b      	ldr	r3, [r7, #20]
}
 8004024:	4618      	mov	r0, r3
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40023800 	.word	0x40023800
 8004034:	00bb8000 	.word	0x00bb8000
 8004038:	007a1200 	.word	0x007a1200
 800403c:	00f42400 	.word	0x00f42400

08004040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e056      	b.n	8004100 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fc fe61 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004088:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	ea42 0103 	orr.w	r1, r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	f003 0104 	and.w	r1, r3, #4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e03f      	b.n	800419a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fc fe48 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800414a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f9b1 	bl	80044b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b088      	sub	sp, #32
 80041a6:	af02      	add	r7, sp, #8
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	f040 8083 	bne.w	80042ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_UART_Transmit+0x2e>
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e07b      	b.n	80042cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Transmit+0x40>
 80041de:	2302      	movs	r3, #2
 80041e0:	e074      	b.n	80042cc <HAL_UART_Transmit+0x12a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2221      	movs	r2, #33	; 0x21
 80041f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041f8:	f7fc ff76 	bl	80010e8 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800420a:	e042      	b.n	8004292 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004222:	d122      	bne.n	800426a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f8f6 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e046      	b.n	80042cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004250:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3302      	adds	r3, #2
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	e017      	b.n	8004292 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3301      	adds	r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	e013      	b.n	8004292 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f8d3 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e023      	b.n	80042cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	60ba      	str	r2, [r7, #8]
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1b7      	bne.n	800420c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2140      	movs	r1, #64	; 0x40
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f8ba 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00a      	b.n	80042cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	f040 8090 	bne.w	8004416 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_UART_Receive+0x2e>
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e088      	b.n	8004418 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_UART_Receive+0x40>
 8004310:	2302      	movs	r3, #2
 8004312:	e081      	b.n	8004418 <HAL_UART_Receive+0x144>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2222      	movs	r2, #34	; 0x22
 8004326:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800432a:	f7fc fedd 	bl	80010e8 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800433c:	e05c      	b.n	80043f8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	d12b      	bne.n	80043ae <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2120      	movs	r1, #32
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f85d 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e053      	b.n	8004418 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10c      	bne.n	8004396 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004388:	b29a      	uxth	r2, r3
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3302      	adds	r3, #2
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	e030      	b.n	80043f8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	b29b      	uxth	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	e024      	b.n	80043f8 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2120      	movs	r1, #32
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f831 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e027      	b.n	8004418 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	60ba      	str	r2, [r7, #8]
 80043dc:	b2ca      	uxtb	r2, r1
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e00a      	b.n	80043f8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d19d      	bne.n	800433e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004430:	e02c      	b.n	800448c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d028      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x30>
 8004440:	f7fc fe52 	bl	80010e8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	429a      	cmp	r2, r3
 800444e:	d21d      	bcs.n	800448c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800445e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e00f      	b.n	80044ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d0c3      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b4:	b5b0      	push	{r4, r5, r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80044f4:	f023 030c 	bic.w	r3, r3, #12
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	68f9      	ldr	r1, [r7, #12]
 80044fe:	430b      	orrs	r3, r1
 8004500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	f040 80e4 	bne.w	80046ec <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4aab      	ldr	r2, [pc, #684]	; (80047d8 <UART_SetConfig+0x324>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <UART_SetConfig+0x84>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4aaa      	ldr	r2, [pc, #680]	; (80047dc <UART_SetConfig+0x328>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d16c      	bne.n	8004612 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004538:	f7ff fc20 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 800453c:	4602      	mov	r2, r0
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009a      	lsls	r2, r3, #2
 8004546:	441a      	add	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	4aa3      	ldr	r2, [pc, #652]	; (80047e0 <UART_SetConfig+0x32c>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	011c      	lsls	r4, r3, #4
 800455c:	f7ff fc0e 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004560:	4602      	mov	r2, r0
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009a      	lsls	r2, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fbb2 f5f3 	udiv	r5, r2, r3
 8004576:	f7ff fc01 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 800457a:	4602      	mov	r2, r0
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009a      	lsls	r2, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	4a93      	ldr	r2, [pc, #588]	; (80047e0 <UART_SetConfig+0x32c>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2264      	movs	r2, #100	; 0x64
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	1aeb      	subs	r3, r5, r3
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	3332      	adds	r3, #50	; 0x32
 80045a4:	4a8e      	ldr	r2, [pc, #568]	; (80047e0 <UART_SetConfig+0x32c>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b2:	441c      	add	r4, r3
 80045b4:	f7ff fbe2 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009a      	lsls	r2, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80045ce:	f7ff fbd5 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009a      	lsls	r2, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	4a7d      	ldr	r2, [pc, #500]	; (80047e0 <UART_SetConfig+0x32c>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2264      	movs	r2, #100	; 0x64
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	1aeb      	subs	r3, r5, r3
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	3332      	adds	r3, #50	; 0x32
 80045fc:	4a78      	ldr	r2, [pc, #480]	; (80047e0 <UART_SetConfig+0x32c>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	f003 0207 	and.w	r2, r3, #7
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4422      	add	r2, r4
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	e154      	b.n	80048bc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004612:	f7ff fb9f 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004616:	4602      	mov	r2, r0
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009a      	lsls	r2, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	4a6c      	ldr	r2, [pc, #432]	; (80047e0 <UART_SetConfig+0x32c>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	011c      	lsls	r4, r3, #4
 8004636:	f7ff fb8d 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 800463a:	4602      	mov	r2, r0
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009a      	lsls	r2, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004650:	f7ff fb80 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004654:	4602      	mov	r2, r0
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009a      	lsls	r2, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	4a5d      	ldr	r2, [pc, #372]	; (80047e0 <UART_SetConfig+0x32c>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2264      	movs	r2, #100	; 0x64
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	1aeb      	subs	r3, r5, r3
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	3332      	adds	r3, #50	; 0x32
 800467e:	4a58      	ldr	r2, [pc, #352]	; (80047e0 <UART_SetConfig+0x32c>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800468c:	441c      	add	r4, r3
 800468e:	f7ff fb61 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004692:	4602      	mov	r2, r0
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80046a8:	f7ff fb54 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009a      	lsls	r2, r3, #2
 80046b6:	441a      	add	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	4a47      	ldr	r2, [pc, #284]	; (80047e0 <UART_SetConfig+0x32c>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	2264      	movs	r2, #100	; 0x64
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	1aeb      	subs	r3, r5, r3
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	3332      	adds	r3, #50	; 0x32
 80046d6:	4a42      	ldr	r2, [pc, #264]	; (80047e0 <UART_SetConfig+0x32c>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	f003 0207 	and.w	r2, r3, #7
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4422      	add	r2, r4
 80046e8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80046ea:	e0e7      	b.n	80048bc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a39      	ldr	r2, [pc, #228]	; (80047d8 <UART_SetConfig+0x324>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <UART_SetConfig+0x24c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a38      	ldr	r2, [pc, #224]	; (80047dc <UART_SetConfig+0x328>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d171      	bne.n	80047e4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004700:	f7ff fb3c 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004704:	4602      	mov	r2, r0
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009a      	lsls	r2, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	4a31      	ldr	r2, [pc, #196]	; (80047e0 <UART_SetConfig+0x32c>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	011c      	lsls	r4, r3, #4
 8004724:	f7ff fb2a 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004728:	4602      	mov	r2, r0
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009a      	lsls	r2, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	fbb2 f5f3 	udiv	r5, r2, r3
 800473e:	f7ff fb1d 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004742:	4602      	mov	r2, r0
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <UART_SetConfig+0x32c>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	1aeb      	subs	r3, r5, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	; 0x32
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <UART_SetConfig+0x32c>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004778:	441c      	add	r4, r3
 800477a:	f7ff faff 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 800477e:	4602      	mov	r2, r0
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fbb2 f5f3 	udiv	r5, r2, r3
 8004794:	f7ff faf2 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004798:	4602      	mov	r2, r0
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009a      	lsls	r2, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <UART_SetConfig+0x32c>)
 80047b0:	fba2 2303 	umull	r2, r3, r2, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	2264      	movs	r2, #100	; 0x64
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	1aeb      	subs	r3, r5, r3
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	3332      	adds	r3, #50	; 0x32
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <UART_SetConfig+0x32c>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	f003 020f 	and.w	r2, r3, #15
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4422      	add	r2, r4
 80047d4:	609a      	str	r2, [r3, #8]
 80047d6:	e071      	b.n	80048bc <UART_SetConfig+0x408>
 80047d8:	40011000 	.word	0x40011000
 80047dc:	40011400 	.word	0x40011400
 80047e0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80047e4:	f7ff fab6 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009a      	lsls	r2, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	4a31      	ldr	r2, [pc, #196]	; (80048c4 <UART_SetConfig+0x410>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	011c      	lsls	r4, r3, #4
 8004808:	f7ff faa4 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 800480c:	4602      	mov	r2, r0
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009a      	lsls	r2, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004822:	f7ff fa97 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004826:	4602      	mov	r2, r0
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <UART_SetConfig+0x410>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2264      	movs	r2, #100	; 0x64
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	1aeb      	subs	r3, r5, r3
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	3332      	adds	r3, #50	; 0x32
 8004850:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <UART_SetConfig+0x410>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485c:	441c      	add	r4, r3
 800485e:	f7ff fa79 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004862:	4602      	mov	r2, r0
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009a      	lsls	r2, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	fbb2 f5f3 	udiv	r5, r2, r3
 8004878:	f7ff fa6c 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 800487c:	4602      	mov	r2, r0
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009a      	lsls	r2, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <UART_SetConfig+0x410>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	2264      	movs	r2, #100	; 0x64
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	1aeb      	subs	r3, r5, r3
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	3332      	adds	r3, #50	; 0x32
 80048a6:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <UART_SetConfig+0x410>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f003 020f 	and.w	r2, r3, #15
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4422      	add	r2, r4
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	e7ff      	b.n	80048bc <UART_SetConfig+0x408>
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bdb0      	pop	{r4, r5, r7, pc}
 80048c4:	51eb851f 	.word	0x51eb851f

080048c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 001c 	add.w	r0, r7, #28
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d122      	bne.n	8004926 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 fa7c 	bl	8005e18 <USB_CoreReset>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e01a      	b.n	800495c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f001 fa70 	bl	8005e18 <USB_CoreReset>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800493c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
 800494e:	e005      	b.n	800495c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10b      	bne.n	800497a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f043 0206 	orr.w	r2, r3, #6
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004986:	b004      	add	sp, #16
 8004988:	4770      	bx	lr
	...

0800498c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d165      	bne.n	8004a6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <USB_SetTurnaroundTime+0x11c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d906      	bls.n	80049b6 <USB_SetTurnaroundTime+0x2a>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4a40      	ldr	r2, [pc, #256]	; (8004aac <USB_SetTurnaroundTime+0x120>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d802      	bhi.n	80049b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049b0:	230f      	movs	r3, #15
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e062      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <USB_SetTurnaroundTime+0x120>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d906      	bls.n	80049cc <USB_SetTurnaroundTime+0x40>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <USB_SetTurnaroundTime+0x124>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d802      	bhi.n	80049cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049c6:	230e      	movs	r3, #14
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	e057      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4a38      	ldr	r2, [pc, #224]	; (8004ab0 <USB_SetTurnaroundTime+0x124>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d906      	bls.n	80049e2 <USB_SetTurnaroundTime+0x56>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4a37      	ldr	r2, [pc, #220]	; (8004ab4 <USB_SetTurnaroundTime+0x128>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d802      	bhi.n	80049e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049dc:	230d      	movs	r3, #13
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e04c      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4a33      	ldr	r2, [pc, #204]	; (8004ab4 <USB_SetTurnaroundTime+0x128>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d906      	bls.n	80049f8 <USB_SetTurnaroundTime+0x6c>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4a32      	ldr	r2, [pc, #200]	; (8004ab8 <USB_SetTurnaroundTime+0x12c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d802      	bhi.n	80049f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049f2:	230c      	movs	r3, #12
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e041      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4a2f      	ldr	r2, [pc, #188]	; (8004ab8 <USB_SetTurnaroundTime+0x12c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d906      	bls.n	8004a0e <USB_SetTurnaroundTime+0x82>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4a2e      	ldr	r2, [pc, #184]	; (8004abc <USB_SetTurnaroundTime+0x130>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d802      	bhi.n	8004a0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a08:	230b      	movs	r3, #11
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e036      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4a2a      	ldr	r2, [pc, #168]	; (8004abc <USB_SetTurnaroundTime+0x130>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d906      	bls.n	8004a24 <USB_SetTurnaroundTime+0x98>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a29      	ldr	r2, [pc, #164]	; (8004ac0 <USB_SetTurnaroundTime+0x134>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d802      	bhi.n	8004a24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a1e:	230a      	movs	r3, #10
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	e02b      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <USB_SetTurnaroundTime+0x134>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d906      	bls.n	8004a3a <USB_SetTurnaroundTime+0xae>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <USB_SetTurnaroundTime+0x138>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d802      	bhi.n	8004a3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a34:	2309      	movs	r3, #9
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e020      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <USB_SetTurnaroundTime+0x138>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d906      	bls.n	8004a50 <USB_SetTurnaroundTime+0xc4>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4a20      	ldr	r2, [pc, #128]	; (8004ac8 <USB_SetTurnaroundTime+0x13c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d802      	bhi.n	8004a50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e015      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <USB_SetTurnaroundTime+0x13c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d906      	bls.n	8004a66 <USB_SetTurnaroundTime+0xda>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <USB_SetTurnaroundTime+0x140>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d802      	bhi.n	8004a66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a60:	2307      	movs	r3, #7
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	e00a      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a66:	2306      	movs	r3, #6
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	e007      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a72:	2309      	movs	r3, #9
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e001      	b.n	8004a7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a78:	2309      	movs	r3, #9
 8004a7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	00d8acbf 	.word	0x00d8acbf
 8004aac:	00e4e1bf 	.word	0x00e4e1bf
 8004ab0:	00f423ff 	.word	0x00f423ff
 8004ab4:	0106737f 	.word	0x0106737f
 8004ab8:	011a499f 	.word	0x011a499f
 8004abc:	01312cff 	.word	0x01312cff
 8004ac0:	014ca43f 	.word	0x014ca43f
 8004ac4:	016e35ff 	.word	0x016e35ff
 8004ac8:	01a6ab1f 	.word	0x01a6ab1f
 8004acc:	01e847ff 	.word	0x01e847ff

08004ad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d106      	bne.n	8004b40 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e00b      	b.n	8004b58 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	e001      	b.n	8004b58 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e003      	b.n	8004b60 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b58:	2032      	movs	r0, #50	; 0x32
 8004b5a:	f7fc fad1 	bl	8001100 <HAL_Delay>

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e009      	b.n	8004b9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3340      	adds	r3, #64	; 0x40
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0e      	cmp	r3, #14
 8004ba0:	d9f2      	bls.n	8004b88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d112      	bne.n	8004bce <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
 8004bcc:	e00b      	b.n	8004be6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bec:	461a      	mov	r2, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c00:	461a      	mov	r2, r3
 8004c02:	680b      	ldr	r3, [r1, #0]
 8004c04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10c      	bne.n	8004c26 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c12:	2100      	movs	r1, #0
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f961 	bl	8004edc <USB_SetDevSpeed>
 8004c1a:	e008      	b.n	8004c2e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f95c 	bl	8004edc <USB_SetDevSpeed>
 8004c24:	e003      	b.n	8004c2e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c26:	2103      	movs	r1, #3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f957 	bl	8004edc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c2e:	2110      	movs	r1, #16
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f90b 	bl	8004e4c <USB_FlushTxFifo>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f929 	bl	8004e98 <USB_FlushRxFifo>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	461a      	mov	r2, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2300      	movs	r3, #0
 8004c72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e043      	b.n	8004d02 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c90:	d118      	bne.n	8004cc4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e013      	b.n	8004cd6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e008      	b.n	8004cd6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d3b7      	bcc.n	8004c7a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	e043      	b.n	8004d98 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d26:	d118      	bne.n	8004d5a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e013      	b.n	8004d6c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	461a      	mov	r2, r3
 8004d52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e008      	b.n	8004d6c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	461a      	mov	r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3301      	adds	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d3b7      	bcc.n	8004d10 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d111      	bne.n	8004dde <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <USB_DevInit+0x2dc>)
 8004dc4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	f043 0303 	orr.w	r3, r3, #3
 8004ddc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004dea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f043 0210 	orr.w	r2, r3, #16
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <USB_DevInit+0x2e0>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f043 0208 	orr.w	r2, r3, #8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e2a:	f043 0304 	orr.w	r3, r3, #4
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e3e:	b004      	add	sp, #16
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	00800100 	.word	0x00800100
 8004e48:	803c3800 	.word	0x803c3800

08004e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	019b      	lsls	r3, r3, #6
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <USB_FlushTxFifo+0x48>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d901      	bls.n	8004e78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e006      	b.n	8004e86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d0f0      	beq.n	8004e66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	00030d40 	.word	0x00030d40

08004e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <USB_FlushRxFifo+0x40>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e006      	b.n	8004eca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d0f0      	beq.n	8004eaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	00030d40 	.word	0x00030d40

08004edc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b087      	sub	sp, #28
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0306 	and.w	r3, r3, #6
 8004f26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]
 8004f32:	e00a      	b.n	8004f4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d002      	beq.n	8004f40 <USB_GetDevSpeed+0x32>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d102      	bne.n	8004f46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f40:	2302      	movs	r3, #2
 8004f42:	75fb      	strb	r3, [r7, #23]
 8004f44:	e001      	b.n	8004f4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f46:	230f      	movs	r3, #15
 8004f48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d13a      	bne.n	8004fea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d155      	bne.n	8005058 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	059b      	lsls	r3, r3, #22
 8004fce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	e036      	b.n	8005058 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005008:	4313      	orrs	r3, r2
 800500a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11a      	bne.n	8005058 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800503e:	430b      	orrs	r3, r1
 8005040:	4313      	orrs	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d135      	bne.n	80050f0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	2101      	movs	r1, #1
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	b29b      	uxth	r3, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a4:	4013      	ands	r3, r2
 80050a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2101      	movs	r1, #1
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	b29b      	uxth	r3, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c8:	4013      	ands	r3, r2
 80050ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	0159      	lsls	r1, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	440b      	add	r3, r1
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	4619      	mov	r1, r3
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <USB_DeactivateEndpoint+0x100>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
 80050ee:	e034      	b.n	800515a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	2101      	movs	r1, #1
 8005102:	fa01 f303 	lsl.w	r3, r1, r3
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	43db      	mvns	r3, r3
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005110:	4013      	ands	r3, r2
 8005112:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	2101      	movs	r1, #1
 8005126:	fa01 f303 	lsl.w	r3, r1, r3
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	43db      	mvns	r3, r3
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005134:	4013      	ands	r3, r2
 8005136:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	0159      	lsls	r1, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	440b      	add	r3, r1
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	4619      	mov	r1, r3
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <USB_DeactivateEndpoint+0x104>)
 8005156:	4013      	ands	r3, r2
 8005158:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	ec337800 	.word	0xec337800
 800516c:	eff37800 	.word	0xeff37800

08005170 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4613      	mov	r3, r2
 800517c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b01      	cmp	r3, #1
 800518e:	f040 815c 	bne.w	800544a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d132      	bne.n	8005200 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	0cdb      	lsrs	r3, r3, #19
 80051fa:	04db      	lsls	r3, r3, #19
 80051fc:	6113      	str	r3, [r2, #16]
 80051fe:	e074      	b.n	80052ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	0cdb      	lsrs	r3, r3, #19
 800521c:	04db      	lsls	r3, r3, #19
 800521e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800523e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6959      	ldr	r1, [r3, #20]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	440b      	add	r3, r1
 800525c:	1e59      	subs	r1, r3, #1
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	fbb1 f3f3 	udiv	r3, r1, r3
 8005266:	04d9      	lsls	r1, r3, #19
 8005268:	4b9d      	ldr	r3, [pc, #628]	; (80054e0 <USB_EPStartXfer+0x370>)
 800526a:	400b      	ands	r3, r1
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	0148      	lsls	r0, r1, #5
 8005270:	69f9      	ldr	r1, [r7, #28]
 8005272:	4401      	add	r1, r0
 8005274:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005278:	4313      	orrs	r3, r2
 800527a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005292:	69b9      	ldr	r1, [r7, #24]
 8005294:	0148      	lsls	r0, r1, #5
 8005296:	69f9      	ldr	r1, [r7, #28]
 8005298:	4401      	add	r1, r0
 800529a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800529e:	4313      	orrs	r3, r2
 80052a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	78db      	ldrb	r3, [r3, #3]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d11f      	bne.n	80052ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d14b      	bne.n	8005388 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d128      	bne.n	8005366 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d110      	bne.n	8005346 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e00f      	b.n	8005366 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005364:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e12f      	b.n	80055e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	78db      	ldrb	r3, [r3, #3]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d015      	beq.n	80053dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8117 	beq.w	80055e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	69f9      	ldr	r1, [r7, #28]
 80053d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d6:	4313      	orrs	r3, r2
 80053d8:	634b      	str	r3, [r1, #52]	; 0x34
 80053da:	e105      	b.n	80055e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d110      	bne.n	800540e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e00f      	b.n	800542e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	68d9      	ldr	r1, [r3, #12]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	b298      	uxth	r0, r3
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	4603      	mov	r3, r0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fa2b 	bl	800589e <USB_WritePacket>
 8005448:	e0ce      	b.n	80055e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005464:	0cdb      	lsrs	r3, r3, #19
 8005466:	04db      	lsls	r3, r3, #19
 8005468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005484:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005488:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800548c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d126      	bne.n	80054e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	0148      	lsls	r0, r1, #5
 80054b0:	69f9      	ldr	r1, [r7, #28]
 80054b2:	4401      	add	r1, r0
 80054b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054b8:	4313      	orrs	r3, r2
 80054ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054da:	6113      	str	r3, [r2, #16]
 80054dc:	e036      	b.n	800554c <USB_EPStartXfer+0x3dc>
 80054de:	bf00      	nop
 80054e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4413      	add	r3, r2
 80054ee:	1e5a      	subs	r2, r3, #1
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	8afb      	ldrh	r3, [r7, #22]
 800550a:	04d9      	lsls	r1, r3, #19
 800550c:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <USB_EPStartXfer+0x484>)
 800550e:	400b      	ands	r3, r1
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	0148      	lsls	r0, r1, #5
 8005514:	69f9      	ldr	r1, [r7, #28]
 8005516:	4401      	add	r1, r0
 8005518:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800551c:	4313      	orrs	r3, r2
 800551e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	8af9      	ldrh	r1, [r7, #22]
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553c:	69b9      	ldr	r1, [r7, #24]
 800553e:	0148      	lsls	r0, r1, #5
 8005540:	69f9      	ldr	r1, [r7, #28]
 8005542:	4401      	add	r1, r0
 8005544:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005548:	4313      	orrs	r3, r2
 800554a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d10d      	bne.n	800556e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	68d9      	ldr	r1, [r3, #12]
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	460a      	mov	r2, r1
 800556c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	78db      	ldrb	r3, [r3, #3]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d128      	bne.n	80055c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d110      	bne.n	80055a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e00f      	b.n	80055c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	1ff80000 	.word	0x1ff80000

080055f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 80cd 	bne.w	80057b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d132      	bne.n	8005688 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005640:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005680:	0cdb      	lsrs	r3, r3, #19
 8005682:	04db      	lsls	r3, r3, #19
 8005684:	6113      	str	r3, [r2, #16]
 8005686:	e04e      	b.n	8005726 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a2:	0cdb      	lsrs	r3, r3, #19
 80056a4:	04db      	lsls	r3, r3, #19
 80056a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d903      	bls.n	80056e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005716:	6939      	ldr	r1, [r7, #16]
 8005718:	0148      	lsls	r0, r1, #5
 800571a:	6979      	ldr	r1, [r7, #20]
 800571c:	4401      	add	r1, r0
 800571e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005722:	4313      	orrs	r3, r2
 8005724:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d11e      	bne.n	800576a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	461a      	mov	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e092      	b.n	8005890 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005788:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d07e      	beq.n	8005890 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	2101      	movs	r1, #1
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	6979      	ldr	r1, [r7, #20]
 80057aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ae:	4313      	orrs	r3, r2
 80057b0:	634b      	str	r3, [r1, #52]	; 0x34
 80057b2:	e06d      	b.n	8005890 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	0cdb      	lsrs	r3, r3, #19
 80057d0:	04db      	lsls	r3, r3, #19
 80057d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005826:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583e:	6939      	ldr	r1, [r7, #16]
 8005840:	0148      	lsls	r0, r1, #5
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	4401      	add	r1, r0
 8005846:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10d      	bne.n	8005870 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68d9      	ldr	r1, [r3, #12]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	460a      	mov	r2, r1
 800586e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800588e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800589e:	b480      	push	{r7}
 80058a0:	b089      	sub	sp, #36	; 0x24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	4611      	mov	r1, r2
 80058aa:	461a      	mov	r2, r3
 80058ac:	460b      	mov	r3, r1
 80058ae:	71fb      	strb	r3, [r7, #7]
 80058b0:	4613      	mov	r3, r2
 80058b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80058bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11a      	bne.n	80058fa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058c4:	88bb      	ldrh	r3, [r7, #4]
 80058c6:	3303      	adds	r3, #3
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e00f      	b.n	80058f2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	031a      	lsls	r2, r3, #12
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058de:	461a      	mov	r2, r3
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3304      	adds	r3, #4
 80058ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d3eb      	bcc.n	80058d2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3724      	adds	r7, #36	; 0x24
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	3303      	adds	r3, #3
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005926:	2300      	movs	r3, #0
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e00b      	b.n	8005944 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	601a      	str	r2, [r3, #0]
    pDest++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3304      	adds	r3, #4
 800593c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	3301      	adds	r3, #1
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	429a      	cmp	r2, r3
 800594a:	d3ef      	bcc.n	800592c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800594c:	69fb      	ldr	r3, [r7, #28]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3724      	adds	r7, #36	; 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d12c      	bne.n	80059d0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	db12      	blt.n	80059ae <USB_EPSetStall+0x54>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00f      	beq.n	80059ae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059ac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e02b      	b.n	8005a28 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	db12      	blt.n	8005a08 <USB_EPSetStall+0xae>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a06:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d128      	bne.n	8005aa4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	78db      	ldrb	r3, [r3, #3]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d003      	beq.n	8005a82 <USB_EPClearStall+0x4c>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	78db      	ldrb	r3, [r3, #3]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d138      	bne.n	8005af4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e027      	b.n	8005af4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ac2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	78db      	ldrb	r3, [r3, #3]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d003      	beq.n	8005ad4 <USB_EPClearStall+0x9e>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d10f      	bne.n	8005af4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b68:	f023 0302 	bic.w	r3, r3, #2
 8005b6c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005b6e:	2003      	movs	r0, #3
 8005b70:	f7fb fac6 	bl	8001100 <HAL_Delay>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b98:	f043 0302 	orr.w	r3, r3, #2
 8005b9c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005b9e:	2003      	movs	r0, #3
 8005ba0:	f7fb faae 	bl	8001100 <HAL_Delay>

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	0c1b      	lsrs	r3, r3, #16
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	b29b      	uxth	r3, r3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	01db      	lsls	r3, r3, #7
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d0e:	f023 0307 	bic.w	r3, r3, #7
 8005d12:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0306 	and.w	r3, r3, #6
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d109      	bne.n	8005d38 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f043 0303 	orr.w	r3, r3, #3
 8005d36:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	460b      	mov	r3, r1
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	333c      	adds	r3, #60	; 0x3c
 8005d72:	3304      	adds	r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4a26      	ldr	r2, [pc, #152]	; (8005e14 <USB_EP0_OutStart+0xb8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d90a      	bls.n	8005d96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d90:	d101      	bne.n	8005d96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e037      	b.n	8005e06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc4:	f043 0318 	orr.w	r3, r3, #24
 8005dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ddc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d10f      	bne.n	8005e04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	461a      	mov	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	4f54300a 	.word	0x4f54300a

08005e18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <USB_CoreReset+0x64>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e01b      	b.n	8005e6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	daf2      	bge.n	8005e24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f043 0201 	orr.w	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <USB_CoreReset+0x64>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e006      	b.n	8005e6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d0f0      	beq.n	8005e4e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	00030d40 	.word	0x00030d40

08005e80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	7c1b      	ldrb	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d115      	bne.n	8005ec4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	2181      	movs	r1, #129	; 0x81
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 feca 	bl	8007c3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 fec0 	bl	8007c3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005ec2:	e012      	b.n	8005eea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ec4:	2340      	movs	r3, #64	; 0x40
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	2181      	movs	r1, #129	; 0x81
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 feb5 	bl	8007c3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	2202      	movs	r2, #2
 8005eda:	2101      	movs	r1, #1
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 feac 	bl	8007c3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005eea:	2308      	movs	r3, #8
 8005eec:	2203      	movs	r2, #3
 8005eee:	2182      	movs	r1, #130	; 0x82
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fea2 	bl	8007c3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005efc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f00:	f002 f818 	bl	8007f34 <malloc>
 8005f04:	4603      	mov	r3, r0
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f002 f81a 	bl	8007f54 <memset>
  if(pdev->pClassData == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	e026      	b.n	8005f7e <USBD_CDC_Init+0xfe>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f36:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	7c1b      	ldrb	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d109      	bne.n	8005f6e <USBD_CDC_Init+0xee>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f64:	2101      	movs	r1, #1
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 ff58 	bl	8007e1c <USBD_LL_PrepareReceive>
 8005f6c:	e007      	b.n	8005f7e <USBD_CDC_Init+0xfe>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	2101      	movs	r1, #1
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 ff4f 	bl	8007e1c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f98:	2181      	movs	r1, #129	; 0x81
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fe73 	bl	8007c86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 fe6c 	bl	8007c86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005fb6:	2182      	movs	r1, #130	; 0x82
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 fe64 	bl	8007c86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00e      	beq.n	8005fec <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 ffb0 	bl	8007f44 <free>
    pdev->pClassData = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006006:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800601c:	2b00      	cmp	r3, #0
 800601e:	d039      	beq.n	8006094 <USBD_CDC_Setup+0x9e>
 8006020:	2b20      	cmp	r3, #32
 8006022:	d17c      	bne.n	800611e <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	88db      	ldrh	r3, [r3, #6]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d029      	beq.n	8006080 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b25b      	sxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	da11      	bge.n	800605a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006042:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	88d2      	ldrh	r2, [r2, #6]
 8006048:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800604a:	6939      	ldr	r1, [r7, #16]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	88db      	ldrh	r3, [r3, #6]
 8006050:	461a      	mov	r2, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 f9ca 	bl	80073ec <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006058:	e068      	b.n	800612c <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	785a      	ldrb	r2, [r3, #1]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	88db      	ldrh	r3, [r3, #6]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006070:	6939      	ldr	r1, [r7, #16]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	88db      	ldrh	r3, [r3, #6]
 8006076:	461a      	mov	r2, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 f9e5 	bl	8007448 <USBD_CtlPrepareRx>
    break;
 800607e:	e055      	b.n	800612c <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	7850      	ldrb	r0, [r2, #1]
 800608c:	2200      	movs	r2, #0
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	4798      	blx	r3
    break;
 8006092:	e04b      	b.n	800612c <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b0a      	cmp	r3, #10
 800609a:	d017      	beq.n	80060cc <USBD_CDC_Setup+0xd6>
 800609c:	2b0b      	cmp	r3, #11
 800609e:	d029      	beq.n	80060f4 <USBD_CDC_Setup+0xfe>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d133      	bne.n	800610c <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d107      	bne.n	80060be <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80060ae:	f107 030c 	add.w	r3, r7, #12
 80060b2:	2202      	movs	r2, #2
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f998 	bl	80073ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060bc:	e02e      	b.n	800611c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 f928 	bl	8007316 <USBD_CtlError>
			  ret = USBD_FAIL;
 80060c6:	2302      	movs	r3, #2
 80060c8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ca:	e027      	b.n	800611c <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d107      	bne.n	80060e6 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80060d6:	f107 030f 	add.w	r3, r7, #15
 80060da:	2201      	movs	r2, #1
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 f984 	bl	80073ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060e4:	e01a      	b.n	800611c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 f914 	bl	8007316 <USBD_CtlError>
			  ret = USBD_FAIL;
 80060ee:	2302      	movs	r3, #2
 80060f0:	75fb      	strb	r3, [r7, #23]
      break;
 80060f2:	e013      	b.n	800611c <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d00d      	beq.n	800611a <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 f908 	bl	8007316 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006106:	2302      	movs	r3, #2
 8006108:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800610a:	e006      	b.n	800611a <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f001 f901 	bl	8007316 <USBD_CtlError>
      ret = USBD_FAIL;
 8006114:	2302      	movs	r3, #2
 8006116:	75fb      	strb	r3, [r7, #23]
      break;
 8006118:	e000      	b.n	800611c <USBD_CDC_Setup+0x126>
      break;
 800611a:	bf00      	nop
    }
    break;
 800611c:	e006      	b.n	800612c <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 f8f8 	bl	8007316 <USBD_CtlError>
    ret = USBD_FAIL;
 8006126:	2302      	movs	r3, #2
 8006128:	75fb      	strb	r3, [r7, #23]
    break;
 800612a:	bf00      	nop
  }

  return ret;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006148:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006150:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006158:	2b00      	cmp	r3, #0
 800615a:	d03a      	beq.n	80061d2 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800615c:	78fa      	ldrb	r2, [r7, #3]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	331c      	adds	r3, #28
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d029      	beq.n	80061c6 <USBD_CDC_DataIn+0x90>
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	331c      	adds	r3, #28
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	78f9      	ldrb	r1, [r7, #3]
 8006186:	68b8      	ldr	r0, [r7, #8]
 8006188:	460b      	mov	r3, r1
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	1a5b      	subs	r3, r3, r1
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4403      	add	r3, r0
 8006192:	3344      	adds	r3, #68	; 0x44
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	fbb2 f1f3 	udiv	r1, r2, r3
 800619a:	fb03 f301 	mul.w	r3, r3, r1
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d110      	bne.n	80061c6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	331c      	adds	r3, #28
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80061b8:	78f9      	ldrb	r1, [r7, #3]
 80061ba:	2300      	movs	r3, #0
 80061bc:	2200      	movs	r2, #0
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fe09 	bl	8007dd6 <USBD_LL_Transmit>
 80061c4:	e003      	b.n	80061ce <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e000      	b.n	80061d4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80061d2:	2302      	movs	r3, #2
  }
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fe34 	bl	8007e62 <USBD_LL_GetRxDataSize>
 80061fa:	4602      	mov	r2, r0
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006220:	4611      	mov	r1, r2
 8006222:	4798      	blx	r3

    return USBD_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006240:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006248:	2b00      	cmp	r3, #0
 800624a:	d015      	beq.n	8006278 <USBD_CDC_EP0_RxReady+0x46>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006252:	2bff      	cmp	r3, #255	; 0xff
 8006254:	d010      	beq.n	8006278 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006264:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800626c:	b292      	uxth	r2, r2
 800626e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	22ff      	movs	r2, #255	; 0xff
 8006274:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2243      	movs	r2, #67	; 0x43
 8006290:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006292:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20000094 	.word	0x20000094

080062a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2243      	movs	r2, #67	; 0x43
 80062b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000050 	.word	0x20000050

080062c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2243      	movs	r2, #67	; 0x43
 80062d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	200000d8 	.word	0x200000d8

080062e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	220a      	movs	r2, #10
 80062f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80062f2:	4b03      	ldr	r3, [pc, #12]	; (8006300 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	2000000c 	.word	0x2000000c

08006304 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800630e:	2302      	movs	r3, #2
 8006310:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006346:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006376:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800639c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01c      	beq.n	80063e2 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d115      	bne.n	80063de <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2181      	movs	r1, #129	; 0x81
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fcfe 	bl	8007dd6 <USBD_LL_Transmit>

      return USBD_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e002      	b.n	80063e4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7c1b      	ldrb	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006418:	2101      	movs	r1, #1
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 fcfe 	bl	8007e1c <USBD_LL_PrepareReceive>
 8006420:	e007      	b.n	8006432 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	2101      	movs	r1, #1
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fcf5 	bl	8007e1c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	e000      	b.n	8006438 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006436:	2302      	movs	r3, #2
  }
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006454:	2302      	movs	r3, #2
 8006456:	e01a      	b.n	800648e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	79fa      	ldrb	r2, [r7, #7]
 8006484:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f001 fb70 	bl	8007b6c <USBD_LL_Init>

  return USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d006      	beq.n	80064b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
 80064b6:	e001      	b.n	80064bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064b8:	2302      	movs	r3, #2
 80064ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 fb96 	bl	8007c04 <USBD_LL_Start>

  return USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006504:	2302      	movs	r3, #2
 8006506:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	78fa      	ldrb	r2, [r7, #3]
 800651c:	4611      	mov	r1, r2
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	4611      	mov	r1, r2
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
  return USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fe94 	bl	800729c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	2b01      	cmp	r3, #1
 8006596:	d00c      	beq.n	80065b2 <USBD_LL_SetupStage+0x56>
 8006598:	2b01      	cmp	r3, #1
 800659a:	d302      	bcc.n	80065a2 <USBD_LL_SetupStage+0x46>
 800659c:	2b02      	cmp	r3, #2
 800659e:	d010      	beq.n	80065c2 <USBD_LL_SetupStage+0x66>
 80065a0:	e017      	b.n	80065d2 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa04 	bl	80069b8 <USBD_StdDevReq>
    break;
 80065b0:	e01a      	b.n	80065e8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa66 	bl	8006a8c <USBD_StdItfReq>
    break;
 80065c0:	e012      	b.n	80065e8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 faa4 	bl	8006b18 <USBD_StdEPReq>
    break;
 80065d0:	e00a      	b.n	80065e8 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80065d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fb6f 	bl	8007cc4 <USBD_LL_StallEP>
    break;
 80065e6:	bf00      	nop
  }

  return USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	460b      	mov	r3, r1
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d14b      	bne.n	800669e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800660c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006614:	2b03      	cmp	r3, #3
 8006616:	d134      	bne.n	8006682 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	429a      	cmp	r2, r3
 8006622:	d919      	bls.n	8006658 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	1ad2      	subs	r2, r2, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800663a:	429a      	cmp	r2, r3
 800663c:	d203      	bcs.n	8006646 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006642:	b29b      	uxth	r3, r3
 8006644:	e002      	b.n	800664c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 ff17 	bl	8007484 <USBD_CtlContinueRx>
 8006656:	e038      	b.n	80066ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800666a:	2b03      	cmp	r3, #3
 800666c:	d105      	bne.n	800667a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 ff14 	bl	80074a8 <USBD_CtlSendStatus>
 8006680:	e023      	b.n	80066ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006688:	2b05      	cmp	r3, #5
 800668a:	d11e      	bne.n	80066ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006694:	2100      	movs	r1, #0
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f001 fb14 	bl	8007cc4 <USBD_LL_StallEP>
 800669c:	e015      	b.n	80066ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d108      	bne.n	80066c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	7afa      	ldrb	r2, [r7, #11]
 80066be:	4611      	mov	r1, r2
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	4798      	blx	r3
 80066c4:	e001      	b.n	80066ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066c6:	2302      	movs	r3, #2
 80066c8:	e000      	b.n	80066cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	460b      	mov	r3, r1
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80066e2:	7afb      	ldrb	r3, [r7, #11]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d17f      	bne.n	80067e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3314      	adds	r3, #20
 80066ec:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d15c      	bne.n	80067b2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	429a      	cmp	r2, r3
 8006702:	d915      	bls.n	8006730 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	1ad2      	subs	r2, r2, r3
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	b29b      	uxth	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 fe81 	bl	8007424 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006722:	2300      	movs	r3, #0
 8006724:	2200      	movs	r2, #0
 8006726:	2100      	movs	r1, #0
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f001 fb77 	bl	8007e1c <USBD_LL_PrepareReceive>
 800672e:	e04e      	b.n	80067ce <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	6912      	ldr	r2, [r2, #16]
 8006738:	fbb3 f1f2 	udiv	r1, r3, r2
 800673c:	fb02 f201 	mul.w	r2, r2, r1
 8006740:	1a9b      	subs	r3, r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d11c      	bne.n	8006780 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800674e:	429a      	cmp	r2, r3
 8006750:	d316      	bcc.n	8006780 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800675c:	429a      	cmp	r2, r3
 800675e:	d20f      	bcs.n	8006780 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006760:	2200      	movs	r2, #0
 8006762:	2100      	movs	r1, #0
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fe5d 	bl	8007424 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006772:	2300      	movs	r3, #0
 8006774:	2200      	movs	r2, #0
 8006776:	2100      	movs	r1, #0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f001 fb4f 	bl	8007e1c <USBD_LL_PrepareReceive>
 800677e:	e026      	b.n	80067ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006792:	2b03      	cmp	r3, #3
 8006794:	d105      	bne.n	80067a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067a2:	2180      	movs	r1, #128	; 0x80
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f001 fa8d 	bl	8007cc4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fe8f 	bl	80074ce <USBD_CtlReceiveStatus>
 80067b0:	e00d      	b.n	80067ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d004      	beq.n	80067c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067c6:	2180      	movs	r1, #128	; 0x80
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f001 fa7b 	bl	8007cc4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d11d      	bne.n	8006814 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fe82 	bl	80064e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80067e6:	e015      	b.n	8006814 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00d      	beq.n	8006810 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d108      	bne.n	8006810 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	7afa      	ldrb	r2, [r7, #11]
 8006808:	4611      	mov	r1, r2
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	4798      	blx	r3
 800680e:	e001      	b.n	8006814 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006810:	2302      	movs	r3, #2
 8006812:	e000      	b.n	8006816 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006826:	2340      	movs	r3, #64	; 0x40
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fa04 	bl	8007c3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2240      	movs	r2, #64	; 0x40
 800683e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006842:	2340      	movs	r3, #64	; 0x40
 8006844:	2200      	movs	r2, #0
 8006846:	2180      	movs	r1, #128	; 0x80
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 f9f6 	bl	8007c3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2240      	movs	r2, #64	; 0x40
 8006858:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6852      	ldr	r2, [r2, #4]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	4611      	mov	r1, r2
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
  }

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2204      	movs	r2, #4
 80068d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800691a:	2b03      	cmp	r3, #3
 800691c:	d10b      	bne.n	8006936 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6852      	ldr	r2, [r2, #4]
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	4611      	mov	r1, r2
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d004      	beq.n	80069dc <USBD_StdDevReq+0x24>
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d002      	beq.n	80069dc <USBD_StdDevReq+0x24>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <USBD_StdDevReq+0x34>
 80069da:	e04c      	b.n	8006a76 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
    break;
 80069ea:	e049      	b.n	8006a80 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b09      	cmp	r3, #9
 80069f2:	d83a      	bhi.n	8006a6a <USBD_StdDevReq+0xb2>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USBD_StdDevReq+0x44>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a4d 	.word	0x08006a4d
 8006a00:	08006a61 	.word	0x08006a61
 8006a04:	08006a6b 	.word	0x08006a6b
 8006a08:	08006a57 	.word	0x08006a57
 8006a0c:	08006a6b 	.word	0x08006a6b
 8006a10:	08006a2f 	.word	0x08006a2f
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a6b 	.word	0x08006a6b
 8006a1c:	08006a43 	.word	0x08006a43
 8006a20:	08006a39 	.word	0x08006a39
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9d2 	bl	8006dd0 <USBD_GetDescriptor>
      break;
 8006a2c:	e022      	b.n	8006a74 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fac7 	bl	8006fc4 <USBD_SetAddress>
      break;
 8006a36:	e01d      	b.n	8006a74 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb04 	bl	8007048 <USBD_SetConfig>
      break;
 8006a40:	e018      	b.n	8006a74 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fb8d 	bl	8007164 <USBD_GetConfig>
      break;
 8006a4a:	e013      	b.n	8006a74 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fbbc 	bl	80071cc <USBD_GetStatus>
      break;
 8006a54:	e00e      	b.n	8006a74 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fbea 	bl	8007232 <USBD_SetFeature>
      break;
 8006a5e:	e009      	b.n	8006a74 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fbf9 	bl	800725a <USBD_ClrFeature>
      break;
 8006a68:	e004      	b.n	8006a74 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc52 	bl	8007316 <USBD_CtlError>
      break;
 8006a72:	bf00      	nop
    }
    break;
 8006a74:	e004      	b.n	8006a80 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fc4c 	bl	8007316 <USBD_CtlError>
    break;
 8006a7e:	bf00      	nop
  }

  return ret;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop

08006a8c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d003      	beq.n	8006aae <USBD_StdItfReq+0x22>
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d001      	beq.n	8006aae <USBD_StdItfReq+0x22>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d12a      	bne.n	8006b04 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d81d      	bhi.n	8006af6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	889b      	ldrh	r3, [r3, #4]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d813      	bhi.n	8006aec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d110      	bne.n	8006b00 <USBD_StdItfReq+0x74>
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fcdf 	bl	80074a8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006aea:	e009      	b.n	8006b00 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fc11 	bl	8007316 <USBD_CtlError>
      break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fc0c 	bl	8007316 <USBD_CtlError>
      break;
 8006afe:	e000      	b.n	8006b02 <USBD_StdItfReq+0x76>
      break;
 8006b00:	bf00      	nop
    }
    break;
 8006b02:	e004      	b.n	8006b0e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fc05 	bl	8007316 <USBD_CtlError>
    break;
 8006b0c:	bf00      	nop
  }

  return USBD_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	889b      	ldrh	r3, [r3, #4]
 8006b2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d004      	beq.n	8006b42 <USBD_StdEPReq+0x2a>
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	d002      	beq.n	8006b42 <USBD_StdEPReq+0x2a>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <USBD_StdEPReq+0x3a>
 8006b40:	e13b      	b.n	8006dba <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
    break;
 8006b50:	e138      	b.n	8006dc4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d10a      	bne.n	8006b74 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	e128      	b.n	8006dc6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d03e      	beq.n	8006bfa <USBD_StdEPReq+0xe2>
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d002      	beq.n	8006b86 <USBD_StdEPReq+0x6e>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d070      	beq.n	8006c66 <USBD_StdEPReq+0x14e>
 8006b84:	e113      	b.n	8006dae <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d002      	beq.n	8006b96 <USBD_StdEPReq+0x7e>
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d015      	beq.n	8006bc0 <USBD_StdEPReq+0xa8>
 8006b94:	e02b      	b.n	8006bee <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00c      	beq.n	8006bb6 <USBD_StdEPReq+0x9e>
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d009      	beq.n	8006bb6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 f88c 	bl	8007cc4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006bac:	2180      	movs	r1, #128	; 0x80
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 f888 	bl	8007cc4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bb4:	e020      	b.n	8006bf8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fbac 	bl	8007316 <USBD_CtlError>
        break;
 8006bbe:	e01b      	b.n	8006bf8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	885b      	ldrh	r3, [r3, #2]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10e      	bne.n	8006be6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <USBD_StdEPReq+0xce>
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d008      	beq.n	8006be6 <USBD_StdEPReq+0xce>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f86f 	bl	8007cc4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fc5e 	bl	80074a8 <USBD_CtlSendStatus>

        break;
 8006bec:	e004      	b.n	8006bf8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fb90 	bl	8007316 <USBD_CtlError>
        break;
 8006bf6:	bf00      	nop
      }
      break;
 8006bf8:	e0de      	b.n	8006db8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d002      	beq.n	8006c0a <USBD_StdEPReq+0xf2>
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d015      	beq.n	8006c34 <USBD_StdEPReq+0x11c>
 8006c08:	e026      	b.n	8006c58 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <USBD_StdEPReq+0x112>
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b80      	cmp	r3, #128	; 0x80
 8006c14:	d009      	beq.n	8006c2a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 f852 	bl	8007cc4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 f84e 	bl	8007cc4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006c28:	e01c      	b.n	8006c64 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fb72 	bl	8007316 <USBD_CtlError>
        break;
 8006c32:	e017      	b.n	8006c64 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	885b      	ldrh	r3, [r3, #2]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d112      	bne.n	8006c62 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 f859 	bl	8007d02 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fc29 	bl	80074a8 <USBD_CtlSendStatus>
        }
        break;
 8006c56:	e004      	b.n	8006c62 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fb5b 	bl	8007316 <USBD_CtlError>
        break;
 8006c60:	e000      	b.n	8006c64 <USBD_StdEPReq+0x14c>
        break;
 8006c62:	bf00      	nop
      }
      break;
 8006c64:	e0a8      	b.n	8006db8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d002      	beq.n	8006c76 <USBD_StdEPReq+0x15e>
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d031      	beq.n	8006cd8 <USBD_StdEPReq+0x1c0>
 8006c74:	e095      	b.n	8006da2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d007      	beq.n	8006c8c <USBD_StdEPReq+0x174>
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2b80      	cmp	r3, #128	; 0x80
 8006c80:	d004      	beq.n	8006c8c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fb46 	bl	8007316 <USBD_CtlError>
          break;
 8006c8a:	e08f      	b.n	8006dac <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da0b      	bge.n	8006cac <USBD_StdEPReq+0x194>
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	3310      	adds	r3, #16
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3304      	adds	r3, #4
 8006caa:	e00a      	b.n	8006cc2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fb8b 	bl	80073ec <USBD_CtlSendData>
          break;
 8006cd6:	e069      	b.n	8006dac <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	da11      	bge.n	8006d04 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	f003 020f 	and.w	r2, r3, #15
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3318      	adds	r3, #24
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d117      	bne.n	8006d2a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fb0a 	bl	8007316 <USBD_CtlError>
            break;
 8006d02:	e053      	b.n	8006dac <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 faf7 	bl	8007316 <USBD_CtlError>
            break;
 8006d28:	e040      	b.n	8006dac <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	da0b      	bge.n	8006d4a <USBD_StdEPReq+0x232>
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	3310      	adds	r3, #16
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	e00a      	b.n	8006d60 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4413      	add	r3, r2
 8006d60:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <USBD_StdEPReq+0x256>
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d103      	bne.n	8006d76 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e00e      	b.n	8006d94 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 ffe0 	bl	8007d40 <USBD_LL_IsStallEP>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e002      	b.n	8006d94 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2202      	movs	r2, #2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fb26 	bl	80073ec <USBD_CtlSendData>
          break;
 8006da0:	e004      	b.n	8006dac <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fab6 	bl	8007316 <USBD_CtlError>
        break;
 8006daa:	bf00      	nop
      }
      break;
 8006dac:	e004      	b.n	8006db8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fab0 	bl	8007316 <USBD_CtlError>
      break;
 8006db6:	bf00      	nop
    }
    break;
 8006db8:	e004      	b.n	8006dc4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 faaa 	bl	8007316 <USBD_CtlError>
    break;
 8006dc2:	bf00      	nop
  }

  return ret;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	885b      	ldrh	r3, [r3, #2]
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	2b06      	cmp	r3, #6
 8006de6:	f200 80c9 	bhi.w	8006f7c <USBD_GetDescriptor+0x1ac>
 8006dea:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <USBD_GetDescriptor+0x20>)
 8006dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df0:	08006e0d 	.word	0x08006e0d
 8006df4:	08006e25 	.word	0x08006e25
 8006df8:	08006e65 	.word	0x08006e65
 8006dfc:	08006f7d 	.word	0x08006f7d
 8006e00:	08006f7d 	.word	0x08006f7d
 8006e04:	08006f29 	.word	0x08006f29
 8006e08:	08006f4f 	.word	0x08006f4f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c12      	ldrb	r2, [r2, #16]
 8006e18:	f107 010a 	add.w	r1, r7, #10
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	60f8      	str	r0, [r7, #12]
    break;
 8006e22:	e0b0      	b.n	8006f86 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7c1b      	ldrb	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10d      	bne.n	8006e48 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	f107 020a 	add.w	r2, r7, #10
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	2202      	movs	r2, #2
 8006e44:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e46:	e09e      	b.n	8006f86 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	f107 020a 	add.w	r2, r7, #10
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	2202      	movs	r2, #2
 8006e60:	701a      	strb	r2, [r3, #0]
    break;
 8006e62:	e090      	b.n	8006f86 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	885b      	ldrh	r3, [r3, #2]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b05      	cmp	r3, #5
 8006e6c:	d856      	bhi.n	8006f1c <USBD_GetDescriptor+0x14c>
 8006e6e:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <USBD_GetDescriptor+0xa4>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006e8d 	.word	0x08006e8d
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	08006ebd 	.word	0x08006ebd
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	08006eed 	.word	0x08006eed
 8006e88:	08006f05 	.word	0x08006f05
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7c12      	ldrb	r2, [r2, #16]
 8006e98:	f107 010a 	add.w	r1, r7, #10
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
      break;
 8006ea2:	e040      	b.n	8006f26 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	7c12      	ldrb	r2, [r2, #16]
 8006eb0:	f107 010a 	add.w	r1, r7, #10
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
      break;
 8006eba:	e034      	b.n	8006f26 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	7c12      	ldrb	r2, [r2, #16]
 8006ec8:	f107 010a 	add.w	r1, r7, #10
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4798      	blx	r3
 8006ed0:	60f8      	str	r0, [r7, #12]
      break;
 8006ed2:	e028      	b.n	8006f26 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	f107 010a 	add.w	r1, r7, #10
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	60f8      	str	r0, [r7, #12]
      break;
 8006eea:	e01c      	b.n	8006f26 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 010a 	add.w	r1, r7, #10
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
      break;
 8006f02:	e010      	b.n	8006f26 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7c12      	ldrb	r2, [r2, #16]
 8006f10:	f107 010a 	add.w	r1, r7, #10
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
      break;
 8006f1a:	e004      	b.n	8006f26 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9f9 	bl	8007316 <USBD_CtlError>
      return;
 8006f24:	e04b      	b.n	8006fbe <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006f26:	e02e      	b.n	8006f86 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	7c1b      	ldrb	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d109      	bne.n	8006f44 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	f107 020a 	add.w	r2, r7, #10
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
      break;
 8006f42:	e020      	b.n	8006f86 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9e5 	bl	8007316 <USBD_CtlError>
      return;
 8006f4c:	e037      	b.n	8006fbe <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7c1b      	ldrb	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10d      	bne.n	8006f72 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	f107 020a 	add.w	r2, r7, #10
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
 8006f66:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	701a      	strb	r2, [r3, #0]
      break;
 8006f70:	e009      	b.n	8006f86 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f9ce 	bl	8007316 <USBD_CtlError>
      return;
 8006f7a:	e020      	b.n	8006fbe <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9c9 	bl	8007316 <USBD_CtlError>
    return;
 8006f84:	e01b      	b.n	8006fbe <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006f86:	897b      	ldrh	r3, [r7, #10]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d011      	beq.n	8006fb0 <USBD_GetDescriptor+0x1e0>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	88db      	ldrh	r3, [r3, #6]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00d      	beq.n	8006fb0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	88da      	ldrh	r2, [r3, #6]
 8006f98:	897b      	ldrh	r3, [r7, #10]
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	bf28      	it	cs
 8006f9e:	4613      	movcs	r3, r2
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006fa4:	897b      	ldrh	r3, [r7, #10]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68f9      	ldr	r1, [r7, #12]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa1e 	bl	80073ec <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	88db      	ldrh	r3, [r3, #6]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fa75 	bl	80074a8 <USBD_CtlSendStatus>
  }
}
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	889b      	ldrh	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d130      	bne.n	8007038 <USBD_SetAddress+0x74>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88db      	ldrh	r3, [r3, #6]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d12c      	bne.n	8007038 <USBD_SetAddress+0x74>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe4:	d828      	bhi.n	8007038 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d104      	bne.n	8007006 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f989 	bl	8007316 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	e01c      	b.n	8007040 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7bfa      	ldrb	r2, [r7, #15]
 800700a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fec0 	bl	8007d98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fa45 	bl	80074a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702c:	e008      	b.n	8007040 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007036:	e003      	b.n	8007040 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f96b 	bl	8007316 <USBD_CtlError>
  }
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	885b      	ldrh	r3, [r3, #2]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	4b41      	ldr	r3, [pc, #260]	; (8007160 <USBD_SetConfig+0x118>)
 800705a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800705c:	4b40      	ldr	r3, [pc, #256]	; (8007160 <USBD_SetConfig+0x118>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d904      	bls.n	800706e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f955 	bl	8007316 <USBD_CtlError>
 800706c:	e075      	b.n	800715a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007074:	2b02      	cmp	r3, #2
 8007076:	d002      	beq.n	800707e <USBD_SetConfig+0x36>
 8007078:	2b03      	cmp	r3, #3
 800707a:	d023      	beq.n	80070c4 <USBD_SetConfig+0x7c>
 800707c:	e062      	b.n	8007144 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800707e:	4b38      	ldr	r3, [pc, #224]	; (8007160 <USBD_SetConfig+0x118>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01a      	beq.n	80070bc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007086:	4b36      	ldr	r3, [pc, #216]	; (8007160 <USBD_SetConfig+0x118>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2203      	movs	r2, #3
 8007094:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007098:	4b31      	ldr	r3, [pc, #196]	; (8007160 <USBD_SetConfig+0x118>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff fa2a 	bl	80064f8 <USBD_SetClassConfig>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d104      	bne.n	80070b4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f932 	bl	8007316 <USBD_CtlError>
          return;
 80070b2:	e052      	b.n	800715a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f9f7 	bl	80074a8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80070ba:	e04e      	b.n	800715a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9f3 	bl	80074a8 <USBD_CtlSendStatus>
      break;
 80070c2:	e04a      	b.n	800715a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070c4:	4b26      	ldr	r3, [pc, #152]	; (8007160 <USBD_SetConfig+0x118>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d112      	bne.n	80070f2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80070d4:	4b22      	ldr	r3, [pc, #136]	; (8007160 <USBD_SetConfig+0x118>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80070de:	4b20      	ldr	r3, [pc, #128]	; (8007160 <USBD_SetConfig+0x118>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fa26 	bl	8006536 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f9dc 	bl	80074a8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80070f0:	e033      	b.n	800715a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80070f2:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <USBD_SetConfig+0x118>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d01d      	beq.n	800713c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fa14 	bl	8006536 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800710e:	4b14      	ldr	r3, [pc, #80]	; (8007160 <USBD_SetConfig+0x118>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <USBD_SetConfig+0x118>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff f9ea 	bl	80064f8 <USBD_SetClassConfig>
 8007124:	4603      	mov	r3, r0
 8007126:	2b02      	cmp	r3, #2
 8007128:	d104      	bne.n	8007134 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8f2 	bl	8007316 <USBD_CtlError>
          return;
 8007132:	e012      	b.n	800715a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f9b7 	bl	80074a8 <USBD_CtlSendStatus>
      break;
 800713a:	e00e      	b.n	800715a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f9b3 	bl	80074a8 <USBD_CtlSendStatus>
      break;
 8007142:	e00a      	b.n	800715a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8e5 	bl	8007316 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <USBD_SetConfig+0x118>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff f9ef 	bl	8006536 <USBD_ClrClassConfig>
      break;
 8007158:	bf00      	nop
    }
  }
}
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000200 	.word	0x20000200

08007164 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	88db      	ldrh	r3, [r3, #6]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d004      	beq.n	8007180 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8cc 	bl	8007316 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800717e:	e021      	b.n	80071c4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007186:	2b01      	cmp	r3, #1
 8007188:	db17      	blt.n	80071ba <USBD_GetConfig+0x56>
 800718a:	2b02      	cmp	r3, #2
 800718c:	dd02      	ble.n	8007194 <USBD_GetConfig+0x30>
 800718e:	2b03      	cmp	r3, #3
 8007190:	d00b      	beq.n	80071aa <USBD_GetConfig+0x46>
 8007192:	e012      	b.n	80071ba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3308      	adds	r3, #8
 800719e:	2201      	movs	r2, #1
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f922 	bl	80073ec <USBD_CtlSendData>
      break;
 80071a8:	e00c      	b.n	80071c4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3304      	adds	r3, #4
 80071ae:	2201      	movs	r2, #1
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f91a 	bl	80073ec <USBD_CtlSendData>
      break;
 80071b8:	e004      	b.n	80071c4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f8aa 	bl	8007316 <USBD_CtlError>
      break;
 80071c2:	bf00      	nop
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071dc:	3b01      	subs	r3, #1
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d81e      	bhi.n	8007220 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	88db      	ldrh	r3, [r3, #6]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d004      	beq.n	80071f4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f892 	bl	8007316 <USBD_CtlError>
      break;
 80071f2:	e01a      	b.n	800722a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f043 0202 	orr.w	r2, r3, #2
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	330c      	adds	r3, #12
 8007214:	2202      	movs	r2, #2
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f8e7 	bl	80073ec <USBD_CtlSendData>
    break;
 800721e:	e004      	b.n	800722a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f877 	bl	8007316 <USBD_CtlError>
    break;
 8007228:	bf00      	nop
  }
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	885b      	ldrh	r3, [r3, #2]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d106      	bne.n	8007252 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f92b 	bl	80074a8 <USBD_CtlSendStatus>
  }

}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800726a:	3b01      	subs	r3, #1
 800726c:	2b02      	cmp	r3, #2
 800726e:	d80b      	bhi.n	8007288 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	885b      	ldrh	r3, [r3, #2]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10c      	bne.n	8007292 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f911 	bl	80074a8 <USBD_CtlSendStatus>
    }
    break;
 8007286:	e004      	b.n	8007292 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f843 	bl	8007316 <USBD_CtlError>
    break;
 8007290:	e000      	b.n	8007294 <USBD_ClrFeature+0x3a>
    break;
 8007292:	bf00      	nop
  }
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	785a      	ldrb	r2, [r3, #1]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	3302      	adds	r3, #2
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	b29a      	uxth	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3303      	adds	r3, #3
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	3304      	adds	r3, #4
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	3305      	adds	r3, #5
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	3306      	adds	r3, #6
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	3307      	adds	r3, #7
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	b29b      	uxth	r3, r3
 8007302:	4413      	add	r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	80da      	strh	r2, [r3, #6]

}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007320:	2180      	movs	r1, #128	; 0x80
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fcce 	bl	8007cc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007328:	2100      	movs	r1, #0
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fcca 	bl	8007cc4 <USBD_LL_StallEP>
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d032      	beq.n	80073b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f834 	bl	80073bc <USBD_GetLen>
 8007354:	4603      	mov	r3, r0
 8007356:	3301      	adds	r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	75fa      	strb	r2, [r7, #23]
 8007368:	461a      	mov	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4413      	add	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	7812      	ldrb	r2, [r2, #0]
 8007372:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	75fa      	strb	r2, [r7, #23]
 800737a:	461a      	mov	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4413      	add	r3, r2
 8007380:	2203      	movs	r2, #3
 8007382:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007384:	e012      	b.n	80073ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	60fa      	str	r2, [r7, #12]
 800738c:	7dfa      	ldrb	r2, [r7, #23]
 800738e:	1c51      	adds	r1, r2, #1
 8007390:	75f9      	strb	r1, [r7, #23]
 8007392:	4611      	mov	r1, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	440a      	add	r2, r1
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	75fa      	strb	r2, [r7, #23]
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4413      	add	r3, r2
 80073a8:	2200      	movs	r2, #0
 80073aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e8      	bne.n	8007386 <USBD_GetString+0x4e>
    }
  }
}
 80073b4:	bf00      	nop
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80073c8:	e005      	b.n	80073d6 <USBD_GetLen+0x1a>
    {
        len++;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	3301      	adds	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
        buf++;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3301      	adds	r3, #1
 80073d4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f5      	bne.n	80073ca <USBD_GetLen+0xe>
    }

    return len;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007408:	88fa      	ldrh	r2, [r7, #6]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	2100      	movs	r1, #0
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 fcde 	bl	8007dd6 <USBD_LL_Transmit>

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	2100      	movs	r1, #0
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fccc 	bl	8007dd6 <USBD_LL_Transmit>

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2203      	movs	r2, #3
 800745a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	2100      	movs	r1, #0
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fcd1 	bl	8007e1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	2100      	movs	r1, #0
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fcbf 	bl	8007e1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2204      	movs	r2, #4
 80074b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074b8:	2300      	movs	r3, #0
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fc89 	bl	8007dd6 <USBD_LL_Transmit>

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2205      	movs	r2, #5
 80074da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc99 	bl	8007e1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074f8:	2200      	movs	r2, #0
 80074fa:	4912      	ldr	r1, [pc, #72]	; (8007544 <MX_USB_DEVICE_Init+0x50>)
 80074fc:	4812      	ldr	r0, [pc, #72]	; (8007548 <MX_USB_DEVICE_Init+0x54>)
 80074fe:	f7fe ff9f 	bl	8006440 <USBD_Init>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007508:	f7f9 face 	bl	8000aa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800750c:	490f      	ldr	r1, [pc, #60]	; (800754c <MX_USB_DEVICE_Init+0x58>)
 800750e:	480e      	ldr	r0, [pc, #56]	; (8007548 <MX_USB_DEVICE_Init+0x54>)
 8007510:	f7fe ffc1 	bl	8006496 <USBD_RegisterClass>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800751a:	f7f9 fac5 	bl	8000aa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800751e:	490c      	ldr	r1, [pc, #48]	; (8007550 <MX_USB_DEVICE_Init+0x5c>)
 8007520:	4809      	ldr	r0, [pc, #36]	; (8007548 <MX_USB_DEVICE_Init+0x54>)
 8007522:	f7fe feef 	bl	8006304 <USBD_CDC_RegisterInterface>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800752c:	f7f9 fabc 	bl	8000aa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007530:	4805      	ldr	r0, [pc, #20]	; (8007548 <MX_USB_DEVICE_Init+0x54>)
 8007532:	f7fe ffca 	bl	80064ca <USBD_Start>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800753c:	f7f9 fab4 	bl	8000aa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007540:	bf00      	nop
 8007542:	bd80      	pop	{r7, pc}
 8007544:	2000012c 	.word	0x2000012c
 8007548:	2000038c 	.word	0x2000038c
 800754c:	20000018 	.word	0x20000018
 8007550:	2000011c 	.word	0x2000011c

08007554 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007558:	2200      	movs	r2, #0
 800755a:	4905      	ldr	r1, [pc, #20]	; (8007570 <CDC_Init_FS+0x1c>)
 800755c:	4805      	ldr	r0, [pc, #20]	; (8007574 <CDC_Init_FS+0x20>)
 800755e:	f7fe fee8 	bl	8006332 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007562:	4905      	ldr	r1, [pc, #20]	; (8007578 <CDC_Init_FS+0x24>)
 8007564:	4803      	ldr	r0, [pc, #12]	; (8007574 <CDC_Init_FS+0x20>)
 8007566:	f7fe fefe 	bl	8006366 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800756a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800756c:	4618      	mov	r0, r3
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000e28 	.word	0x20000e28
 8007574:	2000038c 	.word	0x2000038c
 8007578:	20000628 	.word	0x20000628

0800757c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007582:	4618      	mov	r0, r3
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	71fb      	strb	r3, [r7, #7]
 8007598:	4613      	mov	r3, r2
 800759a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b23      	cmp	r3, #35	; 0x23
 80075a0:	d84a      	bhi.n	8007638 <CDC_Control_FS+0xac>
 80075a2:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <CDC_Control_FS+0x1c>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	08007639 	.word	0x08007639
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	08007639 	.word	0x08007639
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007639 	.word	0x08007639
 80075c8:	08007639 	.word	0x08007639
 80075cc:	08007639 	.word	0x08007639
 80075d0:	08007639 	.word	0x08007639
 80075d4:	08007639 	.word	0x08007639
 80075d8:	08007639 	.word	0x08007639
 80075dc:	08007639 	.word	0x08007639
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007639 	.word	0x08007639
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007639 	.word	0x08007639
 80075f4:	08007639 	.word	0x08007639
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007639 	.word	0x08007639
 8007600:	08007639 	.word	0x08007639
 8007604:	08007639 	.word	0x08007639
 8007608:	08007639 	.word	0x08007639
 800760c:	08007639 	.word	0x08007639
 8007610:	08007639 	.word	0x08007639
 8007614:	08007639 	.word	0x08007639
 8007618:	08007639 	.word	0x08007639
 800761c:	08007639 	.word	0x08007639
 8007620:	08007639 	.word	0x08007639
 8007624:	08007639 	.word	0x08007639
 8007628:	08007639 	.word	0x08007639
 800762c:	08007639 	.word	0x08007639
 8007630:	08007639 	.word	0x08007639
 8007634:	08007639 	.word	0x08007639
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007638:	bf00      	nop
  }

  return (USBD_OK);
 800763a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	4805      	ldr	r0, [pc, #20]	; (800766c <CDC_Receive_FS+0x24>)
 8007656:	f7fe fe86 	bl	8006366 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800765a:	4804      	ldr	r0, [pc, #16]	; (800766c <CDC_Receive_FS+0x24>)
 800765c:	f7fe fec6 	bl	80063ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007660:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000038c 	.word	0x2000038c

08007670 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007680:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <CDC_Transmit_FS+0x48>)
 8007682:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007686:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007692:	2301      	movs	r3, #1
 8007694:	e00b      	b.n	80076ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007696:	887b      	ldrh	r3, [r7, #2]
 8007698:	461a      	mov	r2, r3
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4806      	ldr	r0, [pc, #24]	; (80076b8 <CDC_Transmit_FS+0x48>)
 800769e:	f7fe fe48 	bl	8006332 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076a2:	4805      	ldr	r0, [pc, #20]	; (80076b8 <CDC_Transmit_FS+0x48>)
 80076a4:	f7fe fe73 	bl	800638e <USBD_CDC_TransmitPacket>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	2000038c 	.word	0x2000038c

080076bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	6039      	str	r1, [r7, #0]
 80076c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2212      	movs	r2, #18
 80076cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076ce:	4b03      	ldr	r3, [pc, #12]	; (80076dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	20000148 	.word	0x20000148

080076e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2204      	movs	r2, #4
 80076f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076f2:	4b03      	ldr	r3, [pc, #12]	; (8007700 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	2000015c 	.word	0x2000015c

08007704 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4907      	ldr	r1, [pc, #28]	; (8007738 <USBD_FS_ProductStrDescriptor+0x34>)
 800771a:	4808      	ldr	r0, [pc, #32]	; (800773c <USBD_FS_ProductStrDescriptor+0x38>)
 800771c:	f7ff fe0c 	bl	8007338 <USBD_GetString>
 8007720:	e004      	b.n	800772c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4904      	ldr	r1, [pc, #16]	; (8007738 <USBD_FS_ProductStrDescriptor+0x34>)
 8007726:	4805      	ldr	r0, [pc, #20]	; (800773c <USBD_FS_ProductStrDescriptor+0x38>)
 8007728:	f7ff fe06 	bl	8007338 <USBD_GetString>
  }
  return USBD_StrDesc;
 800772c:	4b02      	ldr	r3, [pc, #8]	; (8007738 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20001628 	.word	0x20001628
 800773c:	08008148 	.word	0x08008148

08007740 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	4904      	ldr	r1, [pc, #16]	; (8007760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007750:	4804      	ldr	r0, [pc, #16]	; (8007764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007752:	f7ff fdf1 	bl	8007338 <USBD_GetString>
  return USBD_StrDesc;
 8007756:	4b02      	ldr	r3, [pc, #8]	; (8007760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20001628 	.word	0x20001628
 8007764:	08008160 	.word	0x08008160

08007768 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	221a      	movs	r2, #26
 8007778:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800777a:	f000 f843 	bl	8007804 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800777e:	4b02      	ldr	r3, [pc, #8]	; (8007788 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000160 	.word	0x20000160

0800778c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	6039      	str	r1, [r7, #0]
 8007796:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d105      	bne.n	80077aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	4907      	ldr	r1, [pc, #28]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077a2:	4808      	ldr	r0, [pc, #32]	; (80077c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077a4:	f7ff fdc8 	bl	8007338 <USBD_GetString>
 80077a8:	e004      	b.n	80077b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	4904      	ldr	r1, [pc, #16]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ae:	4805      	ldr	r0, [pc, #20]	; (80077c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077b0:	f7ff fdc2 	bl	8007338 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20001628 	.word	0x20001628
 80077c4:	08008174 	.word	0x08008174

080077c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4907      	ldr	r1, [pc, #28]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077de:	4808      	ldr	r0, [pc, #32]	; (8007800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e0:	f7ff fdaa 	bl	8007338 <USBD_GetString>
 80077e4:	e004      	b.n	80077f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	4904      	ldr	r1, [pc, #16]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077ea:	4805      	ldr	r0, [pc, #20]	; (8007800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077ec:	f7ff fda4 	bl	8007338 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f0:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20001628 	.word	0x20001628
 8007800:	08008180 	.word	0x08008180

08007804 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800780a:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <Get_SerialNum+0x44>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007810:	4b0e      	ldr	r3, [pc, #56]	; (800784c <Get_SerialNum+0x48>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007816:	4b0e      	ldr	r3, [pc, #56]	; (8007850 <Get_SerialNum+0x4c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800782a:	2208      	movs	r2, #8
 800782c:	4909      	ldr	r1, [pc, #36]	; (8007854 <Get_SerialNum+0x50>)
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f814 	bl	800785c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007834:	2204      	movs	r2, #4
 8007836:	4908      	ldr	r1, [pc, #32]	; (8007858 <Get_SerialNum+0x54>)
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	f000 f80f 	bl	800785c <IntToUnicode>
  }
}
 800783e:	bf00      	nop
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	1fff7a10 	.word	0x1fff7a10
 800784c:	1fff7a14 	.word	0x1fff7a14
 8007850:	1fff7a18 	.word	0x1fff7a18
 8007854:	20000162 	.word	0x20000162
 8007858:	20000172 	.word	0x20000172

0800785c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
 8007872:	e027      	b.n	80078c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	2b09      	cmp	r3, #9
 800787a:	d80b      	bhi.n	8007894 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	b2da      	uxtb	r2, r3
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4619      	mov	r1, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	440b      	add	r3, r1
 800788c:	3230      	adds	r2, #48	; 0x30
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	e00a      	b.n	80078aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0f1b      	lsrs	r3, r3, #28
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4619      	mov	r1, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	440b      	add	r3, r1
 80078a4:	3237      	adds	r2, #55	; 0x37
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	3301      	adds	r3, #1
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	3301      	adds	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
 80078c4:	7dfa      	ldrb	r2, [r7, #23]
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d3d3      	bcc.n	8007874 <IntToUnicode+0x18>
  }
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e0:	f107 0314 	add.w	r3, r7, #20
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f8:	d147      	bne.n	800798a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078fa:	2300      	movs	r3, #0
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	4b25      	ldr	r3, [pc, #148]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	4a24      	ldr	r2, [pc, #144]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 8007904:	f043 0301 	orr.w	r3, r3, #1
 8007908:	6313      	str	r3, [r2, #48]	; 0x30
 800790a:	4b22      	ldr	r3, [pc, #136]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800791c:	2300      	movs	r3, #0
 800791e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007924:	f107 0314 	add.w	r3, r7, #20
 8007928:	4619      	mov	r1, r3
 800792a:	481b      	ldr	r0, [pc, #108]	; (8007998 <HAL_PCD_MspInit+0xc0>)
 800792c:	f7f9 fd1c 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007930:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007936:	2302      	movs	r3, #2
 8007938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800793a:	2300      	movs	r3, #0
 800793c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800793e:	2303      	movs	r3, #3
 8007940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007942:	230a      	movs	r3, #10
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007946:	f107 0314 	add.w	r3, r7, #20
 800794a:	4619      	mov	r1, r3
 800794c:	4812      	ldr	r0, [pc, #72]	; (8007998 <HAL_PCD_MspInit+0xc0>)
 800794e:	f7f9 fd0b 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 8007954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007956:	4a0f      	ldr	r2, [pc, #60]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 8007958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795c:	6353      	str	r3, [r2, #52]	; 0x34
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 8007964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007966:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 8007968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800796c:	6453      	str	r3, [r2, #68]	; 0x44
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_PCD_MspInit+0xbc>)
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800797a:	2200      	movs	r2, #0
 800797c:	2100      	movs	r1, #0
 800797e:	2043      	movs	r0, #67	; 0x43
 8007980:	f7f9 fcbb 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007984:	2043      	movs	r0, #67	; 0x43
 8007986:	f7f9 fcd4 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800798a:	bf00      	nop
 800798c:	3728      	adds	r7, #40	; 0x28
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40023800 	.word	0x40023800
 8007998:	40020000 	.word	0x40020000

0800799c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7fe fdd2 	bl	800655c <USBD_LL_SetupStage>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	4619      	mov	r1, r3
 80079ea:	f7fe fe02 	bl	80065f2 <USBD_LL_DataOutStage>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	3348      	adds	r3, #72	; 0x48
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f7fe fe59 	bl	80066d4 <USBD_LL_DataInStage>
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe ff67 	bl	800690c <USBD_LL_SOF>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d001      	beq.n	8007a5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a5a:	f7f9 f825 	bl	8000aa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a64:	7bfa      	ldrb	r2, [r7, #15]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe ff19 	bl	80068a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fed2 	bl	800681e <USBD_LL_Reset>
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe ff14 	bl	80068c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <HAL_PCD_SuspendCallback+0x48>)
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	4a03      	ldr	r2, [pc, #12]	; (8007acc <HAL_PCD_SuspendCallback+0x48>)
 8007abe:	f043 0306 	orr.w	r3, r3, #6
 8007ac2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	e000ed00 	.word	0xe000ed00

08007ad0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe ff03 	bl	80068ea <USBD_LL_Resume>
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007afe:	78fa      	ldrb	r2, [r7, #3]
 8007b00:	4611      	mov	r1, r2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe ff29 	bl	800695a <USBD_LL_IsoOUTIncomplete>
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe ff0a 	bl	8006940 <USBD_LL_IsoINIncomplete>
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe ff16 	bl	8006974 <USBD_LL_DevConnected>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe ff13 	bl	800698a <USBD_LL_DevDisconnected>
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d13c      	bne.n	8007bf6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b7c:	4a20      	ldr	r2, [pc, #128]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b94:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b96:	2204      	movs	r2, #4
 8007b98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b9a:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ba0:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <USBD_LL_Init+0x94>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <USBD_LL_Init+0x94>)
 8007ba8:	2202      	movs	r2, #2
 8007baa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bac:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bca:	480d      	ldr	r0, [pc, #52]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bcc:	f7fa fb30 	bl	8002230 <HAL_PCD_Init>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bd6:	f7f8 ff67 	bl	8000aa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bda:	2180      	movs	r1, #128	; 0x80
 8007bdc:	4808      	ldr	r0, [pc, #32]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bde:	f7fb fc94 	bl	800350a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007be2:	2240      	movs	r2, #64	; 0x40
 8007be4:	2100      	movs	r1, #0
 8007be6:	4806      	ldr	r0, [pc, #24]	; (8007c00 <USBD_LL_Init+0x94>)
 8007be8:	f7fb fc48 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bec:	2280      	movs	r2, #128	; 0x80
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4803      	ldr	r0, [pc, #12]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bf2:	f7fb fc43 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20001828 	.word	0x20001828

08007c04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fa fc25 	bl	800246a <HAL_PCD_Start>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f92e 	bl	8007e88 <USBD_Get_USB_Status>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	4608      	mov	r0, r1
 8007c44:	4611      	mov	r1, r2
 8007c46:	461a      	mov	r2, r3
 8007c48:	4603      	mov	r3, r0
 8007c4a:	70fb      	strb	r3, [r7, #3]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70bb      	strb	r3, [r7, #2]
 8007c50:	4613      	mov	r3, r2
 8007c52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007c62:	78bb      	ldrb	r3, [r7, #2]
 8007c64:	883a      	ldrh	r2, [r7, #0]
 8007c66:	78f9      	ldrb	r1, [r7, #3]
 8007c68:	f7fa fffa 	bl	8002c60 <HAL_PCD_EP_Open>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f908 	bl	8007e88 <USBD_Get_USB_Status>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fb f843 	bl	8002d30 <HAL_PCD_EP_Close>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 f8e9 	bl	8007e88 <USBD_Get_USB_Status>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fb f91b 	bl	8002f1e <HAL_PCD_EP_SetStall>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f8ca 	bl	8007e88 <USBD_Get_USB_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fb f960 	bl	8002fe6 <HAL_PCD_EP_ClrStall>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f8ab 	bl	8007e88 <USBD_Get_USB_Status>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d52:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da0b      	bge.n	8007d74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	4613      	mov	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	333e      	adds	r3, #62	; 0x3e
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	e00b      	b.n	8007d8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fa ff2d 	bl	8002c16 <HAL_PCD_SetAddress>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f860 	bl	8007e88 <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	461a      	mov	r2, r3
 8007de2:	460b      	mov	r3, r1
 8007de4:	72fb      	strb	r3, [r7, #11]
 8007de6:	4613      	mov	r3, r2
 8007de8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007df8:	893b      	ldrh	r3, [r7, #8]
 8007dfa:	7af9      	ldrb	r1, [r7, #11]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	f7fb f844 	bl	8002e8a <HAL_PCD_EP_Transmit>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f83d 	bl	8007e88 <USBD_Get_USB_Status>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	461a      	mov	r2, r3
 8007e28:	460b      	mov	r3, r1
 8007e2a:	72fb      	strb	r3, [r7, #11]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	7af9      	ldrb	r1, [r7, #11]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	f7fa ffbe 	bl	8002dc4 <HAL_PCD_EP_Receive>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f81a 	bl	8007e88 <USBD_Get_USB_Status>
 8007e54:	4603      	mov	r3, r0
 8007e56:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007e58:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fa ffee 	bl	8002e5a <HAL_PCD_EP_GetRxCount>
 8007e7e:	4603      	mov	r3, r0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d817      	bhi.n	8007ecc <USBD_Get_USB_Status+0x44>
 8007e9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <USBD_Get_USB_Status+0x1c>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007ebb 	.word	0x08007ebb
 8007eac:	08007ec1 	.word	0x08007ec1
 8007eb0:	08007ec7 	.word	0x08007ec7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb8:	e00b      	b.n	8007ed2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ebe:	e008      	b.n	8007ed2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec4:	e005      	b.n	8007ed2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eca:	e002      	b.n	8007ed2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed0:	bf00      	nop
  }
  return usb_status;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <__errno>:
 8007ee0:	4b01      	ldr	r3, [pc, #4]	; (8007ee8 <__errno+0x8>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	2000017c 	.word	0x2000017c

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4e0d      	ldr	r6, [pc, #52]	; (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	; (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1ba4      	subs	r4, r4, r6
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2500      	movs	r5, #0
 8007ef8:	42a5      	cmp	r5, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4e0b      	ldr	r6, [pc, #44]	; (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	; (8007f30 <__libc_init_array+0x44>)
 8007f00:	f000 f8ea 	bl	80080d8 <_init>
 8007f04:	1ba4      	subs	r4, r4, r6
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2500      	movs	r5, #0
 8007f0a:	42a5      	cmp	r5, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f14:	4798      	blx	r3
 8007f16:	3501      	adds	r5, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f1e:	4798      	blx	r3
 8007f20:	3501      	adds	r5, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	080081b0 	.word	0x080081b0
 8007f28:	080081b0 	.word	0x080081b0
 8007f2c:	080081b0 	.word	0x080081b0
 8007f30:	080081b4 	.word	0x080081b4

08007f34 <malloc>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <malloc+0xc>)
 8007f36:	4601      	mov	r1, r0
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	f000 b861 	b.w	8008000 <_malloc_r>
 8007f3e:	bf00      	nop
 8007f40:	2000017c 	.word	0x2000017c

08007f44 <free>:
 8007f44:	4b02      	ldr	r3, [pc, #8]	; (8007f50 <free+0xc>)
 8007f46:	4601      	mov	r1, r0
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	f000 b80b 	b.w	8007f64 <_free_r>
 8007f4e:	bf00      	nop
 8007f50:	2000017c 	.word	0x2000017c

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <_free_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4605      	mov	r5, r0
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d045      	beq.n	8007ff8 <_free_r+0x94>
 8007f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f70:	1f0c      	subs	r4, r1, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bfb8      	it	lt
 8007f76:	18e4      	addlt	r4, r4, r3
 8007f78:	f000 f8ac 	bl	80080d4 <__malloc_lock>
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <_free_r+0x98>)
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	4610      	mov	r0, r2
 8007f82:	b933      	cbnz	r3, 8007f92 <_free_r+0x2e>
 8007f84:	6063      	str	r3, [r4, #4]
 8007f86:	6014      	str	r4, [r2, #0]
 8007f88:	4628      	mov	r0, r5
 8007f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8e:	f000 b8a2 	b.w	80080d6 <__malloc_unlock>
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	d90c      	bls.n	8007fb0 <_free_r+0x4c>
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	1862      	adds	r2, r4, r1
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bf04      	itt	eq
 8007f9e:	681a      	ldreq	r2, [r3, #0]
 8007fa0:	685b      	ldreq	r3, [r3, #4]
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	bf04      	itt	eq
 8007fa6:	1852      	addeq	r2, r2, r1
 8007fa8:	6022      	streq	r2, [r4, #0]
 8007faa:	6004      	str	r4, [r0, #0]
 8007fac:	e7ec      	b.n	8007f88 <_free_r+0x24>
 8007fae:	4613      	mov	r3, r2
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	b10a      	cbz	r2, 8007fb8 <_free_r+0x54>
 8007fb4:	42a2      	cmp	r2, r4
 8007fb6:	d9fa      	bls.n	8007fae <_free_r+0x4a>
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	1858      	adds	r0, r3, r1
 8007fbc:	42a0      	cmp	r0, r4
 8007fbe:	d10b      	bne.n	8007fd8 <_free_r+0x74>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	1858      	adds	r0, r3, r1
 8007fc6:	4282      	cmp	r2, r0
 8007fc8:	6019      	str	r1, [r3, #0]
 8007fca:	d1dd      	bne.n	8007f88 <_free_r+0x24>
 8007fcc:	6810      	ldr	r0, [r2, #0]
 8007fce:	6852      	ldr	r2, [r2, #4]
 8007fd0:	605a      	str	r2, [r3, #4]
 8007fd2:	4401      	add	r1, r0
 8007fd4:	6019      	str	r1, [r3, #0]
 8007fd6:	e7d7      	b.n	8007f88 <_free_r+0x24>
 8007fd8:	d902      	bls.n	8007fe0 <_free_r+0x7c>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	e7d3      	b.n	8007f88 <_free_r+0x24>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	1821      	adds	r1, r4, r0
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	bf04      	itt	eq
 8007fe8:	6811      	ldreq	r1, [r2, #0]
 8007fea:	6852      	ldreq	r2, [r2, #4]
 8007fec:	6062      	str	r2, [r4, #4]
 8007fee:	bf04      	itt	eq
 8007ff0:	1809      	addeq	r1, r1, r0
 8007ff2:	6021      	streq	r1, [r4, #0]
 8007ff4:	605c      	str	r4, [r3, #4]
 8007ff6:	e7c7      	b.n	8007f88 <_free_r+0x24>
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000204 	.word	0x20000204

08008000 <_malloc_r>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	1ccd      	adds	r5, r1, #3
 8008004:	f025 0503 	bic.w	r5, r5, #3
 8008008:	3508      	adds	r5, #8
 800800a:	2d0c      	cmp	r5, #12
 800800c:	bf38      	it	cc
 800800e:	250c      	movcc	r5, #12
 8008010:	2d00      	cmp	r5, #0
 8008012:	4606      	mov	r6, r0
 8008014:	db01      	blt.n	800801a <_malloc_r+0x1a>
 8008016:	42a9      	cmp	r1, r5
 8008018:	d903      	bls.n	8008022 <_malloc_r+0x22>
 800801a:	230c      	movs	r3, #12
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	2000      	movs	r0, #0
 8008020:	bd70      	pop	{r4, r5, r6, pc}
 8008022:	f000 f857 	bl	80080d4 <__malloc_lock>
 8008026:	4a21      	ldr	r2, [pc, #132]	; (80080ac <_malloc_r+0xac>)
 8008028:	6814      	ldr	r4, [r2, #0]
 800802a:	4621      	mov	r1, r4
 800802c:	b991      	cbnz	r1, 8008054 <_malloc_r+0x54>
 800802e:	4c20      	ldr	r4, [pc, #128]	; (80080b0 <_malloc_r+0xb0>)
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	b91b      	cbnz	r3, 800803c <_malloc_r+0x3c>
 8008034:	4630      	mov	r0, r6
 8008036:	f000 f83d 	bl	80080b4 <_sbrk_r>
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	4629      	mov	r1, r5
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f838 	bl	80080b4 <_sbrk_r>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d124      	bne.n	8008092 <_malloc_r+0x92>
 8008048:	230c      	movs	r3, #12
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 f842 	bl	80080d6 <__malloc_unlock>
 8008052:	e7e4      	b.n	800801e <_malloc_r+0x1e>
 8008054:	680b      	ldr	r3, [r1, #0]
 8008056:	1b5b      	subs	r3, r3, r5
 8008058:	d418      	bmi.n	800808c <_malloc_r+0x8c>
 800805a:	2b0b      	cmp	r3, #11
 800805c:	d90f      	bls.n	800807e <_malloc_r+0x7e>
 800805e:	600b      	str	r3, [r1, #0]
 8008060:	50cd      	str	r5, [r1, r3]
 8008062:	18cc      	adds	r4, r1, r3
 8008064:	4630      	mov	r0, r6
 8008066:	f000 f836 	bl	80080d6 <__malloc_unlock>
 800806a:	f104 000b 	add.w	r0, r4, #11
 800806e:	1d23      	adds	r3, r4, #4
 8008070:	f020 0007 	bic.w	r0, r0, #7
 8008074:	1ac3      	subs	r3, r0, r3
 8008076:	d0d3      	beq.n	8008020 <_malloc_r+0x20>
 8008078:	425a      	negs	r2, r3
 800807a:	50e2      	str	r2, [r4, r3]
 800807c:	e7d0      	b.n	8008020 <_malloc_r+0x20>
 800807e:	428c      	cmp	r4, r1
 8008080:	684b      	ldr	r3, [r1, #4]
 8008082:	bf16      	itet	ne
 8008084:	6063      	strne	r3, [r4, #4]
 8008086:	6013      	streq	r3, [r2, #0]
 8008088:	460c      	movne	r4, r1
 800808a:	e7eb      	b.n	8008064 <_malloc_r+0x64>
 800808c:	460c      	mov	r4, r1
 800808e:	6849      	ldr	r1, [r1, #4]
 8008090:	e7cc      	b.n	800802c <_malloc_r+0x2c>
 8008092:	1cc4      	adds	r4, r0, #3
 8008094:	f024 0403 	bic.w	r4, r4, #3
 8008098:	42a0      	cmp	r0, r4
 800809a:	d005      	beq.n	80080a8 <_malloc_r+0xa8>
 800809c:	1a21      	subs	r1, r4, r0
 800809e:	4630      	mov	r0, r6
 80080a0:	f000 f808 	bl	80080b4 <_sbrk_r>
 80080a4:	3001      	adds	r0, #1
 80080a6:	d0cf      	beq.n	8008048 <_malloc_r+0x48>
 80080a8:	6025      	str	r5, [r4, #0]
 80080aa:	e7db      	b.n	8008064 <_malloc_r+0x64>
 80080ac:	20000204 	.word	0x20000204
 80080b0:	20000208 	.word	0x20000208

080080b4 <_sbrk_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4c06      	ldr	r4, [pc, #24]	; (80080d0 <_sbrk_r+0x1c>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4605      	mov	r5, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	f7f8 ff20 	bl	8000f04 <_sbrk>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_sbrk_r+0x1a>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_sbrk_r+0x1a>
 80080cc:	602b      	str	r3, [r5, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20001c30 	.word	0x20001c30

080080d4 <__malloc_lock>:
 80080d4:	4770      	bx	lr

080080d6 <__malloc_unlock>:
 80080d6:	4770      	bx	lr

080080d8 <_init>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	bf00      	nop
 80080dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080de:	bc08      	pop	{r3}
 80080e0:	469e      	mov	lr, r3
 80080e2:	4770      	bx	lr

080080e4 <_fini>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	bf00      	nop
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr
