
Wifi_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f60  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b0  080081b0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080081b0  080081b0  000181b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081b8  080081b8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080081c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  200001e0  080083a0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c34  080083a0  00021c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019844  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037f9  00000000  00000000  00039a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003d250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a0f4  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012fff  00000000  00000000  0005989c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ed0d  00000000  00000000  0006c89b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb5a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  000fb624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e0 	.word	0x200001e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080e0 	.word	0x080080e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e4 	.word	0x200001e4
 80001d4:	080080e0 	.word	0x080080e0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0c0      	sub	sp, #256	; 0x100
 80004dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fda1 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f89b 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fa09 	bl	80008fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f91b 	bl	8000724 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ee:	f000 f947 	bl	8000780 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f2:	f000 f973 	bl	80007dc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f6:	f000 f9a1 	bl	800083c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004fa:	f000 f9d5 	bl	80008a8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004fe:	f006 fffd 	bl	80074fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t inicializacija = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  uint8_t prejetoSporocilo[255] = {};
 8000508:	463b      	mov	r3, r7
 800050a:	4618      	mov	r0, r3
 800050c:	23ff      	movs	r3, #255	; 0xff
 800050e:	461a      	mov	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f007 fd23 	bl	8007f5c <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Debug delay.
	  HAL_Delay(8000); // 8 s.
 8000516:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800051a:	f000 fdf5 	bl	8001108 <HAL_Delay>

	  if(!inicializacija){
 800051e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000522:	2b00      	cmp	r3, #0
 8000524:	d15c      	bne.n	80005e0 <main+0x108>
		  // Uart1 (PA15_TX ; PB7_RX)-> TCP server.
		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWMODE=2\r\n", 13, 1000); // 2 = AP.
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	220d      	movs	r2, #13
 800052c:	4936      	ldr	r1, [pc, #216]	; (8000608 <main+0x130>)
 800052e:	4837      	ldr	r0, [pc, #220]	; (800060c <main+0x134>)
 8000530:	f003 fe3b 	bl	80041aa <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 8000534:	4639      	mov	r1, r7
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	22ff      	movs	r2, #255	; 0xff
 800053c:	4833      	ldr	r0, [pc, #204]	; (800060c <main+0x134>)
 800053e:	f003 fecd 	bl	80042dc <HAL_UART_Receive>
		  memset(prejetoSporocilo, 0, 255);
 8000542:	463b      	mov	r3, r7
 8000544:	22ff      	movs	r2, #255	; 0xff
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f007 fd07 	bl	8007f5c <memset>

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWSAP=\"server\",\"123456780\",1,3\r\n", 35, 1000); // Enable multiple comms.
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	2223      	movs	r2, #35	; 0x23
 8000554:	492e      	ldr	r1, [pc, #184]	; (8000610 <main+0x138>)
 8000556:	482d      	ldr	r0, [pc, #180]	; (800060c <main+0x134>)
 8000558:	f003 fe27 	bl	80041aa <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 800055c:	4639      	mov	r1, r7
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	4829      	ldr	r0, [pc, #164]	; (800060c <main+0x134>)
 8000566:	f003 feb9 	bl	80042dc <HAL_UART_Receive>
		  CDC_Transmit_FS(prejetoSporocilo, 255);
 800056a:	463b      	mov	r3, r7
 800056c:	21ff      	movs	r1, #255	; 0xff
 800056e:	4618      	mov	r0, r3
 8000570:	f007 f882 	bl	8007678 <CDC_Transmit_FS>
		  memset(prejetoSporocilo, 0, 255);
 8000574:	463b      	mov	r3, r7
 8000576:	22ff      	movs	r2, #255	; 0xff
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fcee 	bl	8007f5c <memset>

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMUX=1\r\n", 13, 1000); // Enable multiple comms.
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	220d      	movs	r2, #13
 8000586:	4923      	ldr	r1, [pc, #140]	; (8000614 <main+0x13c>)
 8000588:	4820      	ldr	r0, [pc, #128]	; (800060c <main+0x134>)
 800058a:	f003 fe0e 	bl	80041aa <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 800058e:	4639      	mov	r1, r7
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	22ff      	movs	r2, #255	; 0xff
 8000596:	481d      	ldr	r0, [pc, #116]	; (800060c <main+0x134>)
 8000598:	f003 fea0 	bl	80042dc <HAL_UART_Receive>
		  memset(prejetoSporocilo, 0, 255);
 800059c:	463b      	mov	r3, r7
 800059e:	22ff      	movs	r2, #255	; 0xff
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f007 fcda 	bl	8007f5c <memset>

		  HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSERVER=1\r\n", 16, 1000); // Setup server with default port 333.
 80005a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ac:	2210      	movs	r2, #16
 80005ae:	491a      	ldr	r1, [pc, #104]	; (8000618 <main+0x140>)
 80005b0:	4816      	ldr	r0, [pc, #88]	; (800060c <main+0x134>)
 80005b2:	f003 fdfa 	bl	80041aa <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 80005b6:	4639      	mov	r1, r7
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	22ff      	movs	r2, #255	; 0xff
 80005be:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0x134>)
 80005c0:	f003 fe8c 	bl	80042dc <HAL_UART_Receive>
		  CDC_Transmit_FS(prejetoSporocilo, 255);
 80005c4:	463b      	mov	r3, r7
 80005c6:	21ff      	movs	r1, #255	; 0xff
 80005c8:	4618      	mov	r0, r3
 80005ca:	f007 f855 	bl	8007678 <CDC_Transmit_FS>
		  memset(prejetoSporocilo, 0, 255);
 80005ce:	463b      	mov	r3, r7
 80005d0:	22ff      	movs	r2, #255	; 0xff
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f007 fcc1 	bl	8007f5c <memset>

		  // Server IP: 192.168.4.1

		  inicializacija = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	  }

	  //HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSTATUS\r\n", 14, 1000); // Setup server with default port 333.
	  HAL_UART_Receive(&huart1, prejetoSporocilo, 255, 1000);
 80005e0:	4639      	mov	r1, r7
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <main+0x134>)
 80005ea:	f003 fe77 	bl	80042dc <HAL_UART_Receive>
	  CDC_Transmit_FS(prejetoSporocilo, 255);
 80005ee:	463b      	mov	r3, r7
 80005f0:	21ff      	movs	r1, #255	; 0xff
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 f840 	bl	8007678 <CDC_Transmit_FS>
	  memset(prejetoSporocilo, 0, 255);
 80005f8:	463b      	mov	r3, r7
 80005fa:	22ff      	movs	r2, #255	; 0xff
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 fcac 	bl	8007f5c <memset>
	  HAL_Delay(8000); // 8 s.
 8000604:	e787      	b.n	8000516 <main+0x3e>
 8000606:	bf00      	nop
 8000608:	080080f8 	.word	0x080080f8
 800060c:	20000260 	.word	0x20000260
 8000610:	08008108 	.word	0x08008108
 8000614:	0800812c 	.word	0x0800812c
 8000618:	0800813c 	.word	0x0800813c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09a      	sub	sp, #104	; 0x68
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 fc96 	bl	8007f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b31      	ldr	r3, [pc, #196]	; (800071c <SystemClock_Config+0x100>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a30      	ldr	r2, [pc, #192]	; (800071c <SystemClock_Config+0x100>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <SystemClock_Config+0x100>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <SystemClock_Config+0x104>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <SystemClock_Config+0x104>)
 8000678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0x104>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000698:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069e:	2304      	movs	r3, #4
 80006a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a2:	23a8      	movs	r3, #168	; 0xa8
 80006a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 ff4a 	bl	800354c <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006be:	f000 f9f7 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f976 	bl	80039d0 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ea:	f000 f9e1 	bl	8000ab0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006f2:	23c8      	movs	r3, #200	; 0xc8
 80006f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006f6:	2305      	movs	r3, #5
 80006f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fb52 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800070e:	f000 f9cf 	bl	8000ab0 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3768      	adds	r7, #104	; 0x68
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f000 ffa1 	bl	80016a8 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f9a0 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000020c 	.word	0x2000020c
 8000778:	40005400 	.word	0x40005400
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2S2_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_I2S2_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2S2_Init+0x50>)
 800078c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000790:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2S2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_I2S2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_I2S2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_I2S2_Init+0x50>)
 80007a6:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <MX_I2S2_Init+0x58>)
 80007a8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2S2_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2S2_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2S2_Init+0x50>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2S2_Init+0x50>)
 80007be:	f001 f89b 	bl	80018f8 <HAL_I2S_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 f972 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200002f8 	.word	0x200002f8
 80007d4:	40003800 	.word	0x40003800
 80007d8:	00017700 	.word	0x00017700

080007dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_I2S3_Init+0x54>)
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <MX_I2S3_Init+0x58>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2S3_Init+0x54>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_I2S3_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2S3_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_I2S3_Init+0x54>)
 80007fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000800:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_I2S3_Init+0x54>)
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <MX_I2S3_Init+0x5c>)
 8000806:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_I2S3_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2S3_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_I2S3_Init+0x54>)
 800081c:	f001 f86c 	bl	80018f8 <HAL_I2S_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000826:	f000 f943 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000340 	.word	0x20000340
 8000834:	40003c00 	.word	0x40003c00
 8000838:	00017700 	.word	0x00017700

0800083c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_SPI1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_SPI1_Init+0x64>)
 800088e:	f003 fbdb 	bl	8004048 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f90a 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200002a0 	.word	0x200002a0
 80008a4:	40013000 	.word	0x40013000

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART1_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f003 fc16 	bl	8004110 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f8e1 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000260 	.word	0x20000260
 80008f8:	40011000 	.word	0x40011000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	4b60      	ldr	r3, [pc, #384]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a5f      	ldr	r2, [pc, #380]	; (8000a98 <MX_GPIO_Init+0x19c>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b5d      	ldr	r3, [pc, #372]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a58      	ldr	r2, [pc, #352]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b56      	ldr	r3, [pc, #344]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b52      	ldr	r3, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b4f      	ldr	r3, [pc, #316]	; (8000a98 <MX_GPIO_Init+0x19c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b4b      	ldr	r3, [pc, #300]	; (8000a98 <MX_GPIO_Init+0x19c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a4a      	ldr	r2, [pc, #296]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a43      	ldr	r2, [pc, #268]	; (8000a98 <MX_GPIO_Init+0x19c>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <MX_GPIO_Init+0x19c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b3d      	ldr	r3, [pc, #244]	; (8000a98 <MX_GPIO_Init+0x19c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a3c      	ldr	r2, [pc, #240]	; (8000a98 <MX_GPIO_Init+0x19c>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <MX_GPIO_Init+0x19c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2108      	movs	r1, #8
 80009be:	4837      	ldr	r0, [pc, #220]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 80009c0:	f000 fe58 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	4835      	ldr	r0, [pc, #212]	; (8000aa0 <MX_GPIO_Init+0x1a4>)
 80009ca:	f000 fe53 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009ce:	2200      	movs	r2, #0
 80009d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d4:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <MX_GPIO_Init+0x1a8>)
 80009d6:	f000 fe4d 	bl	8001674 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009da:	2304      	movs	r3, #4
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	482b      	ldr	r0, [pc, #172]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 80009ee:	f000 fcbf 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009f2:	2308      	movs	r3, #8
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4824      	ldr	r0, [pc, #144]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000a0a:	f000 fcb1 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a0e:	2332      	movs	r3, #50	; 0x32
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0x1ac>)
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481e      	ldr	r0, [pc, #120]	; (8000a9c <MX_GPIO_Init+0x1a0>)
 8000a22:	f000 fca5 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0x1a4>)
 8000a3e:	f000 fc97 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0x1ac>)
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_GPIO_Init+0x1b0>)
 8000a56:	f000 fc8b 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0x1a8>)
 8000a74:	f000 fc7c 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_GPIO_Init+0x1a8>)
 8000a8c:	f000 fc70 	bl	8001370 <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	; 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	10120000 	.word	0x10120000
 8000aac:	40020000 	.word	0x40020000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_I2C_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	2312      	movs	r3, #18
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b60:	2304      	movs	r3, #4
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_I2C_MspInit+0x8c>)
 8000b6c:	f000 fc00 	bl	8001370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a59      	ldr	r2, [pc, #356]	; (8000d24 <HAL_I2S_MspInit+0x184>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d15b      	bne.n	8000c7a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a57      	ldr	r2, [pc, #348]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b55      	ldr	r3, [pc, #340]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	4b51      	ldr	r3, [pc, #324]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a50      	ldr	r2, [pc, #320]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b4e      	ldr	r3, [pc, #312]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a49      	ldr	r2, [pc, #292]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c16:	2304      	movs	r3, #4
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c26:	2306      	movs	r3, #6
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	483e      	ldr	r0, [pc, #248]	; (8000d2c <HAL_I2S_MspInit+0x18c>)
 8000c32:	f000 fb9d 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c36:	2308      	movs	r3, #8
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c46:	2305      	movs	r3, #5
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4836      	ldr	r0, [pc, #216]	; (8000d2c <HAL_I2S_MspInit+0x18c>)
 8000c52:	f000 fb8d 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	482f      	ldr	r0, [pc, #188]	; (8000d30 <HAL_I2S_MspInit+0x190>)
 8000c74:	f000 fb7c 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c78:	e04f      	b.n	8000d1a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a2d      	ldr	r2, [pc, #180]	; (8000d34 <HAL_I2S_MspInit+0x194>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d14a      	bne.n	8000d1a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_I2S_MspInit+0x188>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce8:	2306      	movs	r3, #6
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <HAL_I2S_MspInit+0x198>)
 8000cf4:	f000 fb3c 	bl	8001370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cf8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_I2S_MspInit+0x18c>)
 8000d16:	f000 fb2b 	bl	8001370 <HAL_GPIO_Init>
}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	; 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40003800 	.word	0x40003800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40003c00 	.word	0x40003c00
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_SPI_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12b      	bne.n	8000db6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d96:	23e0      	movs	r3, #224	; 0xe0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da6:	2305      	movs	r3, #5
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000db2:	f000 fadd 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <HAL_UART_MspInit+0xc0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d14a      	bne.n	8000e84 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_UART_MspInit+0xc4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e54:	2307      	movs	r3, #7
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <HAL_UART_MspInit+0xc8>)
 8000e60:	f000 fa86 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e74:	2307      	movs	r3, #7
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HAL_UART_MspInit+0xcc>)
 8000e80:	f000 fa76 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef0:	f000 f8ea 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <OTG_FS_IRQHandler+0x10>)
 8000efe:	f001 faeb 	bl	80024d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20001828 	.word	0x20001828

08000f0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x50>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x16>
		heap_end = &end;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <_sbrk+0x50>)
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <_sbrk+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <_sbrk+0x50>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <_sbrk+0x50>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	466a      	mov	r2, sp
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d907      	bls.n	8000f46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f36:	f006 ffd7 	bl	8007ee8 <__errno>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	e006      	b.n	8000f54 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <_sbrk+0x50>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <_sbrk+0x50>)
 8000f50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001fc 	.word	0x200001fc
 8000f60:	20001c38 	.word	0x20001c38

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <SystemInit+0x60>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <SystemInit+0x60>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <SystemInit+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <SystemInit+0x64>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <SystemInit+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <SystemInit+0x64>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <SystemInit+0x64>)
 8000f90:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <SystemInit+0x64>)
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <SystemInit+0x68>)
 8000f9e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <SystemInit+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <SystemInit+0x64>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000faa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SystemInit+0x60>)
 8000fb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb8:	609a      	str	r2, [r3, #8]
#endif
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	24003010 	.word	0x24003010

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fd6:	e003      	b.n	8000fe0 <LoopCopyDataInit>

08000fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fde:	3104      	adds	r1, #4

08000fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe8:	d3f6      	bcc.n	8000fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fec:	e002      	b.n	8000ff4 <LoopFillZerobss>

08000fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff0:	f842 3b04 	str.w	r3, [r2], #4

08000ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff8:	d3f9      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffb3 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f006 ff79 	bl	8007ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fa69 	bl	80004d8 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800100c:	080081c0 	.word	0x080081c0
  ldr  r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001014:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001018:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800101c:	20001c34 	.word	0x20001c34

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f94d 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fd32 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f965 	bl	8001356 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f92d 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000388 	.word	0x20000388

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000388 	.word	0x20000388

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_Delay+0x40>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e159      	b.n	8001640 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 8148 	bne.w	800163a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x4a>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	d123      	bne.n	8001402 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	69b9      	ldr	r1, [r7, #24]
 80013fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0203 	and.w	r2, r3, #3
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d00b      	beq.n	8001456 <HAL_GPIO_Init+0xe6>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800144a:	2b11      	cmp	r3, #17
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b12      	cmp	r3, #18
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a2 	beq.w	800163a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_GPIO_Init+0x2e4>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a55      	ldr	r2, [pc, #340]	; (8001654 <HAL_GPIO_Init+0x2e4>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_GPIO_Init+0x2e4>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001512:	4a51      	ldr	r2, [pc, #324]	; (8001658 <HAL_GPIO_Init+0x2e8>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_GPIO_Init+0x2ec>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0x202>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a47      	ldr	r2, [pc, #284]	; (8001660 <HAL_GPIO_Init+0x2f0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x1fe>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a46      	ldr	r2, [pc, #280]	; (8001664 <HAL_GPIO_Init+0x2f4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x1fa>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_GPIO_Init+0x2f8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x1f6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_GPIO_Init+0x2fc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x1f2>
 800155e:	2304      	movs	r3, #4
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x204>
 8001562:	2307      	movs	r3, #7
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x204>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x204>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x204>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x204>
 8001572:	2300      	movs	r3, #0
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001584:	4934      	ldr	r1, [pc, #208]	; (8001658 <HAL_GPIO_Init+0x2e8>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_GPIO_Init+0x300>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b6:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <HAL_GPIO_Init+0x300>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_GPIO_Init+0x300>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <HAL_GPIO_Init+0x300>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_GPIO_Init+0x300>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <HAL_GPIO_Init+0x300>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_GPIO_Init+0x300>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_GPIO_Init+0x300>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	f67f aea2 	bls.w	800138c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001648:	bf00      	nop
 800164a:	3724      	adds	r7, #36	; 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40013c00 	.word	0x40013c00

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e10f      	b.n	80018da <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fa1e 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2224      	movs	r2, #36	; 0x24
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ec:	f002 fb36 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 80016f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a7b      	ldr	r2, [pc, #492]	; (80018e4 <HAL_I2C_Init+0x23c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d807      	bhi.n	800170c <HAL_I2C_Init+0x64>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a7a      	ldr	r2, [pc, #488]	; (80018e8 <HAL_I2C_Init+0x240>)
 8001700:	4293      	cmp	r3, r2
 8001702:	bf94      	ite	ls
 8001704:	2301      	movls	r3, #1
 8001706:	2300      	movhi	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e006      	b.n	800171a <HAL_I2C_Init+0x72>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4a77      	ldr	r2, [pc, #476]	; (80018ec <HAL_I2C_Init+0x244>)
 8001710:	4293      	cmp	r3, r2
 8001712:	bf94      	ite	ls
 8001714:	2301      	movls	r3, #1
 8001716:	2300      	movhi	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0db      	b.n	80018da <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_I2C_Init+0x248>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a64      	ldr	r2, [pc, #400]	; (80018e4 <HAL_I2C_Init+0x23c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d802      	bhi.n	800175c <HAL_I2C_Init+0xb4>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	e009      	b.n	8001770 <HAL_I2C_Init+0xc8>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a63      	ldr	r2, [pc, #396]	; (80018f4 <HAL_I2C_Init+0x24c>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	3301      	adds	r3, #1
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4956      	ldr	r1, [pc, #344]	; (80018e4 <HAL_I2C_Init+0x23c>)
 800178c:	428b      	cmp	r3, r1
 800178e:	d80d      	bhi.n	80017ac <HAL_I2C_Init+0x104>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e59      	subs	r1, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fbb1 f3f3 	udiv	r3, r1, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	bf38      	it	cc
 80017a8:	2304      	movcc	r3, #4
 80017aa:	e04f      	b.n	800184c <HAL_I2C_Init+0x1a4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <HAL_I2C_Init+0x130>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	e012      	b.n	80017fe <HAL_I2C_Init+0x156>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e58      	subs	r0, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	0099      	lsls	r1, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x15e>
 8001802:	2301      	movs	r3, #1
 8001804:	e022      	b.n	800184c <HAL_I2C_Init+0x1a4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10e      	bne.n	800182c <HAL_I2C_Init+0x184>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1e58      	subs	r0, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6859      	ldr	r1, [r3, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	440b      	add	r3, r1
 800181c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	e00f      	b.n	800184c <HAL_I2C_Init+0x1a4>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e58      	subs	r0, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	0099      	lsls	r1, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	6809      	ldr	r1, [r1, #0]
 8001850:	4313      	orrs	r3, r2
 8001852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800187a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6911      	ldr	r1, [r2, #16]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68d2      	ldr	r2, [r2, #12]
 8001886:	4311      	orrs	r1, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	430b      	orrs	r3, r1
 800188e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	000186a0 	.word	0x000186a0
 80018e8:	001e847f 	.word	0x001e847f
 80018ec:	003d08ff 	.word	0x003d08ff
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	10624dd3 	.word	0x10624dd3

080018f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e128      	b.n	8001b5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a90      	ldr	r2, [pc, #576]	; (8001b64 <HAL_I2S_Init+0x26c>)
 8001922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff f93b 	bl	8000ba0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001940:	f023 030f 	bic.w	r3, r3, #15
 8001944:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2202      	movs	r2, #2
 800194c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d060      	beq.n	8001a18 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800195e:	2310      	movs	r3, #16
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e001      	b.n	8001968 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b20      	cmp	r3, #32
 800196e:	d802      	bhi.n	8001976 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001976:	2001      	movs	r0, #1
 8001978:	f002 fb08 	bl	8003f8c <HAL_RCCEx_GetPeriphCLKFreq>
 800197c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001986:	d125      	bne.n	80019d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d010      	beq.n	80019b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	fbb2 f2f3 	udiv	r2, r2, r3
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	3305      	adds	r3, #5
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	e01f      	b.n	80019f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	3305      	adds	r3, #5
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e00e      	b.n	80019f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	3305      	adds	r3, #5
 80019f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <HAL_I2S_Init+0x270>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	08db      	lsrs	r3, r3, #3
 80019fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	e003      	b.n	8001a20 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d902      	bls.n	8001a2c <HAL_I2S_Init+0x134>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	2bff      	cmp	r3, #255	; 0xff
 8001a2a:	d907      	bls.n	8001a3c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f043 0210 	orr.w	r2, r3, #16
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e08f      	b.n	8001b5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	ea42 0103 	orr.w	r1, r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a5a:	f023 030f 	bic.w	r3, r3, #15
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6851      	ldr	r1, [r2, #4]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6892      	ldr	r2, [r2, #8]
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68d2      	ldr	r2, [r2, #12]
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6992      	ldr	r2, [r2, #24]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a7e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d161      	bne.n	8001b4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a38      	ldr	r2, [pc, #224]	; (8001b6c <HAL_I2S_Init+0x274>)
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <HAL_I2S_Init+0x278>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_I2S_Init+0x1a4>
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_I2S_Init+0x27c>)
 8001a9a:	e001      	b.n	8001aa0 <HAL_I2S_Init+0x1a8>
 8001a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	4932      	ldr	r1, [pc, #200]	; (8001b70 <HAL_I2S_Init+0x278>)
 8001aa8:	428a      	cmp	r2, r1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_I2S_Init+0x1b8>
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_I2S_Init+0x27c>)
 8001aae:	e001      	b.n	8001ab4 <HAL_I2S_Init+0x1bc>
 8001ab0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ab4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ab8:	f023 030f 	bic.w	r3, r3, #15
 8001abc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <HAL_I2S_Init+0x278>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_I2S_Init+0x1d4>
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_I2S_Init+0x27c>)
 8001aca:	e001      	b.n	8001ad0 <HAL_I2S_Init+0x1d8>
 8001acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_I2S_Init+0x278>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_I2S_Init+0x1ea>
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_I2S_Init+0x27c>)
 8001ae0:	e001      	b.n	8001ae6 <HAL_I2S_Init+0x1ee>
 8001ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af2:	d003      	beq.n	8001afc <HAL_I2S_Init+0x204>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e001      	b.n	8001b08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	b299      	uxth	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b1e:	4303      	orrs	r3, r0
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	430b      	orrs	r3, r1
 8001b24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_I2S_Init+0x278>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2S_Init+0x24c>
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_I2S_Init+0x27c>)
 8001b42:	e001      	b.n	8001b48 <HAL_I2S_Init+0x250>
 8001b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b48:	897a      	ldrh	r2, [r7, #10]
 8001b4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	08001c6f 	.word	0x08001c6f
 8001b68:	cccccccd 	.word	0xcccccccd
 8001b6c:	08001d85 	.word	0x08001d85
 8001b70:	40003800 	.word	0x40003800
 8001b74:	40003400 	.word	0x40003400

08001b78 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	881a      	ldrh	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	1c9a      	adds	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bf8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffb8 	bl	8001b78 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	b292      	uxth	r2, r2
 8001c24:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	1c9a      	adds	r2, r3, #2
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10e      	bne.n	8001c66 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff93 	bl	8001b8c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d13a      	bne.n	8001d00 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d109      	bne.n	8001ca8 <I2S_IRQHandler+0x3a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	d102      	bne.n	8001ca8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffb4 	bl	8001c10 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	2b40      	cmp	r3, #64	; 0x40
 8001cb0:	d126      	bne.n	8001d00 <I2S_IRQHandler+0x92>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d11f      	bne.n	8001d00 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff50 	bl	8001ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d136      	bne.n	8001d7a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d109      	bne.n	8001d2a <I2S_IRQHandler+0xbc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d102      	bne.n	8001d2a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff45 	bl	8001bb4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d122      	bne.n	8001d7a <I2S_IRQHandler+0x10c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d11b      	bne.n	8001d7a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d50:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff13 	bl	8001ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4aa2      	ldr	r2, [pc, #648]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d9e:	4ba2      	ldr	r3, [pc, #648]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001da0:	e001      	b.n	8001da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a9b      	ldr	r2, [pc, #620]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001dbc:	4b9a      	ldr	r3, [pc, #616]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dbe:	e001      	b.n	8001dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd0:	d004      	beq.n	8001ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8099 	bne.w	8001f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f925 	bl	8002040 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f9c8 	bl	80021a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e16:	2b40      	cmp	r3, #64	; 0x40
 8001e18:	d13a      	bne.n	8001e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d035      	beq.n	8001e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a7e      	ldr	r2, [pc, #504]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e2e:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e30:	e001      	b.n	8001e36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4979      	ldr	r1, [pc, #484]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e3e:	428b      	cmp	r3, r1
 8001e40:	d101      	bne.n	8001e46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e42:	4b79      	ldr	r3, [pc, #484]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e44:	e001      	b.n	8001e4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e4e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f043 0202 	orr.w	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe88 	bl	8001ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	f040 80be 	bne.w	8002018 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80b8 	beq.w	8002018 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eb6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a59      	ldr	r2, [pc, #356]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001ec2:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ec4:	e001      	b.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4954      	ldr	r1, [pc, #336]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ed2:	428b      	cmp	r3, r1
 8001ed4:	d101      	bne.n	8001eda <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ed6:	4b54      	ldr	r3, [pc, #336]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ed8:	e001      	b.n	8001ede <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ee2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f043 0204 	orr.w	r2, r3, #4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fe4a 	bl	8001ba0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f0c:	e084      	b.n	8002018 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d107      	bne.n	8001f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8be 	bl	80020a4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8fd 	bl	800213c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d12f      	bne.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d02a      	beq.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f64:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f72:	e001      	b.n	8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4929      	ldr	r1, [pc, #164]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f80:	428b      	cmp	r3, r1
 8001f82:	d101      	bne.n	8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f86:	e001      	b.n	8001f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f043 0202 	orr.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fdfa 	bl	8001ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d131      	bne.n	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d02c      	beq.n	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fcc:	e001      	b.n	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4912      	ldr	r1, [pc, #72]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fe0:	e001      	b.n	8001fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fe6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ffa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fdc5 	bl	8001ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002016:	e000      	b.n	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002018:	bf00      	nop
}
 800201a:	bf00      	nop
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40003800 	.word	0x40003800
 8002028:	40003400 	.word	0x40003400

0800202c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c99      	adds	r1, r3, #2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6251      	str	r1, [r2, #36]	; 0x24
 8002052:	881a      	ldrh	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d113      	bne.n	800209a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002080:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ffc9 	bl	800202c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	1c99      	adds	r1, r3, #2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6251      	str	r1, [r2, #36]	; 0x24
 80020b6:	8819      	ldrh	r1, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <I2SEx_TxISR_I2SExt+0x90>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <I2SEx_TxISR_I2SExt+0x22>
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <I2SEx_TxISR_I2SExt+0x94>)
 80020c4:	e001      	b.n	80020ca <I2SEx_TxISR_I2SExt+0x26>
 80020c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ca:	460a      	mov	r2, r1
 80020cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d121      	bne.n	800212a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <I2SEx_TxISR_I2SExt+0x90>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <I2SEx_TxISR_I2SExt+0x50>
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <I2SEx_TxISR_I2SExt+0x94>)
 80020f2:	e001      	b.n	80020f8 <I2SEx_TxISR_I2SExt+0x54>
 80020f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <I2SEx_TxISR_I2SExt+0x90>)
 8002100:	428b      	cmp	r3, r1
 8002102:	d101      	bne.n	8002108 <I2SEx_TxISR_I2SExt+0x64>
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <I2SEx_TxISR_I2SExt+0x94>)
 8002106:	e001      	b.n	800210c <I2SEx_TxISR_I2SExt+0x68>
 8002108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800210c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002110:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d106      	bne.n	800212a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff81 	bl	800202c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40003800 	.word	0x40003800
 8002138:	40003400 	.word	0x40003400

0800213c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68d8      	ldr	r0, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	1c99      	adds	r1, r3, #2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002154:	b282      	uxth	r2, r0
 8002156:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d113      	bne.n	8002198 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800217e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff4a 	bl	800202c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a20      	ldr	r2, [pc, #128]	; (8002230 <I2SEx_RxISR_I2SExt+0x90>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <I2SEx_RxISR_I2SExt+0x16>
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <I2SEx_RxISR_I2SExt+0x94>)
 80021b4:	e001      	b.n	80021ba <I2SEx_RxISR_I2SExt+0x1a>
 80021b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ba:	68d8      	ldr	r0, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	1c99      	adds	r1, r3, #2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021c6:	b282      	uxth	r2, r0
 80021c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d121      	bne.n	8002226 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <I2SEx_RxISR_I2SExt+0x90>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <I2SEx_RxISR_I2SExt+0x50>
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <I2SEx_RxISR_I2SExt+0x94>)
 80021ee:	e001      	b.n	80021f4 <I2SEx_RxISR_I2SExt+0x54>
 80021f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	490d      	ldr	r1, [pc, #52]	; (8002230 <I2SEx_RxISR_I2SExt+0x90>)
 80021fc:	428b      	cmp	r3, r1
 80021fe:	d101      	bne.n	8002204 <I2SEx_RxISR_I2SExt+0x64>
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <I2SEx_RxISR_I2SExt+0x94>)
 8002202:	e001      	b.n	8002208 <I2SEx_RxISR_I2SExt+0x68>
 8002204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002208:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800220c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff03 	bl	800202c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40003800 	.word	0x40003800
 8002234:	40003400 	.word	0x40003400

08002238 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223a:	b08f      	sub	sp, #60	; 0x3c
 800223c:	af0a      	add	r7, sp, #40	; 0x28
 800223e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e10f      	b.n	800246a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f005 fb3b 	bl	80078e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fc36 	bl	8004afa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	687e      	ldr	r6, [r7, #4]
 8002296:	466d      	mov	r5, sp
 8002298:	f106 0410 	add.w	r4, r6, #16
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ac:	1d33      	adds	r3, r6, #4
 80022ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b0:	6838      	ldr	r0, [r7, #0]
 80022b2:	f002 fb0d 	bl	80048d0 <USB_CoreInit>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0d0      	b.n	800246a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fc24 	bl	8004b1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e04a      	b.n	8002370 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	333d      	adds	r3, #61	; 0x3d
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	333c      	adds	r3, #60	; 0x3c
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	b298      	uxth	r0, r3
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3342      	adds	r3, #66	; 0x42
 8002316:	4602      	mov	r2, r0
 8002318:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3344      	adds	r3, #68	; 0x44
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3348      	adds	r3, #72	; 0x48
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	3350      	adds	r3, #80	; 0x50
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	3301      	adds	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d3af      	bcc.n	80022da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e044      	b.n	800240a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	3301      	adds	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d3b5      	bcc.n	8002380 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	687e      	ldr	r6, [r7, #4]
 800241c:	466d      	mov	r5, sp
 800241e:	f106 0410 	add.w	r4, r6, #16
 8002422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800242e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002432:	1d33      	adds	r3, r6, #4
 8002434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002436:	6838      	ldr	r0, [r7, #0]
 8002438:	f002 fb9a 	bl	8004b70 <USB_DevInit>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00d      	b.n	800246a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fb8f 	bl	8005b86 <USB_DevDisconnect>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002472 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_PCD_Start+0x1c>
 800248a:	2302      	movs	r3, #2
 800248c:	e020      	b.n	80024d0 <HAL_PCD_Start+0x5e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	2b01      	cmp	r3, #1
 800249c:	d109      	bne.n	80024b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d005      	beq.n	80024b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fb4d 	bl	8005b56 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fb09 	bl	8004ad8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b08d      	sub	sp, #52	; 0x34
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fbf4 	bl	8005cdc <USB_GetMode>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 838e 	bne.w	8002c18 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 fb58 	bl	8005bb6 <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8384 	beq.w	8002c16 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fb4f 	bl	8005bb6 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 0202 	and.w	r2, r2, #2
 8002530:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fb3d 	bl	8005bb6 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002546:	d17b      	bne.n	8002640 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 fb43 	bl	8005bdc <USB_ReadDevAllOutEpInterrupt>
 8002556:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002558:	e06f      	b.n	800263a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d064      	beq.n	800262e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fb68 	bl	8005c44 <USB_ReadDevOutEPInterrupt>
 8002574:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258c:	461a      	mov	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fe0d 	bl	80031b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00c      	beq.n	80025be <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 ff0c 	bl	80033c4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	2308      	movs	r3, #8
 80025bc:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d4:	461a      	mov	r2, r3
 80025d6:	2310      	movs	r3, #16
 80025d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d108      	bne.n	80025fe <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025f6:	461a      	mov	r2, r3
 80025f8:	2101      	movs	r1, #1
 80025fa:	f003 fbb3 	bl	8005d64 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260a:	461a      	mov	r2, r3
 800260c:	2320      	movs	r3, #32
 800260e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002626:	461a      	mov	r2, r3
 8002628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800262c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	3301      	adds	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d18c      	bne.n	800255a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f003 fab6 	bl	8005bb6 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002654:	f040 80c4 	bne.w	80027e0 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fad7 	bl	8005c10 <USB_ReadDevAllInEpInterrupt>
 8002662:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002668:	e0b6      	b.n	80027d8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80ab 	beq.w	80027cc <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fafd 	bl	8005c80 <USB_ReadDevInEPInterrupt>
 8002686:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d05b      	beq.n	800274a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	2201      	movs	r2, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69f9      	ldr	r1, [r7, #28]
 80026ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026b2:	4013      	ands	r3, r2
 80026b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c2:	461a      	mov	r2, r3
 80026c4:	2301      	movs	r3, #1
 80026c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d11b      	bne.n	8002708 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3348      	adds	r3, #72	; 0x48
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4403      	add	r3, r0
 80026f0:	3344      	adds	r3, #68	; 0x44
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4419      	add	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4403      	add	r3, r0
 8002704:	3348      	adds	r3, #72	; 0x48
 8002706:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f005 f975 	bl	80079fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d116      	bne.n	800274a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d113      	bne.n	800274a <HAL_PCD_IRQHandler+0x272>
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3350      	adds	r3, #80	; 0x50
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d108      	bne.n	800274a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002742:	461a      	mov	r2, r3
 8002744:	2101      	movs	r1, #1
 8002746:	f003 fb0d 	bl	8005d64 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002760:	461a      	mov	r2, r3
 8002762:	2308      	movs	r3, #8
 8002764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277c:	461a      	mov	r2, r3
 800277e:	2310      	movs	r3, #16
 8002780:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002798:	461a      	mov	r2, r3
 800279a:	2340      	movs	r3, #64	; 0x40
 800279c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b4:	461a      	mov	r2, r3
 80027b6:	2302      	movs	r3, #2
 80027b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fc67 	bl	800309a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	3301      	adds	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f47f af45 	bne.w	800266a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 f9e6 	bl	8005bb6 <USB_ReadInterrupts>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027f4:	d122      	bne.n	800283c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800281c:	2100      	movs	r1, #0
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fe88 	bl	8003534 <HAL_PCDEx_LPM_Callback>
 8002824:	e002      	b.n	800282c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f005 f956 	bl	8007ad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800283a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f003 f9b8 	bl	8005bb6 <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800284c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002850:	d112      	bne.n	8002878 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d102      	bne.n	8002868 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f005 f912 	bl	8007a8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002876:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f003 f99a 	bl	8005bb6 <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288c:	f040 80a7 	bne.w	80029de <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2110      	movs	r1, #16
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fad2 	bl	8004e54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b4:	e036      	b.n	8002924 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c2:	461a      	mov	r2, r3
 80028c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028da:	0151      	lsls	r1, r2, #5
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	440a      	add	r2, r1
 80028e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	461a      	mov	r2, r3
 80028f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290e:	0151      	lsls	r1, r2, #5
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	440a      	add	r2, r1
 8002914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002918:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800291c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	3301      	adds	r3, #1
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292a:	429a      	cmp	r2, r3
 800292c:	d3c3      	bcc.n	80028b6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002940:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f043 030b 	orr.w	r3, r3, #11
 800295e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002970:	f043 030b 	orr.w	r3, r3, #11
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	e015      	b.n	80029a4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002986:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800298a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800298e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299e:	f043 030b 	orr.w	r3, r3, #11
 80029a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029c8:	461a      	mov	r2, r3
 80029ca:	f003 f9cb 	bl	8005d64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 f8e7 	bl	8005bb6 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	d124      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 f97d 	bl	8005cf8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fa87 	bl	8004f16 <USB_GetDevSpeed>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681c      	ldr	r4, [r3, #0]
 8002a14:	f001 f996 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8002a18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	4620      	mov	r0, r4
 8002a24:	f001 ffb6 	bl	8004994 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f005 f810 	bl	8007a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 f8b7 	bl	8005bb6 <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d161      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0210 	bic.w	r2, r2, #16
 8002a60:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	0c5b      	lsrs	r3, r3, #17
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d124      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d035      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6a38      	ldr	r0, [r7, #32]
 8002aae:	f002 ff2f 	bl	8005910 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002abe:	441a      	add	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad0:	441a      	add	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	619a      	str	r2, [r3, #24]
 8002ad6:	e016      	b.n	8002b06 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	0c5b      	lsrs	r3, r3, #17
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	2b06      	cmp	r3, #6
 8002ae2:	d110      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aea:	2208      	movs	r2, #8
 8002aec:	4619      	mov	r1, r3
 8002aee:	6a38      	ldr	r0, [r7, #32]
 8002af0:	f002 ff0e 	bl	8005910 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b00:	441a      	add	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0210 	orr.w	r2, r2, #16
 8002b14:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 f84b 	bl	8005bb6 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d10a      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f004 ff81 	bl	8007a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 0208 	and.w	r2, r2, #8
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 f836 	bl	8005bb6 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b54:	d10f      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f004 ffd9 	bl	8007b18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 f81b 	bl	8005bb6 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b8a:	d10f      	bne.n	8002bac <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f004 ffac 	bl	8007af4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 f800 	bl	8005bb6 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f004 ffba 	bl	8007b3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 ffea 	bl	8005bb6 <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d115      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f004 ffaa 	bl	8007b58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	e000      	b.n	8002c18 <HAL_PCD_IRQHandler+0x740>
      return;
 8002c16:	bf00      	nop
    }
  }
}
 8002c18:	3734      	adds	r7, #52	; 0x34
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}

08002c1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_PCD_SetAddress+0x1a>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e013      	b.n	8002c60 <HAL_PCD_SetAddress+0x42>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 ff5a 	bl	8005b0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	70fb      	strb	r3, [r7, #3]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	803b      	strh	r3, [r7, #0]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da0f      	bge.n	8002cae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	3338      	adds	r3, #56	; 0x38
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	705a      	strb	r2, [r3, #1]
 8002cac:	e00f      	b.n	8002cce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cda:	883a      	ldrh	r2, [r7, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	78ba      	ldrb	r2, [r7, #2]
 8002ce4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cf8:	78bb      	ldrb	r3, [r7, #2]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d102      	bne.n	8002d04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_PCD_EP_Open+0xaa>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e00e      	b.n	8002d30 <HAL_PCD_EP_Open+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 f91d 	bl	8004f60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da0f      	bge.n	8002d6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	3338      	adds	r3, #56	; 0x38
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	705a      	strb	r2, [r3, #1]
 8002d6a:	e00f      	b.n	8002d8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_Close+0x6e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_Close+0x8c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 f95b 	bl	8005070 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	f002 fbde 	bl	8005600 <USB_EP0StartXfer>
 8002e44:	e008      	b.n	8002e58 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	6979      	ldr	r1, [r7, #20]
 8002e54:	f002 f990 	bl	8005178 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 020f 	and.w	r2, r3, #15
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e84:	681b      	ldr	r3, [r3, #0]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed2:	7afb      	ldrb	r3, [r7, #11]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6979      	ldr	r1, [r7, #20]
 8002f04:	f002 fb7c 	bl	8005600 <USB_EP0StartXfer>
 8002f08:	e008      	b.n	8002f1c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	f002 f92e 	bl	8005178 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 020f 	and.w	r2, r3, #15
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d901      	bls.n	8002f44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e050      	b.n	8002fe6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da0f      	bge.n	8002f6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	3338      	adds	r3, #56	; 0x38
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	705a      	strb	r2, [r3, #1]
 8002f6a:	e00d      	b.n	8002f88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3304      	adds	r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_PCD_EP_SetStall+0x82>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e01e      	b.n	8002fe6 <HAL_PCD_EP_SetStall+0xc0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 fcd3 	bl	8005962 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	b2d9      	uxtb	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f002 fec4 	bl	8005d64 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 020f 	and.w	r2, r3, #15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d901      	bls.n	800300c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e042      	b.n	8003092 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800300c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	da0f      	bge.n	8003034 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	3338      	adds	r3, #56	; 0x38
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	705a      	strb	r2, [r3, #1]
 8003032:	e00f      	b.n	8003054 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 020f 	and.w	r2, r3, #15
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_PCD_EP_ClrStall+0x86>
 8003070:	2302      	movs	r3, #2
 8003072:	e00e      	b.n	8003092 <HAL_PCD_EP_ClrStall+0xa4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f002 fcdb 	bl	8005a3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b08a      	sub	sp, #40	; 0x28
 800309e:	af02      	add	r7, sp, #8
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	3338      	adds	r3, #56	; 0x38
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d901      	bls.n	80030d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06c      	b.n	80031ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d902      	bls.n	80030ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3303      	adds	r3, #3
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f6:	e02b      	b.n	8003150 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	429a      	cmp	r2, r3
 800310c:	d902      	bls.n	8003114 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	3303      	adds	r3, #3
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68d9      	ldr	r1, [r3, #12]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800312c:	b2db      	uxtb	r3, r3
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4603      	mov	r3, r0
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f002 fbb7 	bl	80058a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	441a      	add	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	441a      	add	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	b29b      	uxth	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	429a      	cmp	r2, r3
 8003164:	d809      	bhi.n	800317a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800316e:	429a      	cmp	r2, r3
 8003170:	d203      	bcs.n	800317a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1be      	bne.n	80030f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	429a      	cmp	r2, r3
 8003184:	d811      	bhi.n	80031aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2201      	movs	r2, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	43db      	mvns	r3, r3
 80031a0:	6939      	ldr	r1, [r7, #16]
 80031a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031a6:	4013      	ands	r3, r2
 80031a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	333c      	adds	r3, #60	; 0x3c
 80031cc:	3304      	adds	r3, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	f040 80b3 	bne.w	8003352 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d028      	beq.n	8003248 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a70      	ldr	r2, [pc, #448]	; (80033bc <PCD_EP_OutXfrComplete_int+0x208>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d90e      	bls.n	800321c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003214:	461a      	mov	r2, r3
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f004 fbc1 	bl	80079a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322c:	461a      	mov	r2, r3
 800322e:	2101      	movs	r1, #1
 8003230:	f002 fd98 	bl	8005d64 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	461a      	mov	r2, r3
 8003242:	2308      	movs	r3, #8
 8003244:	6093      	str	r3, [r2, #8]
 8003246:	e0b3      	b.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	461a      	mov	r2, r3
 8003260:	2320      	movs	r3, #32
 8003262:	6093      	str	r3, [r2, #8]
 8003264:	e0a4      	b.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 809f 	bne.w	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a51      	ldr	r2, [pc, #324]	; (80033bc <PCD_EP_OutXfrComplete_int+0x208>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d90f      	bls.n	800329a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	461a      	mov	r2, r3
 8003292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003296:	6093      	str	r3, [r2, #8]
 8003298:	e08a      	b.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032ac:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	0159      	lsls	r1, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	440b      	add	r3, r1
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032c0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4403      	add	r3, r0
 80032d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032d4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4403      	add	r3, r0
 80032f8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4419      	add	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4403      	add	r3, r0
 800330e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003312:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f004 fb54 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d144      	bne.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d138      	bne.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003348:	461a      	mov	r2, r3
 800334a:	2101      	movs	r1, #1
 800334c:	f002 fd0a 	bl	8005d64 <USB_EP0_OutStart>
 8003350:	e02e      	b.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d124      	bne.n	80033a4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	461a      	mov	r2, r3
 8003372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	e01a      	b.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	2320      	movs	r3, #32
 8003394:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f004 fb13 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
 80033a2:	e005      	b.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f004 fb0c 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	4f54300a 	.word	0x4f54300a
 80033c0:	4f54310a 	.word	0x4f54310a

080033c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	333c      	adds	r3, #60	; 0x3c
 80033dc:	3304      	adds	r3, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d113      	bne.n	8003422 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a1f      	ldr	r2, [pc, #124]	; (800347c <PCD_EP_OutSetupPacket_int+0xb8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d922      	bls.n	8003448 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01d      	beq.n	8003448 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003418:	461a      	mov	r2, r3
 800341a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341e:	6093      	str	r3, [r2, #8]
 8003420:	e012      	b.n	8003448 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a16      	ldr	r2, [pc, #88]	; (8003480 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d10e      	bne.n	8003448 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003446:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f004 faab 	bl	80079a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d90c      	bls.n	8003470 <PCD_EP_OutSetupPacket_int+0xac>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003468:	461a      	mov	r2, r3
 800346a:	2101      	movs	r1, #1
 800346c:	f002 fc7a 	bl	8005d64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	4f54300a 	.word	0x4f54300a
 8003480:	4f54310a 	.word	0x4f54310a

08003484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
 8003490:	4613      	mov	r3, r2
 8003492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034a2:	883b      	ldrh	r3, [r7, #0]
 80034a4:	0419      	lsls	r1, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
 80034b0:	e028      	b.n	8003504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4413      	add	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e00d      	b.n	80034e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	3340      	adds	r3, #64	; 0x40
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4413      	add	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	3301      	adds	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d3ec      	bcc.n	80034c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034ec:	883b      	ldrh	r3, [r7, #0]
 80034ee:	0418      	lsls	r0, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	4302      	orrs	r2, r0
 80034fc:	3340      	adds	r3, #64	; 0x40
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e22d      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d075      	beq.n	8003656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800356a:	4ba3      	ldr	r3, [pc, #652]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d00c      	beq.n	8003590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4ba0      	ldr	r3, [pc, #640]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357e:	2b08      	cmp	r3, #8
 8003580:	d112      	bne.n	80035a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003582:	4b9d      	ldr	r3, [pc, #628]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358e:	d10b      	bne.n	80035a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	4b99      	ldr	r3, [pc, #612]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d05b      	beq.n	8003654 <HAL_RCC_OscConfig+0x108>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d157      	bne.n	8003654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e208      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x74>
 80035b2:	4b91      	ldr	r3, [pc, #580]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a90      	ldr	r2, [pc, #576]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xb0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x98>
 80035ca:	4b8b      	ldr	r3, [pc, #556]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a8a      	ldr	r2, [pc, #552]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a87      	ldr	r2, [pc, #540]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xb0>
 80035e4:	4b84      	ldr	r3, [pc, #528]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a83      	ldr	r2, [pc, #524]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b81      	ldr	r3, [pc, #516]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a80      	ldr	r2, [pc, #512]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd fd74 	bl	80010f0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360c:	f7fd fd70 	bl	80010f0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1cd      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xc0>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fd fd60 	bl	80010f0 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003634:	f7fd fd5c 	bl	80010f0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1b9      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0xe8>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d063      	beq.n	800372a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003662:	4b65      	ldr	r3, [pc, #404]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366e:	4b62      	ldr	r3, [pc, #392]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003676:	2b08      	cmp	r3, #8
 8003678:	d11c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367a:	4b5f      	ldr	r3, [pc, #380]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	4b5c      	ldr	r3, [pc, #368]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x152>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e18d      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4952      	ldr	r1, [pc, #328]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e03a      	b.n	800372a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_OscConfig+0x2b0>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fd fd15 	bl	80010f0 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fd fd11 	bl	80010f0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e16e      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4940      	ldr	r1, [pc, #256]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <HAL_RCC_OscConfig+0x2b0>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fcf4 	bl	80010f0 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370c:	f7fd fcf0 	bl	80010f0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e14d      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d030      	beq.n	8003798 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373e:	4b30      	ldr	r3, [pc, #192]	; (8003800 <HAL_RCC_OscConfig+0x2b4>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fcd4 	bl	80010f0 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374c:	f7fd fcd0 	bl	80010f0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e12d      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x200>
 800376a:	e015      	b.n	8003798 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x2b4>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7fd fcbd 	bl	80010f0 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377a:	f7fd fcb9 	bl	80010f0 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e116      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a0 	beq.w	80038e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	; 0x40
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_OscConfig+0x2b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d121      	bne.n	8003826 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <HAL_RCC_OscConfig+0x2b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <HAL_RCC_OscConfig+0x2b8>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7fd fc7f 	bl	80010f0 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e011      	b.n	800381a <HAL_RCC_OscConfig+0x2ce>
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	42470000 	.word	0x42470000
 8003800:	42470e80 	.word	0x42470e80
 8003804:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003808:	f7fd fc72 	bl	80010f0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0cf      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381a:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCC_OscConfig+0x478>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x2f0>
 800382e:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
 800383a:	e01c      	b.n	8003876 <HAL_RCC_OscConfig+0x32a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d10c      	bne.n	800385e <HAL_RCC_OscConfig+0x312>
 8003844:	4b60      	ldr	r3, [pc, #384]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a5f      	ldr	r2, [pc, #380]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
 8003850:	4b5d      	ldr	r3, [pc, #372]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a5c      	ldr	r2, [pc, #368]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
 800385c:	e00b      	b.n	8003876 <HAL_RCC_OscConfig+0x32a>
 800385e:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	4a59      	ldr	r2, [pc, #356]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6713      	str	r3, [r2, #112]	; 0x70
 800386a:	4b57      	ldr	r3, [pc, #348]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	4a56      	ldr	r2, [pc, #344]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d015      	beq.n	80038aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387e:	f7fd fc37 	bl	80010f0 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fd fc33 	bl	80010f0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e08e      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ee      	beq.n	8003886 <HAL_RCC_OscConfig+0x33a>
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7fd fc21 	bl	80010f0 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fd fc1d 	bl	80010f0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e078      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ee      	bne.n	80038b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d064      	beq.n	80039b8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d05c      	beq.n	80039b4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d141      	bne.n	8003986 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCC_OscConfig+0x480>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd fbf2 	bl	80010f0 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fbee 	bl	80010f0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04b      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	3b01      	subs	r3, #1
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	061b      	lsls	r3, r3, #24
 8003952:	491d      	ldr	r1, [pc, #116]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <HAL_RCC_OscConfig+0x480>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fd fbc7 	bl	80010f0 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd fbc3 	bl	80010f0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e020      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x41a>
 8003984:	e018      	b.n	80039b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_OscConfig+0x480>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd fbb0 	bl	80010f0 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003994:	f7fd fbac 	bl	80010f0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e009      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_RCC_OscConfig+0x47c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x448>
 80039b2:	e001      	b.n	80039b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40007000 	.word	0x40007000
 80039c8:	40023800 	.word	0x40023800
 80039cc:	42470060 	.word	0x42470060

080039d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0ca      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e4:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d90c      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b64      	ldr	r3, [pc, #400]	; (8003b84 <HAL_RCC_ClockConfig+0x1b4>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b62      	ldr	r3, [pc, #392]	; (8003b84 <HAL_RCC_ClockConfig+0x1b4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b6      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b58      	ldr	r3, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a57      	ldr	r2, [pc, #348]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b52      	ldr	r3, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a51      	ldr	r2, [pc, #324]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494c      	ldr	r1, [pc, #304]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d044      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d119      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07d      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06d      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b3a      	ldr	r3, [pc, #232]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e065      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 0203 	bic.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4933      	ldr	r1, [pc, #204]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac0:	f7fd fb16 	bl	80010f0 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac8:	f7fd fb12 	bl	80010f0 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e04d      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 020c 	and.w	r2, r3, #12
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1eb      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_ClockConfig+0x1b4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d20c      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_RCC_ClockConfig+0x1b4>)
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <HAL_RCC_ClockConfig+0x1b4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e030      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4915      	ldr	r1, [pc, #84]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490d      	ldr	r1, [pc, #52]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f81d 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	5cd3      	ldrb	r3, [r2, r3]
 8003b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7fd fa78 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08008198 	.word	0x08008198
 8003b90:	20000000 	.word	0x20000000

08003b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003baa:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x32>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d008      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x38>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 80b4 	bne.w	8003d28 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bc2:	60bb      	str	r3, [r7, #8]
       break;
 8003bc4:	e0b3      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc6:	4b5e      	ldr	r3, [pc, #376]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003bc8:	60bb      	str	r3, [r7, #8]
      break;
 8003bca:	e0b0      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bcc:	4b5a      	ldr	r3, [pc, #360]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd6:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04a      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	ea03 0501 	and.w	r5, r3, r1
 8003bf8:	ea04 0602 	and.w	r6, r4, r2
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4632      	mov	r2, r6
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f04f 0400 	mov.w	r4, #0
 8003c08:	0154      	lsls	r4, r2, #5
 8003c0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c0e:	014b      	lsls	r3, r1, #5
 8003c10:	4619      	mov	r1, r3
 8003c12:	4622      	mov	r2, r4
 8003c14:	1b49      	subs	r1, r1, r5
 8003c16:	eb62 0206 	sbc.w	r2, r2, r6
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	f04f 0400 	mov.w	r4, #0
 8003c22:	0194      	lsls	r4, r2, #6
 8003c24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c28:	018b      	lsls	r3, r1, #6
 8003c2a:	1a5b      	subs	r3, r3, r1
 8003c2c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	00e2      	lsls	r2, r4, #3
 8003c3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c3e:	00d9      	lsls	r1, r3, #3
 8003c40:	460b      	mov	r3, r1
 8003c42:	4614      	mov	r4, r2
 8003c44:	195b      	adds	r3, r3, r5
 8003c46:	eb44 0406 	adc.w	r4, r4, r6
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	0262      	lsls	r2, r4, #9
 8003c54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c58:	0259      	lsls	r1, r3, #9
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	4621      	mov	r1, r4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f04f 0400 	mov.w	r4, #0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	f7fc fab4 	bl	80001d8 <__aeabi_uldivmod>
 8003c70:	4603      	mov	r3, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e049      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	f04f 0400 	mov.w	r4, #0
 8003c82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	ea03 0501 	and.w	r5, r3, r1
 8003c8e:	ea04 0602 	and.w	r6, r4, r2
 8003c92:	4629      	mov	r1, r5
 8003c94:	4632      	mov	r2, r6
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	f04f 0400 	mov.w	r4, #0
 8003c9e:	0154      	lsls	r4, r2, #5
 8003ca0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ca4:	014b      	lsls	r3, r1, #5
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4622      	mov	r2, r4
 8003caa:	1b49      	subs	r1, r1, r5
 8003cac:	eb62 0206 	sbc.w	r2, r2, r6
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	0194      	lsls	r4, r2, #6
 8003cba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	1a5b      	subs	r3, r3, r1
 8003cc2:	eb64 0402 	sbc.w	r4, r4, r2
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	00e2      	lsls	r2, r4, #3
 8003cd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cd4:	00d9      	lsls	r1, r3, #3
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	195b      	adds	r3, r3, r5
 8003cdc:	eb44 0406 	adc.w	r4, r4, r6
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	02a2      	lsls	r2, r4, #10
 8003cea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cee:	0299      	lsls	r1, r3, #10
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f04f 0400 	mov.w	r4, #0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4623      	mov	r3, r4
 8003d02:	f7fc fa69 	bl	80001d8 <__aeabi_uldivmod>
 8003d06:	4603      	mov	r3, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	3301      	adds	r3, #1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	60bb      	str	r3, [r7, #8]
      break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d2a:	60bb      	str	r3, [r7, #8]
      break;
 8003d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	007a1200 	.word	0x007a1200

08003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000000 	.word	0x20000000

08003d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d60:	f7ff fff0 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d64:	4601      	mov	r1, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0a9b      	lsrs	r3, r3, #10
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	080081a8 	.word	0x080081a8

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d88:	f7ff ffdc 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0b5b      	lsrs	r3, r3, #13
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	080081a8 	.word	0x080081a8

08003dac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d038      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dd4:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dda:	f7fd f989 	bl	80010f0 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003de2:	f7fd f985 	bl	80010f0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0bd      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	019b      	lsls	r3, r3, #6
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	071b      	lsls	r3, r3, #28
 8003e12:	495a      	ldr	r1, [pc, #360]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e1a:	4b57      	ldr	r3, [pc, #348]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fd f966 	bl	80010f0 <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e28:	f7fd f962 	bl	80010f0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e09a      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e3a:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8083 	beq.w	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	4a47      	ldr	r2, [pc, #284]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e62:	6413      	str	r3, [r2, #64]	; 0x40
 8003e64:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a42      	ldr	r2, [pc, #264]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7c:	f7fd f938 	bl	80010f0 <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e84:	f7fd f934 	bl	80010f0 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e06c      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea2:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02f      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d028      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eca:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ed6:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003edc:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d114      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd f902 	bl	80010f0 <HAL_GetTick>
 8003eec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd f8fe 	bl	80010f0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e034      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0ee      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1e:	d10d      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f34:	4911      	ldr	r1, [pc, #68]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
 8003f3a:	e005      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a0e      	ldr	r2, [pc, #56]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f46:	6093      	str	r3, [r2, #8]
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7d1a      	ldrb	r2, [r3, #20]
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003f6c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	42470068 	.word	0x42470068
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40007000 	.word	0x40007000
 8003f84:	42470e40 	.word	0x42470e40
 8003f88:	424711e0 	.word	0x424711e0

08003f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d13f      	bne.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fb2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d131      	bne.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fc0:	617b      	str	r3, [r7, #20]
          break;
 8003fc2:	e031      	b.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fc4:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003fd2:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003fe6:	4b14      	ldr	r3, [pc, #80]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff0:	4a14      	ldr	r2, [pc, #80]	; (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800400e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004012:	0f1b      	lsrs	r3, r3, #28
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	617b      	str	r3, [r7, #20]
          break;
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
          break;
 8004026:	bf00      	nop
        }
      }
      break;
 8004028:	bf00      	nop
    }
  }
  return frequency;
 800402a:	697b      	ldr	r3, [r7, #20]
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40023800 	.word	0x40023800
 800403c:	00bb8000 	.word	0x00bb8000
 8004040:	007a1200 	.word	0x007a1200
 8004044:	00f42400 	.word	0x00f42400

08004048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e056      	b.n	8004108 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fc fe61 	bl	8000d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004090:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	ea42 0103 	orr.w	r1, r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	f003 0104 	and.w	r1, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e03f      	b.n	80041a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fc fe48 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2224      	movs	r2, #36	; 0x24
 8004140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f9b1 	bl	80044bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b088      	sub	sp, #32
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	f040 8083 	bne.w	80042d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_UART_Transmit+0x2e>
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e07b      	b.n	80042d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Transmit+0x40>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e074      	b.n	80042d4 <HAL_UART_Transmit+0x12a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2221      	movs	r2, #33	; 0x21
 80041fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004200:	f7fc ff76 	bl	80010f0 <HAL_GetTick>
 8004204:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004212:	e042      	b.n	800429a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d122      	bne.n	8004272 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2200      	movs	r2, #0
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8f6 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e046      	b.n	80042d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004258:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3302      	adds	r3, #2
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	e017      	b.n	800429a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3301      	adds	r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	e013      	b.n	800429a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f8d3 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e023      	b.n	80042d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	60ba      	str	r2, [r7, #8]
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1b7      	bne.n	8004214 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2200      	movs	r2, #0
 80042ac:	2140      	movs	r1, #64	; 0x40
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f8ba 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e00a      	b.n	80042d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	f040 8090 	bne.w	800441e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_UART_Receive+0x2e>
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e088      	b.n	8004420 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_UART_Receive+0x40>
 8004318:	2302      	movs	r3, #2
 800431a:	e081      	b.n	8004420 <HAL_UART_Receive+0x144>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2222      	movs	r2, #34	; 0x22
 800432e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004332:	f7fc fedd 	bl	80010f0 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	88fa      	ldrh	r2, [r7, #6]
 8004342:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004344:	e05c      	b.n	8004400 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435c:	d12b      	bne.n	80043b6 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2120      	movs	r1, #32
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f85d 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e053      	b.n	8004420 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10c      	bne.n	800439e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	b29a      	uxth	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3302      	adds	r3, #2
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	e030      	b.n	8004400 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3301      	adds	r3, #1
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	e024      	b.n	8004400 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2120      	movs	r1, #32
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f831 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e027      	b.n	8004420 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d108      	bne.n	80043ea <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	60ba      	str	r2, [r7, #8]
 80043e4:	b2ca      	uxtb	r2, r1
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e00a      	b.n	8004400 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1c59      	adds	r1, r3, #1
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d19d      	bne.n	8004346 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	e02c      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d028      	beq.n	8004494 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <UART_WaitOnFlagUntilTimeout+0x30>
 8004448:	f7fc fe52 	bl	80010f0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	429a      	cmp	r2, r3
 8004456:	d21d      	bcs.n	8004494 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004466:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e00f      	b.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d0c3      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80044fc:	f023 030c 	bic.w	r3, r3, #12
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	68f9      	ldr	r1, [r7, #12]
 8004506:	430b      	orrs	r3, r1
 8004508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004528:	f040 80e4 	bne.w	80046f4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4aab      	ldr	r2, [pc, #684]	; (80047e0 <UART_SetConfig+0x324>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <UART_SetConfig+0x84>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4aaa      	ldr	r2, [pc, #680]	; (80047e4 <UART_SetConfig+0x328>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d16c      	bne.n	800461a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004540:	f7ff fc20 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004544:	4602      	mov	r2, r0
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009a      	lsls	r2, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	4aa3      	ldr	r2, [pc, #652]	; (80047e8 <UART_SetConfig+0x32c>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	011c      	lsls	r4, r3, #4
 8004564:	f7ff fc0e 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004568:	4602      	mov	r2, r0
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009a      	lsls	r2, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fbb2 f5f3 	udiv	r5, r2, r3
 800457e:	f7ff fc01 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004582:	4602      	mov	r2, r0
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009a      	lsls	r2, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	4a93      	ldr	r2, [pc, #588]	; (80047e8 <UART_SetConfig+0x32c>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2264      	movs	r2, #100	; 0x64
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	1aeb      	subs	r3, r5, r3
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	3332      	adds	r3, #50	; 0x32
 80045ac:	4a8e      	ldr	r2, [pc, #568]	; (80047e8 <UART_SetConfig+0x32c>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ba:	441c      	add	r4, r3
 80045bc:	f7ff fbe2 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 80045c0:	4602      	mov	r2, r0
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009a      	lsls	r2, r3, #2
 80045ca:	441a      	add	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80045d6:	f7ff fbd5 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 80045da:	4602      	mov	r2, r0
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009a      	lsls	r2, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	4a7d      	ldr	r2, [pc, #500]	; (80047e8 <UART_SetConfig+0x32c>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2264      	movs	r2, #100	; 0x64
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	1aeb      	subs	r3, r5, r3
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	3332      	adds	r3, #50	; 0x32
 8004604:	4a78      	ldr	r2, [pc, #480]	; (80047e8 <UART_SetConfig+0x32c>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	f003 0207 	and.w	r2, r3, #7
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4422      	add	r2, r4
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	e154      	b.n	80048c4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800461a:	f7ff fb9f 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 800461e:	4602      	mov	r2, r0
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009a      	lsls	r2, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	4a6c      	ldr	r2, [pc, #432]	; (80047e8 <UART_SetConfig+0x32c>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	011c      	lsls	r4, r3, #4
 800463e:	f7ff fb8d 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 8004642:	4602      	mov	r2, r0
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009a      	lsls	r2, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fbb2 f5f3 	udiv	r5, r2, r3
 8004658:	f7ff fb80 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 800465c:	4602      	mov	r2, r0
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009a      	lsls	r2, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	4a5d      	ldr	r2, [pc, #372]	; (80047e8 <UART_SetConfig+0x32c>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2264      	movs	r2, #100	; 0x64
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	1aeb      	subs	r3, r5, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <UART_SetConfig+0x32c>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004694:	441c      	add	r4, r3
 8004696:	f7ff fb61 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 800469a:	4602      	mov	r2, r0
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80046b0:	f7ff fb54 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009a      	lsls	r2, r3, #2
 80046be:	441a      	add	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	4a47      	ldr	r2, [pc, #284]	; (80047e8 <UART_SetConfig+0x32c>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	2264      	movs	r2, #100	; 0x64
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	1aeb      	subs	r3, r5, r3
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	3332      	adds	r3, #50	; 0x32
 80046de:	4a42      	ldr	r2, [pc, #264]	; (80047e8 <UART_SetConfig+0x32c>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	f003 0207 	and.w	r2, r3, #7
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4422      	add	r2, r4
 80046f0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80046f2:	e0e7      	b.n	80048c4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a39      	ldr	r2, [pc, #228]	; (80047e0 <UART_SetConfig+0x324>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <UART_SetConfig+0x24c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <UART_SetConfig+0x328>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d171      	bne.n	80047ec <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004708:	f7ff fb3c 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 800470c:	4602      	mov	r2, r0
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009a      	lsls	r2, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <UART_SetConfig+0x32c>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	011c      	lsls	r4, r3, #4
 800472c:	f7ff fb2a 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004730:	4602      	mov	r2, r0
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009a      	lsls	r2, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	fbb2 f5f3 	udiv	r5, r2, r3
 8004746:	f7ff fb1d 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 800474a:	4602      	mov	r2, r0
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009a      	lsls	r2, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <UART_SetConfig+0x32c>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2264      	movs	r2, #100	; 0x64
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	1aeb      	subs	r3, r5, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	; 0x32
 8004774:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <UART_SetConfig+0x32c>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004780:	441c      	add	r4, r3
 8004782:	f7ff faff 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004786:	4602      	mov	r2, r0
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009a      	lsls	r2, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	fbb2 f5f3 	udiv	r5, r2, r3
 800479c:	f7ff faf2 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009a      	lsls	r2, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <UART_SetConfig+0x32c>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	2264      	movs	r2, #100	; 0x64
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	1aeb      	subs	r3, r5, r3
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	3332      	adds	r3, #50	; 0x32
 80047ca:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <UART_SetConfig+0x32c>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 020f 	and.w	r2, r3, #15
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4422      	add	r2, r4
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	e071      	b.n	80048c4 <UART_SetConfig+0x408>
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40011400 	.word	0x40011400
 80047e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80047ec:	f7ff fab6 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009a      	lsls	r2, r3, #2
 80047fa:	441a      	add	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	4a31      	ldr	r2, [pc, #196]	; (80048cc <UART_SetConfig+0x410>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	011c      	lsls	r4, r3, #4
 8004810:	f7ff faa4 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 8004814:	4602      	mov	r2, r0
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009a      	lsls	r2, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	fbb2 f5f3 	udiv	r5, r2, r3
 800482a:	f7ff fa97 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 800482e:	4602      	mov	r2, r0
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009a      	lsls	r2, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	4a21      	ldr	r2, [pc, #132]	; (80048cc <UART_SetConfig+0x410>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2264      	movs	r2, #100	; 0x64
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	1aeb      	subs	r3, r5, r3
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <UART_SetConfig+0x410>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004864:	441c      	add	r4, r3
 8004866:	f7ff fa79 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 800486a:	4602      	mov	r2, r0
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009a      	lsls	r2, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004880:	f7ff fa6c 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 8004884:	4602      	mov	r2, r0
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009a      	lsls	r2, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <UART_SetConfig+0x410>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	2264      	movs	r2, #100	; 0x64
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	1aeb      	subs	r3, r5, r3
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	3332      	adds	r3, #50	; 0x32
 80048ae:	4a07      	ldr	r2, [pc, #28]	; (80048cc <UART_SetConfig+0x410>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4422      	add	r2, r4
 80048c0:	609a      	str	r2, [r3, #8]
}
 80048c2:	e7ff      	b.n	80048c4 <UART_SetConfig+0x408>
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bdb0      	pop	{r4, r5, r7, pc}
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048d0:	b084      	sub	sp, #16
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	f107 001c 	add.w	r0, r7, #28
 80048de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d122      	bne.n	800492e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d105      	bne.n	8004922 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 fa7c 	bl	8005e20 <USB_CoreReset>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e01a      	b.n	8004964 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f001 fa70 	bl	8005e20 <USB_CoreReset>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
 8004956:	e005      	b.n	8004964 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10b      	bne.n	8004982 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f043 0206 	orr.w	r2, r3, #6
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800498e:	b004      	add	sp, #16
 8004990:	4770      	bx	lr
	...

08004994 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d165      	bne.n	8004a74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4a41      	ldr	r2, [pc, #260]	; (8004ab0 <USB_SetTurnaroundTime+0x11c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d906      	bls.n	80049be <USB_SetTurnaroundTime+0x2a>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <USB_SetTurnaroundTime+0x120>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d802      	bhi.n	80049be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049b8:	230f      	movs	r3, #15
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e062      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4a3c      	ldr	r2, [pc, #240]	; (8004ab4 <USB_SetTurnaroundTime+0x120>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d906      	bls.n	80049d4 <USB_SetTurnaroundTime+0x40>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4a3b      	ldr	r2, [pc, #236]	; (8004ab8 <USB_SetTurnaroundTime+0x124>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d802      	bhi.n	80049d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049ce:	230e      	movs	r3, #14
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e057      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4a38      	ldr	r2, [pc, #224]	; (8004ab8 <USB_SetTurnaroundTime+0x124>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d906      	bls.n	80049ea <USB_SetTurnaroundTime+0x56>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4a37      	ldr	r2, [pc, #220]	; (8004abc <USB_SetTurnaroundTime+0x128>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d802      	bhi.n	80049ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049e4:	230d      	movs	r3, #13
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e04c      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4a33      	ldr	r2, [pc, #204]	; (8004abc <USB_SetTurnaroundTime+0x128>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d906      	bls.n	8004a00 <USB_SetTurnaroundTime+0x6c>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4a32      	ldr	r2, [pc, #200]	; (8004ac0 <USB_SetTurnaroundTime+0x12c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d802      	bhi.n	8004a00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049fa:	230c      	movs	r3, #12
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e041      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <USB_SetTurnaroundTime+0x12c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d906      	bls.n	8004a16 <USB_SetTurnaroundTime+0x82>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a2e      	ldr	r2, [pc, #184]	; (8004ac4 <USB_SetTurnaroundTime+0x130>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d802      	bhi.n	8004a16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a10:	230b      	movs	r3, #11
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e036      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a2a      	ldr	r2, [pc, #168]	; (8004ac4 <USB_SetTurnaroundTime+0x130>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d906      	bls.n	8004a2c <USB_SetTurnaroundTime+0x98>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <USB_SetTurnaroundTime+0x134>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d802      	bhi.n	8004a2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a26:	230a      	movs	r3, #10
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e02b      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <USB_SetTurnaroundTime+0x134>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d906      	bls.n	8004a42 <USB_SetTurnaroundTime+0xae>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a25      	ldr	r2, [pc, #148]	; (8004acc <USB_SetTurnaroundTime+0x138>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d802      	bhi.n	8004a42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a3c:	2309      	movs	r3, #9
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e020      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4a21      	ldr	r2, [pc, #132]	; (8004acc <USB_SetTurnaroundTime+0x138>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d906      	bls.n	8004a58 <USB_SetTurnaroundTime+0xc4>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <USB_SetTurnaroundTime+0x13c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d802      	bhi.n	8004a58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a52:	2308      	movs	r3, #8
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e015      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <USB_SetTurnaroundTime+0x13c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d906      	bls.n	8004a6e <USB_SetTurnaroundTime+0xda>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <USB_SetTurnaroundTime+0x140>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d802      	bhi.n	8004a6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a68:	2307      	movs	r3, #7
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e00a      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a6e:	2306      	movs	r3, #6
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e007      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a7a:	2309      	movs	r3, #9
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e001      	b.n	8004a84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a80:	2309      	movs	r3, #9
 8004a82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	029b      	lsls	r3, r3, #10
 8004a98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	00d8acbf 	.word	0x00d8acbf
 8004ab4:	00e4e1bf 	.word	0x00e4e1bf
 8004ab8:	00f423ff 	.word	0x00f423ff
 8004abc:	0106737f 	.word	0x0106737f
 8004ac0:	011a499f 	.word	0x011a499f
 8004ac4:	01312cff 	.word	0x01312cff
 8004ac8:	014ca43f 	.word	0x014ca43f
 8004acc:	016e35ff 	.word	0x016e35ff
 8004ad0:	01a6ab1f 	.word	0x01a6ab1f
 8004ad4:	01e847ff 	.word	0x01e847ff

08004ad8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f043 0201 	orr.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f023 0201 	bic.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d106      	bne.n	8004b48 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e00b      	b.n	8004b60 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e001      	b.n	8004b60 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e003      	b.n	8004b68 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b60:	2032      	movs	r0, #50	; 0x32
 8004b62:	f7fc fad1 	bl	8001108 <HAL_Delay>

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b70:	b084      	sub	sp, #16
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	e009      	b.n	8004ba4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3340      	adds	r3, #64	; 0x40
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b0e      	cmp	r3, #14
 8004ba8:	d9f2      	bls.n	8004b90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d112      	bne.n	8004bd6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8004bd4:	e00b      	b.n	8004bee <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c00:	4619      	mov	r1, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c08:	461a      	mov	r2, r3
 8004c0a:	680b      	ldr	r3, [r1, #0]
 8004c0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10c      	bne.n	8004c2e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f961 	bl	8004ee4 <USB_SetDevSpeed>
 8004c22:	e008      	b.n	8004c36 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c24:	2101      	movs	r1, #1
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f95c 	bl	8004ee4 <USB_SetDevSpeed>
 8004c2c:	e003      	b.n	8004c36 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c2e:	2103      	movs	r1, #3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f957 	bl	8004ee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c36:	2110      	movs	r1, #16
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f90b 	bl	8004e54 <USB_FlushTxFifo>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f929 	bl	8004ea0 <USB_FlushRxFifo>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2300      	movs	r3, #0
 8004c62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	e043      	b.n	8004d0a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c98:	d118      	bne.n	8004ccc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cac:	461a      	mov	r2, r3
 8004cae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	e013      	b.n	8004cde <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e008      	b.n	8004cde <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cea:	461a      	mov	r2, r3
 8004cec:	2300      	movs	r3, #0
 8004cee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	3301      	adds	r3, #1
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d3b7      	bcc.n	8004c82 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e043      	b.n	8004da0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d2e:	d118      	bne.n	8004d62 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	461a      	mov	r2, r3
 8004d44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e013      	b.n	8004d74 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e008      	b.n	8004d74 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2300      	movs	r3, #0
 8004d72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	461a      	mov	r2, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	461a      	mov	r2, r3
 8004d94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d3b7      	bcc.n	8004d18 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dba:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d111      	bne.n	8004de6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <USB_DevInit+0x2dc>)
 8004dcc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	f043 0303 	orr.w	r3, r3, #3
 8004de4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004df2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f043 0210 	orr.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <USB_DevInit+0x2e0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f043 0208 	orr.w	r2, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e32:	f043 0304 	orr.w	r3, r3, #4
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e46:	b004      	add	sp, #16
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	00800100 	.word	0x00800100
 8004e50:	803c3800 	.word	0x803c3800

08004e54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3301      	adds	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <USB_FlushTxFifo+0x48>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e006      	b.n	8004e8e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d0f0      	beq.n	8004e6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	00030d40 	.word	0x00030d40

08004ea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2210      	movs	r2, #16
 8004eb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <USB_FlushRxFifo+0x40>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e006      	b.n	8004ed2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d0f0      	beq.n	8004eb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	00030d40 	.word	0x00030d40

08004ee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0306 	and.w	r3, r3, #6
 8004f2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]
 8004f3a:	e00a      	b.n	8004f52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d002      	beq.n	8004f48 <USB_GetDevSpeed+0x32>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d102      	bne.n	8004f4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	75fb      	strb	r3, [r7, #23]
 8004f4c:	e001      	b.n	8004f52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f4e:	230f      	movs	r3, #15
 8004f50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d13a      	bne.n	8004ff2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	68f9      	ldr	r1, [r7, #12]
 8004f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d155      	bne.n	8005060 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	78db      	ldrb	r3, [r3, #3]
 8004fce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	059b      	lsls	r3, r3, #22
 8004fd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	e036      	b.n	8005060 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	2101      	movs	r1, #1
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005010:	4313      	orrs	r3, r2
 8005012:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11a      	bne.n	8005060 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	78db      	ldrb	r3, [r3, #3]
 8005044:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005046:	430b      	orrs	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d135      	bne.n	80050f8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	68f9      	ldr	r1, [r7, #12]
 80050a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ac:	4013      	ands	r3, r2
 80050ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	2101      	movs	r1, #1
 80050c2:	fa01 f303 	lsl.w	r3, r1, r3
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d0:	4013      	ands	r3, r2
 80050d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	0159      	lsls	r1, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	440b      	add	r3, r1
 80050ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ee:	4619      	mov	r1, r3
 80050f0:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <USB_DeactivateEndpoint+0x100>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
 80050f6:	e034      	b.n	8005162 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	43db      	mvns	r3, r3
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005118:	4013      	ands	r3, r2
 800511a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	2101      	movs	r1, #1
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	43db      	mvns	r3, r3
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800513c:	4013      	ands	r3, r2
 800513e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	0159      	lsls	r1, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	440b      	add	r3, r1
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	4619      	mov	r1, r3
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <USB_DeactivateEndpoint+0x104>)
 800515e:	4013      	ands	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	ec337800 	.word	0xec337800
 8005174:	eff37800 	.word	0xeff37800

08005178 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 815c 	bne.w	8005452 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d132      	bne.n	8005208 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005200:	0cdb      	lsrs	r3, r3, #19
 8005202:	04db      	lsls	r3, r3, #19
 8005204:	6113      	str	r3, [r2, #16]
 8005206:	e074      	b.n	80052f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	0cdb      	lsrs	r3, r3, #19
 8005224:	04db      	lsls	r3, r3, #19
 8005226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	440a      	add	r2, r1
 800523e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005242:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005246:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800524a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6959      	ldr	r1, [r3, #20]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	440b      	add	r3, r1
 8005264:	1e59      	subs	r1, r3, #1
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	fbb1 f3f3 	udiv	r3, r1, r3
 800526e:	04d9      	lsls	r1, r3, #19
 8005270:	4b9d      	ldr	r3, [pc, #628]	; (80054e8 <USB_EPStartXfer+0x370>)
 8005272:	400b      	ands	r3, r1
 8005274:	69b9      	ldr	r1, [r7, #24]
 8005276:	0148      	lsls	r0, r1, #5
 8005278:	69f9      	ldr	r1, [r7, #28]
 800527a:	4401      	add	r1, r0
 800527c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005280:	4313      	orrs	r3, r2
 8005282:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800529a:	69b9      	ldr	r1, [r7, #24]
 800529c:	0148      	lsls	r0, r1, #5
 800529e:	69f9      	ldr	r1, [r7, #28]
 80052a0:	4401      	add	r1, r0
 80052a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052a6:	4313      	orrs	r3, r2
 80052a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	78db      	ldrb	r3, [r3, #3]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d11f      	bne.n	80052f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d14b      	bne.n	8005390 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	461a      	mov	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	78db      	ldrb	r3, [r3, #3]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d128      	bne.n	800536e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d110      	bne.n	800534e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	e00f      	b.n	800536e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e12f      	b.n	80055f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	78db      	ldrb	r3, [r3, #3]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d015      	beq.n	80053e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8117 	beq.w	80055f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	69f9      	ldr	r1, [r7, #28]
 80053da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053de:	4313      	orrs	r3, r2
 80053e0:	634b      	str	r3, [r1, #52]	; 0x34
 80053e2:	e105      	b.n	80055f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d110      	bne.n	8005416 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e00f      	b.n	8005436 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	68d9      	ldr	r1, [r3, #12]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	b298      	uxth	r0, r3
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4603      	mov	r3, r0
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fa2b 	bl	80058a6 <USB_WritePacket>
 8005450:	e0ce      	b.n	80055f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546c:	0cdb      	lsrs	r3, r3, #19
 800546e:	04db      	lsls	r3, r3, #19
 8005470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005490:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005494:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d126      	bne.n	80054ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	0148      	lsls	r0, r1, #5
 80054b8:	69f9      	ldr	r1, [r7, #28]
 80054ba:	4401      	add	r1, r0
 80054bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054c0:	4313      	orrs	r3, r2
 80054c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e2:	6113      	str	r3, [r2, #16]
 80054e4:	e036      	b.n	8005554 <USB_EPStartXfer+0x3dc>
 80054e6:	bf00      	nop
 80054e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	1e5a      	subs	r2, r3, #1
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	8afb      	ldrh	r3, [r7, #22]
 8005512:	04d9      	lsls	r1, r3, #19
 8005514:	4b39      	ldr	r3, [pc, #228]	; (80055fc <USB_EPStartXfer+0x484>)
 8005516:	400b      	ands	r3, r1
 8005518:	69b9      	ldr	r1, [r7, #24]
 800551a:	0148      	lsls	r0, r1, #5
 800551c:	69f9      	ldr	r1, [r7, #28]
 800551e:	4401      	add	r1, r0
 8005520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005524:	4313      	orrs	r3, r2
 8005526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	8af9      	ldrh	r1, [r7, #22]
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	0148      	lsls	r0, r1, #5
 8005548:	69f9      	ldr	r1, [r7, #28]
 800554a:	4401      	add	r1, r0
 800554c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005550:	4313      	orrs	r3, r2
 8005552:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d10d      	bne.n	8005576 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68d9      	ldr	r1, [r3, #12]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	460a      	mov	r2, r1
 8005574:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	78db      	ldrb	r3, [r3, #3]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d128      	bne.n	80055d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d110      	bne.n	80055b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e00f      	b.n	80055d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	1ff80000 	.word	0x1ff80000

08005600 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 80cd 	bne.w	80057bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d132      	bne.n	8005690 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005644:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005648:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800564c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800566c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005688:	0cdb      	lsrs	r3, r3, #19
 800568a:	04db      	lsls	r3, r3, #19
 800568c:	6113      	str	r3, [r2, #16]
 800568e:	e04e      	b.n	800572e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056aa:	0cdb      	lsrs	r3, r3, #19
 80056ac:	04db      	lsls	r3, r3, #19
 80056ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d903      	bls.n	80056e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	0148      	lsls	r0, r1, #5
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	4401      	add	r1, r0
 8005726:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800572a:	4313      	orrs	r3, r2
 800572c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d11e      	bne.n	8005772 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e092      	b.n	8005898 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005790:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d07e      	beq.n	8005898 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	2101      	movs	r1, #1
 80057ac:	fa01 f303 	lsl.w	r3, r1, r3
 80057b0:	6979      	ldr	r1, [r7, #20]
 80057b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b6:	4313      	orrs	r3, r2
 80057b8:	634b      	str	r3, [r1, #52]	; 0x34
 80057ba:	e06d      	b.n	8005898 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	0cdb      	lsrs	r3, r3, #19
 80057d8:	04db      	lsls	r3, r3, #19
 80057da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800582e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005846:	6939      	ldr	r1, [r7, #16]
 8005848:	0148      	lsls	r0, r1, #5
 800584a:	6979      	ldr	r1, [r7, #20]
 800584c:	4401      	add	r1, r0
 800584e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005852:	4313      	orrs	r3, r2
 8005854:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10d      	bne.n	8005878 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68d9      	ldr	r1, [r3, #12]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	460a      	mov	r2, r1
 8005876:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b089      	sub	sp, #36	; 0x24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	4611      	mov	r1, r2
 80058b2:	461a      	mov	r2, r3
 80058b4:	460b      	mov	r3, r1
 80058b6:	71fb      	strb	r3, [r7, #7]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80058c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d11a      	bne.n	8005902 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058cc:	88bb      	ldrh	r3, [r7, #4]
 80058ce:	3303      	adds	r3, #3
 80058d0:	089b      	lsrs	r3, r3, #2
 80058d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e00f      	b.n	80058fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	031a      	lsls	r2, r3, #12
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	461a      	mov	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3304      	adds	r3, #4
 80058f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	3301      	adds	r3, #1
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d3eb      	bcc.n	80058da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3724      	adds	r7, #36	; 0x24
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	3303      	adds	r3, #3
 800592a:	089b      	lsrs	r3, r3, #2
 800592c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e00b      	b.n	800594c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	3304      	adds	r3, #4
 8005944:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	3301      	adds	r3, #1
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	429a      	cmp	r2, r3
 8005952:	d3ef      	bcc.n	8005934 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005954:	69fb      	ldr	r3, [r7, #28]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3724      	adds	r7, #36	; 0x24
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d12c      	bne.n	80059d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	db12      	blt.n	80059b6 <USB_EPSetStall+0x54>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00f      	beq.n	80059b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e02b      	b.n	8005a30 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	db12      	blt.n	8005a10 <USB_EPSetStall+0xae>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00f      	beq.n	8005a10 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a0e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d128      	bne.n	8005aac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	78db      	ldrb	r3, [r3, #3]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d003      	beq.n	8005a8a <USB_EPClearStall+0x4c>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	78db      	ldrb	r3, [r3, #3]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d138      	bne.n	8005afc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e027      	b.n	8005afc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d003      	beq.n	8005adc <USB_EPClearStall+0x9e>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	78db      	ldrb	r3, [r3, #3]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d10f      	bne.n	8005afc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b3e:	68f9      	ldr	r1, [r7, #12]
 8005b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b44:	4313      	orrs	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b70:	f023 0302 	bic.w	r3, r3, #2
 8005b74:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005b76:	2003      	movs	r0, #3
 8005b78:	f7fb fac6 	bl	8001108 <HAL_Delay>

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005ba6:	2003      	movs	r0, #3
 8005ba8:	f7fb faae 	bl	8001108 <HAL_Delay>

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	0c1b      	lsrs	r3, r3, #16
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4013      	ands	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	b29b      	uxth	r3, r3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c72:	68bb      	ldr	r3, [r7, #8]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	01db      	lsls	r3, r3, #7
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cce:	68bb      	ldr	r3, [r7, #8]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d16:	f023 0307 	bic.w	r3, r3, #7
 8005d1a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0306 	and.w	r3, r3, #6
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d109      	bne.n	8005d40 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	f043 0303 	orr.w	r3, r3, #3
 8005d3e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	333c      	adds	r3, #60	; 0x3c
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4a26      	ldr	r2, [pc, #152]	; (8005e1c <USB_EP0_OutStart+0xb8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d90a      	bls.n	8005d9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d98:	d101      	bne.n	8005d9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e037      	b.n	8005e0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	461a      	mov	r2, r3
 8005da6:	2300      	movs	r3, #0
 8005da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dcc:	f043 0318 	orr.w	r3, r3, #24
 8005dd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005de4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d10f      	bne.n	8005e0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	461a      	mov	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	4f54300a 	.word	0x4f54300a

08005e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <USB_CoreReset+0x64>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e01b      	b.n	8005e76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	daf2      	bge.n	8005e2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <USB_CoreReset+0x64>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d901      	bls.n	8005e68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e006      	b.n	8005e76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d0f0      	beq.n	8005e56 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	00030d40 	.word	0x00030d40

08005e88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7c1b      	ldrb	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d115      	bne.n	8005ecc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	2181      	movs	r1, #129	; 0x81
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 feca 	bl	8007c42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb8:	2202      	movs	r2, #2
 8005eba:	2101      	movs	r1, #1
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 fec0 	bl	8007c42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005eca:	e012      	b.n	8005ef2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ecc:	2340      	movs	r3, #64	; 0x40
 8005ece:	2202      	movs	r2, #2
 8005ed0:	2181      	movs	r1, #129	; 0x81
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 feb5 	bl	8007c42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ede:	2340      	movs	r3, #64	; 0x40
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 feac 	bl	8007c42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	2182      	movs	r1, #130	; 0x82
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fea2 	bl	8007c42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005f04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f08:	f002 f818 	bl	8007f3c <malloc>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f002 f81a 	bl	8007f5c <memset>
  if(pdev->pClassData == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e026      	b.n	8005f86 <USBD_CDC_Init+0xfe>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f3e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7c1b      	ldrb	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <USBD_CDC_Init+0xee>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 ff58 	bl	8007e24 <USBD_LL_PrepareReceive>
 8005f74:	e007      	b.n	8005f86 <USBD_CDC_Init+0xfe>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f7c:	2340      	movs	r3, #64	; 0x40
 8005f7e:	2101      	movs	r1, #1
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 ff4f 	bl	8007e24 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fa0:	2181      	movs	r1, #129	; 0x81
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fe73 	bl	8007c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fae:	2101      	movs	r1, #1
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fe6c 	bl	8007c8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005fbe:	2182      	movs	r1, #130	; 0x82
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 fe64 	bl	8007c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00e      	beq.n	8005ff4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 ffb0 	bl	8007f4c <free>
    pdev->pClassData = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800600e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006024:	2b00      	cmp	r3, #0
 8006026:	d039      	beq.n	800609c <USBD_CDC_Setup+0x9e>
 8006028:	2b20      	cmp	r3, #32
 800602a:	d17c      	bne.n	8006126 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	88db      	ldrh	r3, [r3, #6]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d029      	beq.n	8006088 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b25b      	sxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	da11      	bge.n	8006062 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800604a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	88d2      	ldrh	r2, [r2, #6]
 8006050:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006052:	6939      	ldr	r1, [r7, #16]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	88db      	ldrh	r3, [r3, #6]
 8006058:	461a      	mov	r2, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 f9ca 	bl	80073f4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006060:	e068      	b.n	8006134 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	785a      	ldrb	r2, [r3, #1]
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	88db      	ldrh	r3, [r3, #6]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006078:	6939      	ldr	r1, [r7, #16]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	88db      	ldrh	r3, [r3, #6]
 800607e:	461a      	mov	r2, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f9e5 	bl	8007450 <USBD_CtlPrepareRx>
    break;
 8006086:	e055      	b.n	8006134 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	7850      	ldrb	r0, [r2, #1]
 8006094:	2200      	movs	r2, #0
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	4798      	blx	r3
    break;
 800609a:	e04b      	b.n	8006134 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b0a      	cmp	r3, #10
 80060a2:	d017      	beq.n	80060d4 <USBD_CDC_Setup+0xd6>
 80060a4:	2b0b      	cmp	r3, #11
 80060a6:	d029      	beq.n	80060fc <USBD_CDC_Setup+0xfe>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d133      	bne.n	8006114 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d107      	bne.n	80060c6 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80060b6:	f107 030c 	add.w	r3, r7, #12
 80060ba:	2202      	movs	r2, #2
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 f998 	bl	80073f4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060c4:	e02e      	b.n	8006124 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f928 	bl	800731e <USBD_CtlError>
			  ret = USBD_FAIL;
 80060ce:	2302      	movs	r3, #2
 80060d0:	75fb      	strb	r3, [r7, #23]
      break;
 80060d2:	e027      	b.n	8006124 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d107      	bne.n	80060ee <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80060de:	f107 030f 	add.w	r3, r7, #15
 80060e2:	2201      	movs	r2, #1
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 f984 	bl	80073f4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060ec:	e01a      	b.n	8006124 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 f914 	bl	800731e <USBD_CtlError>
			  ret = USBD_FAIL;
 80060f6:	2302      	movs	r3, #2
 80060f8:	75fb      	strb	r3, [r7, #23]
      break;
 80060fa:	e013      	b.n	8006124 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006102:	2b03      	cmp	r3, #3
 8006104:	d00d      	beq.n	8006122 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 f908 	bl	800731e <USBD_CtlError>
			  ret = USBD_FAIL;
 800610e:	2302      	movs	r3, #2
 8006110:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006112:	e006      	b.n	8006122 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 f901 	bl	800731e <USBD_CtlError>
      ret = USBD_FAIL;
 800611c:	2302      	movs	r3, #2
 800611e:	75fb      	strb	r3, [r7, #23]
      break;
 8006120:	e000      	b.n	8006124 <USBD_CDC_Setup+0x126>
      break;
 8006122:	bf00      	nop
    }
    break;
 8006124:	e006      	b.n	8006134 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f8f8 	bl	800731e <USBD_CtlError>
    ret = USBD_FAIL;
 800612e:	2302      	movs	r3, #2
 8006130:	75fb      	strb	r3, [r7, #23]
    break;
 8006132:	bf00      	nop
  }

  return ret;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006150:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006158:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006160:	2b00      	cmp	r3, #0
 8006162:	d03a      	beq.n	80061da <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	331c      	adds	r3, #28
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d029      	beq.n	80061ce <USBD_CDC_DataIn+0x90>
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	331c      	adds	r3, #28
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	78f9      	ldrb	r1, [r7, #3]
 800618e:	68b8      	ldr	r0, [r7, #8]
 8006190:	460b      	mov	r3, r1
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	1a5b      	subs	r3, r3, r1
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4403      	add	r3, r0
 800619a:	3344      	adds	r3, #68	; 0x44
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	fbb2 f1f3 	udiv	r1, r2, r3
 80061a2:	fb03 f301 	mul.w	r3, r3, r1
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d110      	bne.n	80061ce <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	331c      	adds	r3, #28
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80061c0:	78f9      	ldrb	r1, [r7, #3]
 80061c2:	2300      	movs	r3, #0
 80061c4:	2200      	movs	r2, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fe09 	bl	8007dde <USBD_LL_Transmit>
 80061cc:	e003      	b.n	80061d6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fe34 	bl	8007e6a <USBD_LL_GetRxDataSize>
 8006202:	4602      	mov	r2, r0
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00d      	beq.n	8006230 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006228:	4611      	mov	r1, r2
 800622a:	4798      	blx	r3

    return USBD_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	e000      	b.n	8006232 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006230:	2302      	movs	r3, #2
  }
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006248:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006250:	2b00      	cmp	r3, #0
 8006252:	d015      	beq.n	8006280 <USBD_CDC_EP0_RxReady+0x46>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800625a:	2bff      	cmp	r3, #255	; 0xff
 800625c:	d010      	beq.n	8006280 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800626c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006274:	b292      	uxth	r2, r2
 8006276:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	22ff      	movs	r2, #255	; 0xff
 800627c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2243      	movs	r2, #67	; 0x43
 8006298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800629a:	4b03      	ldr	r3, [pc, #12]	; (80062a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	20000094 	.word	0x20000094

080062ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2243      	movs	r2, #67	; 0x43
 80062b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80062ba:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000050 	.word	0x20000050

080062cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2243      	movs	r2, #67	; 0x43
 80062d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80062da:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	200000d8 	.word	0x200000d8

080062ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	220a      	movs	r2, #10
 80062f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80062fa:	4b03      	ldr	r3, [pc, #12]	; (8006308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	2000000c 	.word	0x2000000c

0800630c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006316:	2302      	movs	r3, #2
 8006318:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800632c:	7bfb      	ldrb	r3, [r7, #15]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800633a:	b480      	push	{r7}
 800633c:	b087      	sub	sp, #28
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	4613      	mov	r3, r2
 8006346:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800634e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800637e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063a4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01c      	beq.n	80063ea <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d115      	bne.n	80063e6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2181      	movs	r1, #129	; 0x81
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fcfe 	bl	8007dde <USBD_LL_Transmit>

      return USBD_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e002      	b.n	80063ec <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006402:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800640a:	2b00      	cmp	r3, #0
 800640c:	d017      	beq.n	800643e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	7c1b      	ldrb	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800641c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006420:	2101      	movs	r1, #1
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fcfe 	bl	8007e24 <USBD_LL_PrepareReceive>
 8006428:	e007      	b.n	800643a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006430:	2340      	movs	r3, #64	; 0x40
 8006432:	2101      	movs	r1, #1
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fcf5 	bl	8007e24 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800643e:	2302      	movs	r3, #2
  }
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800645c:	2302      	movs	r3, #2
 800645e:	e01a      	b.n	8006496 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	79fa      	ldrb	r2, [r7, #7]
 800648c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f001 fb70 	bl	8007b74 <USBD_LL_Init>

  return USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d006      	beq.n	80064c0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]
 80064be:	e001      	b.n	80064c4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064c0:	2302      	movs	r3, #2
 80064c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 fb96 	bl	8007c0c <USBD_LL_Start>

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800650c:	2302      	movs	r3, #2
 800650e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00c      	beq.n	8006534 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	4611      	mov	r1, r2
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	4611      	mov	r1, r2
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fe94 	bl	80072a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2b01      	cmp	r3, #1
 800659e:	d00c      	beq.n	80065ba <USBD_LL_SetupStage+0x56>
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d302      	bcc.n	80065aa <USBD_LL_SetupStage+0x46>
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d010      	beq.n	80065ca <USBD_LL_SetupStage+0x66>
 80065a8:	e017      	b.n	80065da <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa04 	bl	80069c0 <USBD_StdDevReq>
    break;
 80065b8:	e01a      	b.n	80065f0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa66 	bl	8006a94 <USBD_StdItfReq>
    break;
 80065c8:	e012      	b.n	80065f0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 faa4 	bl	8006b20 <USBD_StdEPReq>
    break;
 80065d8:	e00a      	b.n	80065f0 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80065e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fb6f 	bl	8007ccc <USBD_LL_StallEP>
    break;
 80065ee:	bf00      	nop
  }

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b086      	sub	sp, #24
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	460b      	mov	r3, r1
 8006604:	607a      	str	r2, [r7, #4]
 8006606:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006608:	7afb      	ldrb	r3, [r7, #11]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d14b      	bne.n	80066a6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006614:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800661c:	2b03      	cmp	r3, #3
 800661e:	d134      	bne.n	800668a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	429a      	cmp	r2, r3
 800662a:	d919      	bls.n	8006660 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006642:	429a      	cmp	r2, r3
 8006644:	d203      	bcs.n	800664e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800664a:	b29b      	uxth	r3, r3
 800664c:	e002      	b.n	8006654 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006652:	b29b      	uxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 ff17 	bl	800748c <USBD_CtlContinueRx>
 800665e:	e038      	b.n	80066d2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006672:	2b03      	cmp	r3, #3
 8006674:	d105      	bne.n	8006682 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 ff14 	bl	80074b0 <USBD_CtlSendStatus>
 8006688:	e023      	b.n	80066d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006690:	2b05      	cmp	r3, #5
 8006692:	d11e      	bne.n	80066d2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800669c:	2100      	movs	r1, #0
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f001 fb14 	bl	8007ccc <USBD_LL_StallEP>
 80066a4:	e015      	b.n	80066d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d108      	bne.n	80066ce <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	7afa      	ldrb	r2, [r7, #11]
 80066c6:	4611      	mov	r1, r2
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	4798      	blx	r3
 80066cc:	e001      	b.n	80066d2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066ce:	2302      	movs	r3, #2
 80066d0:	e000      	b.n	80066d4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	460b      	mov	r3, r1
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80066ea:	7afb      	ldrb	r3, [r7, #11]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d17f      	bne.n	80067f0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3314      	adds	r3, #20
 80066f4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d15c      	bne.n	80067ba <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d915      	bls.n	8006738 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fe81 	bl	800742c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800672a:	2300      	movs	r3, #0
 800672c:	2200      	movs	r2, #0
 800672e:	2100      	movs	r1, #0
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f001 fb77 	bl	8007e24 <USBD_LL_PrepareReceive>
 8006736:	e04e      	b.n	80067d6 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	6912      	ldr	r2, [r2, #16]
 8006740:	fbb3 f1f2 	udiv	r1, r3, r2
 8006744:	fb02 f201 	mul.w	r2, r2, r1
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d11c      	bne.n	8006788 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006756:	429a      	cmp	r2, r3
 8006758:	d316      	bcc.n	8006788 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006764:	429a      	cmp	r2, r3
 8006766:	d20f      	bcs.n	8006788 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006768:	2200      	movs	r2, #0
 800676a:	2100      	movs	r1, #0
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fe5d 	bl	800742c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800677a:	2300      	movs	r3, #0
 800677c:	2200      	movs	r2, #0
 800677e:	2100      	movs	r1, #0
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f001 fb4f 	bl	8007e24 <USBD_LL_PrepareReceive>
 8006786:	e026      	b.n	80067d6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800679a:	2b03      	cmp	r3, #3
 800679c:	d105      	bne.n	80067aa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f001 fa8d 	bl	8007ccc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fe8f 	bl	80074d6 <USBD_CtlReceiveStatus>
 80067b8:	e00d      	b.n	80067d6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d004      	beq.n	80067ce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f001 fa7b 	bl	8007ccc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d11d      	bne.n	800681c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff fe82 	bl	80064ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80067ee:	e015      	b.n	800681c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00d      	beq.n	8006818 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006802:	2b03      	cmp	r3, #3
 8006804:	d108      	bne.n	8006818 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	7afa      	ldrb	r2, [r7, #11]
 8006810:	4611      	mov	r1, r2
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	4798      	blx	r3
 8006816:	e001      	b.n	800681c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006818:	2302      	movs	r3, #2
 800681a:	e000      	b.n	800681e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800682e:	2340      	movs	r3, #64	; 0x40
 8006830:	2200      	movs	r2, #0
 8006832:	2100      	movs	r1, #0
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fa04 	bl	8007c42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2240      	movs	r2, #64	; 0x40
 8006846:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	2200      	movs	r2, #0
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f9f6 	bl	8007c42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6852      	ldr	r2, [r2, #4]
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	4611      	mov	r1, r2
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
  }

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006922:	2b03      	cmp	r3, #3
 8006924:	d10b      	bne.n	800693e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6852      	ldr	r2, [r2, #4]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	4611      	mov	r1, r2
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d004      	beq.n	80069e4 <USBD_StdDevReq+0x24>
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d002      	beq.n	80069e4 <USBD_StdDevReq+0x24>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <USBD_StdDevReq+0x34>
 80069e2:	e04c      	b.n	8006a7e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
    break;
 80069f2:	e049      	b.n	8006a88 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b09      	cmp	r3, #9
 80069fa:	d83a      	bhi.n	8006a72 <USBD_StdDevReq+0xb2>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBD_StdDevReq+0x44>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a55 	.word	0x08006a55
 8006a08:	08006a69 	.word	0x08006a69
 8006a0c:	08006a73 	.word	0x08006a73
 8006a10:	08006a5f 	.word	0x08006a5f
 8006a14:	08006a73 	.word	0x08006a73
 8006a18:	08006a37 	.word	0x08006a37
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a73 	.word	0x08006a73
 8006a24:	08006a4b 	.word	0x08006a4b
 8006a28:	08006a41 	.word	0x08006a41
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9d2 	bl	8006dd8 <USBD_GetDescriptor>
      break;
 8006a34:	e022      	b.n	8006a7c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fac7 	bl	8006fcc <USBD_SetAddress>
      break;
 8006a3e:	e01d      	b.n	8006a7c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb04 	bl	8007050 <USBD_SetConfig>
      break;
 8006a48:	e018      	b.n	8006a7c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb8d 	bl	800716c <USBD_GetConfig>
      break;
 8006a52:	e013      	b.n	8006a7c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fbbc 	bl	80071d4 <USBD_GetStatus>
      break;
 8006a5c:	e00e      	b.n	8006a7c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fbea 	bl	800723a <USBD_SetFeature>
      break;
 8006a66:	e009      	b.n	8006a7c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fbf9 	bl	8007262 <USBD_ClrFeature>
      break;
 8006a70:	e004      	b.n	8006a7c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc52 	bl	800731e <USBD_CtlError>
      break;
 8006a7a:	bf00      	nop
    }
    break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc4c 	bl	800731e <USBD_CtlError>
    break;
 8006a86:	bf00      	nop
  }

  return ret;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop

08006a94 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d003      	beq.n	8006ab6 <USBD_StdItfReq+0x22>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d001      	beq.n	8006ab6 <USBD_StdItfReq+0x22>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d12a      	bne.n	8006b0c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006abc:	3b01      	subs	r3, #1
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d81d      	bhi.n	8006afe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	889b      	ldrh	r3, [r3, #4]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d813      	bhi.n	8006af4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	88db      	ldrh	r3, [r3, #6]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d110      	bne.n	8006b08 <USBD_StdItfReq+0x74>
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10d      	bne.n	8006b08 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcdf 	bl	80074b0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006af2:	e009      	b.n	8006b08 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fc11 	bl	800731e <USBD_CtlError>
      break;
 8006afc:	e004      	b.n	8006b08 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fc0c 	bl	800731e <USBD_CtlError>
      break;
 8006b06:	e000      	b.n	8006b0a <USBD_StdItfReq+0x76>
      break;
 8006b08:	bf00      	nop
    }
    break;
 8006b0a:	e004      	b.n	8006b16 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fc05 	bl	800731e <USBD_CtlError>
    break;
 8006b14:	bf00      	nop
  }

  return USBD_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	889b      	ldrh	r3, [r3, #4]
 8006b32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d004      	beq.n	8006b4a <USBD_StdEPReq+0x2a>
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d002      	beq.n	8006b4a <USBD_StdEPReq+0x2a>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <USBD_StdEPReq+0x3a>
 8006b48:	e13b      	b.n	8006dc2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
    break;
 8006b58:	e138      	b.n	8006dcc <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d10a      	bne.n	8006b7c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	e128      	b.n	8006dce <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d03e      	beq.n	8006c02 <USBD_StdEPReq+0xe2>
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d002      	beq.n	8006b8e <USBD_StdEPReq+0x6e>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d070      	beq.n	8006c6e <USBD_StdEPReq+0x14e>
 8006b8c:	e113      	b.n	8006db6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d002      	beq.n	8006b9e <USBD_StdEPReq+0x7e>
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d015      	beq.n	8006bc8 <USBD_StdEPReq+0xa8>
 8006b9c:	e02b      	b.n	8006bf6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00c      	beq.n	8006bbe <USBD_StdEPReq+0x9e>
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	d009      	beq.n	8006bbe <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 f88c 	bl	8007ccc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 f888 	bl	8007ccc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bbc:	e020      	b.n	8006c00 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fbac 	bl	800731e <USBD_CtlError>
        break;
 8006bc6:	e01b      	b.n	8006c00 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	885b      	ldrh	r3, [r3, #2]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10e      	bne.n	8006bee <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00b      	beq.n	8006bee <USBD_StdEPReq+0xce>
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	2b80      	cmp	r3, #128	; 0x80
 8006bda:	d008      	beq.n	8006bee <USBD_StdEPReq+0xce>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	88db      	ldrh	r3, [r3, #6]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f86f 	bl	8007ccc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fc5e 	bl	80074b0 <USBD_CtlSendStatus>

        break;
 8006bf4:	e004      	b.n	8006c00 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fb90 	bl	800731e <USBD_CtlError>
        break;
 8006bfe:	bf00      	nop
      }
      break;
 8006c00:	e0de      	b.n	8006dc0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d002      	beq.n	8006c12 <USBD_StdEPReq+0xf2>
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d015      	beq.n	8006c3c <USBD_StdEPReq+0x11c>
 8006c10:	e026      	b.n	8006c60 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <USBD_StdEPReq+0x112>
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d009      	beq.n	8006c32 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 f852 	bl	8007ccc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 f84e 	bl	8007ccc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006c30:	e01c      	b.n	8006c6c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fb72 	bl	800731e <USBD_CtlError>
        break;
 8006c3a:	e017      	b.n	8006c6c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	885b      	ldrh	r3, [r3, #2]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d112      	bne.n	8006c6a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 f859 	bl	8007d0a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fc29 	bl	80074b0 <USBD_CtlSendStatus>
        }
        break;
 8006c5e:	e004      	b.n	8006c6a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fb5b 	bl	800731e <USBD_CtlError>
        break;
 8006c68:	e000      	b.n	8006c6c <USBD_StdEPReq+0x14c>
        break;
 8006c6a:	bf00      	nop
      }
      break;
 8006c6c:	e0a8      	b.n	8006dc0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d002      	beq.n	8006c7e <USBD_StdEPReq+0x15e>
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d031      	beq.n	8006ce0 <USBD_StdEPReq+0x1c0>
 8006c7c:	e095      	b.n	8006daa <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <USBD_StdEPReq+0x174>
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b80      	cmp	r3, #128	; 0x80
 8006c88:	d004      	beq.n	8006c94 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb46 	bl	800731e <USBD_CtlError>
          break;
 8006c92:	e08f      	b.n	8006db4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da0b      	bge.n	8006cb4 <USBD_StdEPReq+0x194>
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	3310      	adds	r3, #16
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	e00a      	b.n	8006cca <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb8b 	bl	80073f4 <USBD_CtlSendData>
          break;
 8006cde:	e069      	b.n	8006db4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da11      	bge.n	8006d0c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	f003 020f 	and.w	r2, r3, #15
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d117      	bne.n	8006d32 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb0a 	bl	800731e <USBD_CtlError>
            break;
 8006d0a:	e053      	b.n	8006db4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	f003 020f 	and.w	r2, r3, #15
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 faf7 	bl	800731e <USBD_CtlError>
            break;
 8006d30:	e040      	b.n	8006db4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da0b      	bge.n	8006d52 <USBD_StdEPReq+0x232>
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	3310      	adds	r3, #16
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3304      	adds	r3, #4
 8006d50:	e00a      	b.n	8006d68 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	4413      	add	r3, r2
 8006d68:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <USBD_StdEPReq+0x256>
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	2b80      	cmp	r3, #128	; 0x80
 8006d74:	d103      	bne.n	8006d7e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e00e      	b.n	8006d9c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 ffe0 	bl	8007d48 <USBD_LL_IsStallEP>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2201      	movs	r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e002      	b.n	8006d9c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fb26 	bl	80073f4 <USBD_CtlSendData>
          break;
 8006da8:	e004      	b.n	8006db4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fab6 	bl	800731e <USBD_CtlError>
        break;
 8006db2:	bf00      	nop
      }
      break;
 8006db4:	e004      	b.n	8006dc0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fab0 	bl	800731e <USBD_CtlError>
      break;
 8006dbe:	bf00      	nop
    }
    break;
 8006dc0:	e004      	b.n	8006dcc <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 faaa 	bl	800731e <USBD_CtlError>
    break;
 8006dca:	bf00      	nop
  }

  return ret;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	f200 80c9 	bhi.w	8006f84 <USBD_GetDescriptor+0x1ac>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <USBD_GetDescriptor+0x20>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08006f85 	.word	0x08006f85
 8006e08:	08006f85 	.word	0x08006f85
 8006e0c:	08006f31 	.word	0x08006f31
 8006e10:	08006f57 	.word	0x08006f57
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 010a 	add.w	r1, r7, #10
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
    break;
 8006e2a:	e0b0      	b.n	8006f8e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7c1b      	ldrb	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10d      	bne.n	8006e50 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	f107 020a 	add.w	r2, r7, #10
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e4e:	e09e      	b.n	8006f8e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	f107 020a 	add.w	r2, r7, #10
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	2202      	movs	r2, #2
 8006e68:	701a      	strb	r2, [r3, #0]
    break;
 8006e6a:	e090      	b.n	8006f8e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	885b      	ldrh	r3, [r3, #2]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d856      	bhi.n	8006f24 <USBD_GetDescriptor+0x14c>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USBD_GetDescriptor+0xa4>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006e95 	.word	0x08006e95
 8006e80:	08006ead 	.word	0x08006ead
 8006e84:	08006ec5 	.word	0x08006ec5
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08006ef5 	.word	0x08006ef5
 8006e90:	08006f0d 	.word	0x08006f0d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7c12      	ldrb	r2, [r2, #16]
 8006ea0:	f107 010a 	add.w	r1, r7, #10
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
      break;
 8006eaa:	e040      	b.n	8006f2e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7c12      	ldrb	r2, [r2, #16]
 8006eb8:	f107 010a 	add.w	r1, r7, #10
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
      break;
 8006ec2:	e034      	b.n	8006f2e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 010a 	add.w	r1, r7, #10
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
      break;
 8006eda:	e028      	b.n	8006f2e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7c12      	ldrb	r2, [r2, #16]
 8006ee8:	f107 010a 	add.w	r1, r7, #10
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	60f8      	str	r0, [r7, #12]
      break;
 8006ef2:	e01c      	b.n	8006f2e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 010a 	add.w	r1, r7, #10
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
      break;
 8006f0a:	e010      	b.n	8006f2e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7c12      	ldrb	r2, [r2, #16]
 8006f18:	f107 010a 	add.w	r1, r7, #10
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
      break;
 8006f22:	e004      	b.n	8006f2e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f9f9 	bl	800731e <USBD_CtlError>
      return;
 8006f2c:	e04b      	b.n	8006fc6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006f2e:	e02e      	b.n	8006f8e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	7c1b      	ldrb	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	f107 020a 	add.w	r2, r7, #10
 8006f44:	4610      	mov	r0, r2
 8006f46:	4798      	blx	r3
 8006f48:	60f8      	str	r0, [r7, #12]
      break;
 8006f4a:	e020      	b.n	8006f8e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f9e5 	bl	800731e <USBD_CtlError>
      return;
 8006f54:	e037      	b.n	8006fc6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	7c1b      	ldrb	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10d      	bne.n	8006f7a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	f107 020a 	add.w	r2, r7, #10
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4798      	blx	r3
 8006f6e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	2207      	movs	r2, #7
 8006f76:	701a      	strb	r2, [r3, #0]
      break;
 8006f78:	e009      	b.n	8006f8e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f9ce 	bl	800731e <USBD_CtlError>
      return;
 8006f82:	e020      	b.n	8006fc6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f9c9 	bl	800731e <USBD_CtlError>
    return;
 8006f8c:	e01b      	b.n	8006fc6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006f8e:	897b      	ldrh	r3, [r7, #10]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d011      	beq.n	8006fb8 <USBD_GetDescriptor+0x1e0>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	88db      	ldrh	r3, [r3, #6]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00d      	beq.n	8006fb8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	88da      	ldrh	r2, [r3, #6]
 8006fa0:	897b      	ldrh	r3, [r7, #10]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	bf28      	it	cs
 8006fa6:	4613      	movcs	r3, r2
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006fac:	897b      	ldrh	r3, [r7, #10]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa1e 	bl	80073f4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	88db      	ldrh	r3, [r3, #6]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa75 	bl	80074b0 <USBD_CtlSendStatus>
  }
}
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	889b      	ldrh	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d130      	bne.n	8007040 <USBD_SetAddress+0x74>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	88db      	ldrh	r3, [r3, #6]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d12c      	bne.n	8007040 <USBD_SetAddress+0x74>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	2b7f      	cmp	r3, #127	; 0x7f
 8006fec:	d828      	bhi.n	8007040 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007000:	2b03      	cmp	r3, #3
 8007002:	d104      	bne.n	800700e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f989 	bl	800731e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700c:	e01c      	b.n	8007048 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	7bfa      	ldrb	r2, [r7, #15]
 8007012:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fec0 	bl	8007da0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa45 	bl	80074b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007034:	e008      	b.n	8007048 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703e:	e003      	b.n	8007048 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f96b 	bl	800731e <USBD_CtlError>
  }
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	885b      	ldrh	r3, [r3, #2]
 800705e:	b2da      	uxtb	r2, r3
 8007060:	4b41      	ldr	r3, [pc, #260]	; (8007168 <USBD_SetConfig+0x118>)
 8007062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007064:	4b40      	ldr	r3, [pc, #256]	; (8007168 <USBD_SetConfig+0x118>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d904      	bls.n	8007076 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f955 	bl	800731e <USBD_CtlError>
 8007074:	e075      	b.n	8007162 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800707c:	2b02      	cmp	r3, #2
 800707e:	d002      	beq.n	8007086 <USBD_SetConfig+0x36>
 8007080:	2b03      	cmp	r3, #3
 8007082:	d023      	beq.n	80070cc <USBD_SetConfig+0x7c>
 8007084:	e062      	b.n	800714c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007086:	4b38      	ldr	r3, [pc, #224]	; (8007168 <USBD_SetConfig+0x118>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01a      	beq.n	80070c4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800708e:	4b36      	ldr	r3, [pc, #216]	; (8007168 <USBD_SetConfig+0x118>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2203      	movs	r2, #3
 800709c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070a0:	4b31      	ldr	r3, [pc, #196]	; (8007168 <USBD_SetConfig+0x118>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fa2a 	bl	8006500 <USBD_SetClassConfig>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d104      	bne.n	80070bc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f932 	bl	800731e <USBD_CtlError>
          return;
 80070ba:	e052      	b.n	8007162 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9f7 	bl	80074b0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80070c2:	e04e      	b.n	8007162 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f9f3 	bl	80074b0 <USBD_CtlSendStatus>
      break;
 80070ca:	e04a      	b.n	8007162 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070cc:	4b26      	ldr	r3, [pc, #152]	; (8007168 <USBD_SetConfig+0x118>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d112      	bne.n	80070fa <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80070dc:	4b22      	ldr	r3, [pc, #136]	; (8007168 <USBD_SetConfig+0x118>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80070e6:	4b20      	ldr	r3, [pc, #128]	; (8007168 <USBD_SetConfig+0x118>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff fa26 	bl	800653e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9dc 	bl	80074b0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80070f8:	e033      	b.n	8007162 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80070fa:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <USBD_SetConfig+0x118>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	429a      	cmp	r2, r3
 8007106:	d01d      	beq.n	8007144 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fa14 	bl	800653e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007116:	4b14      	ldr	r3, [pc, #80]	; (8007168 <USBD_SetConfig+0x118>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007120:	4b11      	ldr	r3, [pc, #68]	; (8007168 <USBD_SetConfig+0x118>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff f9ea 	bl	8006500 <USBD_SetClassConfig>
 800712c:	4603      	mov	r3, r0
 800712e:	2b02      	cmp	r3, #2
 8007130:	d104      	bne.n	800713c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8f2 	bl	800731e <USBD_CtlError>
          return;
 800713a:	e012      	b.n	8007162 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f9b7 	bl	80074b0 <USBD_CtlSendStatus>
      break;
 8007142:	e00e      	b.n	8007162 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9b3 	bl	80074b0 <USBD_CtlSendStatus>
      break;
 800714a:	e00a      	b.n	8007162 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8e5 	bl	800731e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <USBD_SetConfig+0x118>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff f9ef 	bl	800653e <USBD_ClrClassConfig>
      break;
 8007160:	bf00      	nop
    }
  }
}
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000200 	.word	0x20000200

0800716c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d004      	beq.n	8007188 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f8cc 	bl	800731e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007186:	e021      	b.n	80071cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800718e:	2b01      	cmp	r3, #1
 8007190:	db17      	blt.n	80071c2 <USBD_GetConfig+0x56>
 8007192:	2b02      	cmp	r3, #2
 8007194:	dd02      	ble.n	800719c <USBD_GetConfig+0x30>
 8007196:	2b03      	cmp	r3, #3
 8007198:	d00b      	beq.n	80071b2 <USBD_GetConfig+0x46>
 800719a:	e012      	b.n	80071c2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3308      	adds	r3, #8
 80071a6:	2201      	movs	r2, #1
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f922 	bl	80073f4 <USBD_CtlSendData>
      break;
 80071b0:	e00c      	b.n	80071cc <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	2201      	movs	r2, #1
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f91a 	bl	80073f4 <USBD_CtlSendData>
      break;
 80071c0:	e004      	b.n	80071cc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f8aa 	bl	800731e <USBD_CtlError>
      break;
 80071ca:	bf00      	nop
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071e4:	3b01      	subs	r3, #1
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d81e      	bhi.n	8007228 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d004      	beq.n	80071fc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f892 	bl	800731e <USBD_CtlError>
      break;
 80071fa:	e01a      	b.n	8007232 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f043 0202 	orr.w	r2, r3, #2
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	330c      	adds	r3, #12
 800721c:	2202      	movs	r2, #2
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f8e7 	bl	80073f4 <USBD_CtlSendData>
    break;
 8007226:	e004      	b.n	8007232 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f877 	bl	800731e <USBD_CtlError>
    break;
 8007230:	bf00      	nop
  }
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	885b      	ldrh	r3, [r3, #2]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d106      	bne.n	800725a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f92b 	bl	80074b0 <USBD_CtlSendStatus>
  }

}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007272:	3b01      	subs	r3, #1
 8007274:	2b02      	cmp	r3, #2
 8007276:	d80b      	bhi.n	8007290 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	885b      	ldrh	r3, [r3, #2]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10c      	bne.n	800729a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f911 	bl	80074b0 <USBD_CtlSendStatus>
    }
    break;
 800728e:	e004      	b.n	800729a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f843 	bl	800731e <USBD_CtlError>
    break;
 8007298:	e000      	b.n	800729c <USBD_ClrFeature+0x3a>
    break;
 800729a:	bf00      	nop
  }
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	785a      	ldrb	r2, [r3, #1]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3302      	adds	r3, #2
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	3303      	adds	r3, #3
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	4413      	add	r3, r2
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	3304      	adds	r3, #4
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	3305      	adds	r3, #5
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	3306      	adds	r3, #6
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	3307      	adds	r3, #7
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	b29b      	uxth	r3, r3
 800730a:	4413      	add	r3, r2
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	80da      	strh	r2, [r3, #6]

}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fcce 	bl	8007ccc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007330:	2100      	movs	r1, #0
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fcca 	bl	8007ccc <USBD_LL_StallEP>
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d032      	beq.n	80073bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f834 	bl	80073c4 <USBD_GetLen>
 800735c:	4603      	mov	r3, r0
 800735e:	3301      	adds	r3, #1
 8007360:	b29b      	uxth	r3, r3
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	75fa      	strb	r2, [r7, #23]
 8007370:	461a      	mov	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	7812      	ldrb	r2, [r2, #0]
 800737a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	75fa      	strb	r2, [r7, #23]
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	2203      	movs	r2, #3
 800738a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800738c:	e012      	b.n	80073b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	60fa      	str	r2, [r7, #12]
 8007394:	7dfa      	ldrb	r2, [r7, #23]
 8007396:	1c51      	adds	r1, r2, #1
 8007398:	75f9      	strb	r1, [r7, #23]
 800739a:	4611      	mov	r1, r2
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	440a      	add	r2, r1
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	75fa      	strb	r2, [r7, #23]
 80073aa:	461a      	mov	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4413      	add	r3, r2
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e8      	bne.n	800738e <USBD_GetString+0x4e>
    }
  }
}
 80073bc:	bf00      	nop
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80073d0:	e005      	b.n	80073de <USBD_GetLen+0x1a>
    {
        len++;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	3301      	adds	r3, #1
 80073d6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3301      	adds	r3, #1
 80073dc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f5      	bne.n	80073d2 <USBD_GetLen+0xe>
    }

    return len;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2202      	movs	r2, #2
 8007406:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	2100      	movs	r1, #0
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fcde 	bl	8007dde <USBD_LL_Transmit>

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	2100      	movs	r1, #0
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fccc 	bl	8007dde <USBD_LL_Transmit>

  return USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2203      	movs	r2, #3
 8007462:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800746e:	88fa      	ldrh	r2, [r7, #6]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	2100      	movs	r1, #0
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fcd1 	bl	8007e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800749a:	88fb      	ldrh	r3, [r7, #6]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	2100      	movs	r1, #0
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fcbf 	bl	8007e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2204      	movs	r2, #4
 80074bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074c0:	2300      	movs	r3, #0
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fc89 	bl	8007dde <USBD_LL_Transmit>

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2205      	movs	r2, #5
 80074e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80074e6:	2300      	movs	r3, #0
 80074e8:	2200      	movs	r2, #0
 80074ea:	2100      	movs	r1, #0
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fc99 	bl	8007e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007500:	2200      	movs	r2, #0
 8007502:	4912      	ldr	r1, [pc, #72]	; (800754c <MX_USB_DEVICE_Init+0x50>)
 8007504:	4812      	ldr	r0, [pc, #72]	; (8007550 <MX_USB_DEVICE_Init+0x54>)
 8007506:	f7fe ff9f 	bl	8006448 <USBD_Init>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007510:	f7f9 face 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007514:	490f      	ldr	r1, [pc, #60]	; (8007554 <MX_USB_DEVICE_Init+0x58>)
 8007516:	480e      	ldr	r0, [pc, #56]	; (8007550 <MX_USB_DEVICE_Init+0x54>)
 8007518:	f7fe ffc1 	bl	800649e <USBD_RegisterClass>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007522:	f7f9 fac5 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007526:	490c      	ldr	r1, [pc, #48]	; (8007558 <MX_USB_DEVICE_Init+0x5c>)
 8007528:	4809      	ldr	r0, [pc, #36]	; (8007550 <MX_USB_DEVICE_Init+0x54>)
 800752a:	f7fe feef 	bl	800630c <USBD_CDC_RegisterInterface>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007534:	f7f9 fabc 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007538:	4805      	ldr	r0, [pc, #20]	; (8007550 <MX_USB_DEVICE_Init+0x54>)
 800753a:	f7fe ffca 	bl	80064d2 <USBD_Start>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007544:	f7f9 fab4 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007548:	bf00      	nop
 800754a:	bd80      	pop	{r7, pc}
 800754c:	2000012c 	.word	0x2000012c
 8007550:	2000038c 	.word	0x2000038c
 8007554:	20000018 	.word	0x20000018
 8007558:	2000011c 	.word	0x2000011c

0800755c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007560:	2200      	movs	r2, #0
 8007562:	4905      	ldr	r1, [pc, #20]	; (8007578 <CDC_Init_FS+0x1c>)
 8007564:	4805      	ldr	r0, [pc, #20]	; (800757c <CDC_Init_FS+0x20>)
 8007566:	f7fe fee8 	bl	800633a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800756a:	4905      	ldr	r1, [pc, #20]	; (8007580 <CDC_Init_FS+0x24>)
 800756c:	4803      	ldr	r0, [pc, #12]	; (800757c <CDC_Init_FS+0x20>)
 800756e:	f7fe fefe 	bl	800636e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007572:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007574:	4618      	mov	r0, r3
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20000e28 	.word	0x20000e28
 800757c:	2000038c 	.word	0x2000038c
 8007580:	20000628 	.word	0x20000628

08007584 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007588:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800758a:	4618      	mov	r0, r3
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	71fb      	strb	r3, [r7, #7]
 80075a0:	4613      	mov	r3, r2
 80075a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	2b23      	cmp	r3, #35	; 0x23
 80075a8:	d84a      	bhi.n	8007640 <CDC_Control_FS+0xac>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <CDC_Control_FS+0x1c>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	08007641 	.word	0x08007641
 80075b4:	08007641 	.word	0x08007641
 80075b8:	08007641 	.word	0x08007641
 80075bc:	08007641 	.word	0x08007641
 80075c0:	08007641 	.word	0x08007641
 80075c4:	08007641 	.word	0x08007641
 80075c8:	08007641 	.word	0x08007641
 80075cc:	08007641 	.word	0x08007641
 80075d0:	08007641 	.word	0x08007641
 80075d4:	08007641 	.word	0x08007641
 80075d8:	08007641 	.word	0x08007641
 80075dc:	08007641 	.word	0x08007641
 80075e0:	08007641 	.word	0x08007641
 80075e4:	08007641 	.word	0x08007641
 80075e8:	08007641 	.word	0x08007641
 80075ec:	08007641 	.word	0x08007641
 80075f0:	08007641 	.word	0x08007641
 80075f4:	08007641 	.word	0x08007641
 80075f8:	08007641 	.word	0x08007641
 80075fc:	08007641 	.word	0x08007641
 8007600:	08007641 	.word	0x08007641
 8007604:	08007641 	.word	0x08007641
 8007608:	08007641 	.word	0x08007641
 800760c:	08007641 	.word	0x08007641
 8007610:	08007641 	.word	0x08007641
 8007614:	08007641 	.word	0x08007641
 8007618:	08007641 	.word	0x08007641
 800761c:	08007641 	.word	0x08007641
 8007620:	08007641 	.word	0x08007641
 8007624:	08007641 	.word	0x08007641
 8007628:	08007641 	.word	0x08007641
 800762c:	08007641 	.word	0x08007641
 8007630:	08007641 	.word	0x08007641
 8007634:	08007641 	.word	0x08007641
 8007638:	08007641 	.word	0x08007641
 800763c:	08007641 	.word	0x08007641
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007640:	bf00      	nop
  }

  return (USBD_OK);
 8007642:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	4805      	ldr	r0, [pc, #20]	; (8007674 <CDC_Receive_FS+0x24>)
 800765e:	f7fe fe86 	bl	800636e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007662:	4804      	ldr	r0, [pc, #16]	; (8007674 <CDC_Receive_FS+0x24>)
 8007664:	f7fe fec6 	bl	80063f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007668:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000038c 	.word	0x2000038c

08007678 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007688:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <CDC_Transmit_FS+0x48>)
 800768a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800768e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800769a:	2301      	movs	r3, #1
 800769c:	e00b      	b.n	80076b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800769e:	887b      	ldrh	r3, [r7, #2]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	4806      	ldr	r0, [pc, #24]	; (80076c0 <CDC_Transmit_FS+0x48>)
 80076a6:	f7fe fe48 	bl	800633a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076aa:	4805      	ldr	r0, [pc, #20]	; (80076c0 <CDC_Transmit_FS+0x48>)
 80076ac:	f7fe fe73 	bl	8006396 <USBD_CDC_TransmitPacket>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	2000038c 	.word	0x2000038c

080076c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2212      	movs	r2, #18
 80076d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076d6:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000148 	.word	0x20000148

080076e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2204      	movs	r2, #4
 80076f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	2000015c 	.word	0x2000015c

0800770c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4907      	ldr	r1, [pc, #28]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
 8007722:	4808      	ldr	r0, [pc, #32]	; (8007744 <USBD_FS_ProductStrDescriptor+0x38>)
 8007724:	f7ff fe0c 	bl	8007340 <USBD_GetString>
 8007728:	e004      	b.n	8007734 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4904      	ldr	r1, [pc, #16]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
 800772e:	4805      	ldr	r0, [pc, #20]	; (8007744 <USBD_FS_ProductStrDescriptor+0x38>)
 8007730:	f7ff fe06 	bl	8007340 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20001628 	.word	0x20001628
 8007744:	08008150 	.word	0x08008150

08007748 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	4904      	ldr	r1, [pc, #16]	; (8007768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007758:	4804      	ldr	r0, [pc, #16]	; (800776c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800775a:	f7ff fdf1 	bl	8007340 <USBD_GetString>
  return USBD_StrDesc;
 800775e:	4b02      	ldr	r3, [pc, #8]	; (8007768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20001628 	.word	0x20001628
 800776c:	08008168 	.word	0x08008168

08007770 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	221a      	movs	r2, #26
 8007780:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007782:	f000 f843 	bl	800780c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007786:	4b02      	ldr	r3, [pc, #8]	; (8007790 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000160 	.word	0x20000160

08007794 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4907      	ldr	r1, [pc, #28]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077aa:	4808      	ldr	r0, [pc, #32]	; (80077cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077ac:	f7ff fdc8 	bl	8007340 <USBD_GetString>
 80077b0:	e004      	b.n	80077bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4904      	ldr	r1, [pc, #16]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077b6:	4805      	ldr	r0, [pc, #20]	; (80077cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077b8:	f7ff fdc2 	bl	8007340 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077bc:	4b02      	ldr	r3, [pc, #8]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20001628 	.word	0x20001628
 80077cc:	0800817c 	.word	0x0800817c

080077d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077e6:	4808      	ldr	r0, [pc, #32]	; (8007808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e8:	f7ff fdaa 	bl	8007340 <USBD_GetString>
 80077ec:	e004      	b.n	80077f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4904      	ldr	r1, [pc, #16]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077f4:	f7ff fda4 	bl	8007340 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20001628 	.word	0x20001628
 8007808:	08008188 	.word	0x08008188

0800780c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007812:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <Get_SerialNum+0x44>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007818:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <Get_SerialNum+0x48>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800781e:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <Get_SerialNum+0x4c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007832:	2208      	movs	r2, #8
 8007834:	4909      	ldr	r1, [pc, #36]	; (800785c <Get_SerialNum+0x50>)
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f814 	bl	8007864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800783c:	2204      	movs	r2, #4
 800783e:	4908      	ldr	r1, [pc, #32]	; (8007860 <Get_SerialNum+0x54>)
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f80f 	bl	8007864 <IntToUnicode>
  }
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	1fff7a10 	.word	0x1fff7a10
 8007854:	1fff7a14 	.word	0x1fff7a14
 8007858:	1fff7a18 	.word	0x1fff7a18
 800785c:	20000162 	.word	0x20000162
 8007860:	20000172 	.word	0x20000172

08007864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
 800787a:	e027      	b.n	80078cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	2b09      	cmp	r3, #9
 8007882:	d80b      	bhi.n	800789c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	0f1b      	lsrs	r3, r3, #28
 8007888:	b2da      	uxtb	r2, r3
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	4619      	mov	r1, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	440b      	add	r3, r1
 8007894:	3230      	adds	r2, #48	; 0x30
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e00a      	b.n	80078b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0f1b      	lsrs	r3, r3, #28
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4619      	mov	r1, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	440b      	add	r3, r1
 80078ac:	3237      	adds	r2, #55	; 0x37
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	3301      	adds	r3, #1
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4413      	add	r3, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	3301      	adds	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
 80078cc:	7dfa      	ldrb	r2, [r7, #23]
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d3d3      	bcc.n	800787c <IntToUnicode+0x18>
  }
}
 80078d4:	bf00      	nop
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e8:	f107 0314 	add.w	r3, r7, #20
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	609a      	str	r2, [r3, #8]
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007900:	d147      	bne.n	8007992 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	4b25      	ldr	r3, [pc, #148]	; (800799c <HAL_PCD_MspInit+0xbc>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	4a24      	ldr	r2, [pc, #144]	; (800799c <HAL_PCD_MspInit+0xbc>)
 800790c:	f043 0301 	orr.w	r3, r3, #1
 8007910:	6313      	str	r3, [r2, #48]	; 0x30
 8007912:	4b22      	ldr	r3, [pc, #136]	; (800799c <HAL_PCD_MspInit+0xbc>)
 8007914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800791e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800792c:	f107 0314 	add.w	r3, r7, #20
 8007930:	4619      	mov	r1, r3
 8007932:	481b      	ldr	r0, [pc, #108]	; (80079a0 <HAL_PCD_MspInit+0xc0>)
 8007934:	f7f9 fd1c 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007938:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800793c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800793e:	2302      	movs	r3, #2
 8007940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007946:	2303      	movs	r3, #3
 8007948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800794a:	230a      	movs	r3, #10
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800794e:	f107 0314 	add.w	r3, r7, #20
 8007952:	4619      	mov	r1, r3
 8007954:	4812      	ldr	r0, [pc, #72]	; (80079a0 <HAL_PCD_MspInit+0xc0>)
 8007956:	f7f9 fd0b 	bl	8001370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800795a:	4b10      	ldr	r3, [pc, #64]	; (800799c <HAL_PCD_MspInit+0xbc>)
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	4a0f      	ldr	r2, [pc, #60]	; (800799c <HAL_PCD_MspInit+0xbc>)
 8007960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007964:	6353      	str	r3, [r2, #52]	; 0x34
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <HAL_PCD_MspInit+0xbc>)
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	4a0b      	ldr	r2, [pc, #44]	; (800799c <HAL_PCD_MspInit+0xbc>)
 8007970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007974:	6453      	str	r3, [r2, #68]	; 0x44
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_PCD_MspInit+0xbc>)
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	2043      	movs	r0, #67	; 0x43
 8007988:	f7f9 fcbb 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800798c:	2043      	movs	r0, #67	; 0x43
 800798e:	f7f9 fcd4 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007992:	bf00      	nop
 8007994:	3728      	adds	r7, #40	; 0x28
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800
 80079a0:	40020000 	.word	0x40020000

080079a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe fdd2 	bl	8006564 <USBD_LL_SetupStage>
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7fe fe02 	bl	80065fa <USBD_LL_DataOutStage>
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	3348      	adds	r3, #72	; 0x48
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f7fe fe59 	bl	80066dc <USBD_LL_DataInStage>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe ff67 	bl	8006914 <USBD_LL_SOF>
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d001      	beq.n	8007a66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a62:	f7f9 f825 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a6c:	7bfa      	ldrb	r2, [r7, #15]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe ff19 	bl	80068a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fed2 	bl	8006826 <USBD_LL_Reset>
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe ff14 	bl	80068c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <HAL_PCD_SuspendCallback+0x48>)
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	4a03      	ldr	r2, [pc, #12]	; (8007ad4 <HAL_PCD_SuspendCallback+0x48>)
 8007ac6:	f043 0306 	orr.w	r3, r3, #6
 8007aca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	e000ed00 	.word	0xe000ed00

08007ad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe ff03 	bl	80068f2 <USBD_LL_Resume>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe ff29 	bl	8006962 <USBD_LL_IsoOUTIncomplete>
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe ff0a 	bl	8006948 <USBD_LL_IsoINIncomplete>
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe ff16 	bl	800697c <USBD_LL_DevConnected>
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe ff13 	bl	8006992 <USBD_LL_DevDisconnected>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d13c      	bne.n	8007bfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b84:	4a20      	ldr	r2, [pc, #128]	; (8007c08 <USBD_LL_Init+0x94>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <USBD_LL_Init+0x94>)
 8007b90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b94:	4b1c      	ldr	r3, [pc, #112]	; (8007c08 <USBD_LL_Init+0x94>)
 8007b96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b9c:	4b1a      	ldr	r3, [pc, #104]	; (8007c08 <USBD_LL_Init+0x94>)
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ba2:	4b19      	ldr	r3, [pc, #100]	; (8007c08 <USBD_LL_Init+0x94>)
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ba8:	4b17      	ldr	r3, [pc, #92]	; (8007c08 <USBD_LL_Init+0x94>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bae:	4b16      	ldr	r3, [pc, #88]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bb4:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bd2:	480d      	ldr	r0, [pc, #52]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bd4:	f7fa fb30 	bl	8002238 <HAL_PCD_Init>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bde:	f7f8 ff67 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007be2:	2180      	movs	r1, #128	; 0x80
 8007be4:	4808      	ldr	r0, [pc, #32]	; (8007c08 <USBD_LL_Init+0x94>)
 8007be6:	f7fb fc94 	bl	8003512 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bea:	2240      	movs	r2, #64	; 0x40
 8007bec:	2100      	movs	r1, #0
 8007bee:	4806      	ldr	r0, [pc, #24]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bf0:	f7fb fc48 	bl	8003484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bf4:	2280      	movs	r2, #128	; 0x80
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	4803      	ldr	r0, [pc, #12]	; (8007c08 <USBD_LL_Init+0x94>)
 8007bfa:	f7fb fc43 	bl	8003484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20001828 	.word	0x20001828

08007c0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fa fc25 	bl	8002472 <HAL_PCD_Start>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f92e 	bl	8007e90 <USBD_Get_USB_Status>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	70fb      	strb	r3, [r7, #3]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70bb      	strb	r3, [r7, #2]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007c6a:	78bb      	ldrb	r3, [r7, #2]
 8007c6c:	883a      	ldrh	r2, [r7, #0]
 8007c6e:	78f9      	ldrb	r1, [r7, #3]
 8007c70:	f7fa fffa 	bl	8002c68 <HAL_PCD_EP_Open>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f908 	bl	8007e90 <USBD_Get_USB_Status>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fb f843 	bl	8002d38 <HAL_PCD_EP_Close>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 f8e9 	bl	8007e90 <USBD_Get_USB_Status>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007ce6:	78fa      	ldrb	r2, [r7, #3]
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fb f91b 	bl	8002f26 <HAL_PCD_EP_SetStall>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f8ca 	bl	8007e90 <USBD_Get_USB_Status>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d24:	78fa      	ldrb	r2, [r7, #3]
 8007d26:	4611      	mov	r1, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fb f960 	bl	8002fee <HAL_PCD_EP_ClrStall>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 f8ab 	bl	8007e90 <USBD_Get_USB_Status>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d5a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	da0b      	bge.n	8007d7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d6a:	68f9      	ldr	r1, [r7, #12]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	333e      	adds	r3, #62	; 0x3e
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	e00b      	b.n	8007d94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	4613      	mov	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fa ff2d 	bl	8002c1e <HAL_PCD_SetAddress>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f860 	bl	8007e90 <USBD_Get_USB_Status>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	461a      	mov	r2, r3
 8007dea:	460b      	mov	r3, r1
 8007dec:	72fb      	strb	r3, [r7, #11]
 8007dee:	4613      	mov	r3, r2
 8007df0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007e00:	893b      	ldrh	r3, [r7, #8]
 8007e02:	7af9      	ldrb	r1, [r7, #11]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	f7fb f844 	bl	8002e92 <HAL_PCD_EP_Transmit>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 f83d 	bl	8007e90 <USBD_Get_USB_Status>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007e1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	460b      	mov	r3, r1
 8007e32:	72fb      	strb	r3, [r7, #11]
 8007e34:	4613      	mov	r3, r2
 8007e36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007e46:	893b      	ldrh	r3, [r7, #8]
 8007e48:	7af9      	ldrb	r1, [r7, #11]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	f7fa ffbe 	bl	8002dcc <HAL_PCD_EP_Receive>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f81a 	bl	8007e90 <USBD_Get_USB_Status>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007e60:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fa ffee 	bl	8002e62 <HAL_PCD_EP_GetRxCount>
 8007e86:	4603      	mov	r3, r0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d817      	bhi.n	8007ed4 <USBD_Get_USB_Status+0x44>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USBD_Get_USB_Status+0x1c>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ebd 	.word	0x08007ebd
 8007eb0:	08007ec3 	.word	0x08007ec3
 8007eb4:	08007ec9 	.word	0x08007ec9
 8007eb8:	08007ecf 	.word	0x08007ecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec0:	e00b      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec6:	e008      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
    break;
 8007ecc:	e005      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed2:	e002      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed8:	bf00      	nop
  }
  return usb_status;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <__errno>:
 8007ee8:	4b01      	ldr	r3, [pc, #4]	; (8007ef0 <__errno+0x8>)
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	2000017c 	.word	0x2000017c

08007ef4 <__libc_init_array>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4e0d      	ldr	r6, [pc, #52]	; (8007f2c <__libc_init_array+0x38>)
 8007ef8:	4c0d      	ldr	r4, [pc, #52]	; (8007f30 <__libc_init_array+0x3c>)
 8007efa:	1ba4      	subs	r4, r4, r6
 8007efc:	10a4      	asrs	r4, r4, #2
 8007efe:	2500      	movs	r5, #0
 8007f00:	42a5      	cmp	r5, r4
 8007f02:	d109      	bne.n	8007f18 <__libc_init_array+0x24>
 8007f04:	4e0b      	ldr	r6, [pc, #44]	; (8007f34 <__libc_init_array+0x40>)
 8007f06:	4c0c      	ldr	r4, [pc, #48]	; (8007f38 <__libc_init_array+0x44>)
 8007f08:	f000 f8ea 	bl	80080e0 <_init>
 8007f0c:	1ba4      	subs	r4, r4, r6
 8007f0e:	10a4      	asrs	r4, r4, #2
 8007f10:	2500      	movs	r5, #0
 8007f12:	42a5      	cmp	r5, r4
 8007f14:	d105      	bne.n	8007f22 <__libc_init_array+0x2e>
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f1c:	4798      	blx	r3
 8007f1e:	3501      	adds	r5, #1
 8007f20:	e7ee      	b.n	8007f00 <__libc_init_array+0xc>
 8007f22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f26:	4798      	blx	r3
 8007f28:	3501      	adds	r5, #1
 8007f2a:	e7f2      	b.n	8007f12 <__libc_init_array+0x1e>
 8007f2c:	080081b8 	.word	0x080081b8
 8007f30:	080081b8 	.word	0x080081b8
 8007f34:	080081b8 	.word	0x080081b8
 8007f38:	080081bc 	.word	0x080081bc

08007f3c <malloc>:
 8007f3c:	4b02      	ldr	r3, [pc, #8]	; (8007f48 <malloc+0xc>)
 8007f3e:	4601      	mov	r1, r0
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	f000 b861 	b.w	8008008 <_malloc_r>
 8007f46:	bf00      	nop
 8007f48:	2000017c 	.word	0x2000017c

08007f4c <free>:
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <free+0xc>)
 8007f4e:	4601      	mov	r1, r0
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	f000 b80b 	b.w	8007f6c <_free_r>
 8007f56:	bf00      	nop
 8007f58:	2000017c 	.word	0x2000017c

08007f5c <memset>:
 8007f5c:	4402      	add	r2, r0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d100      	bne.n	8007f66 <memset+0xa>
 8007f64:	4770      	bx	lr
 8007f66:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6a:	e7f9      	b.n	8007f60 <memset+0x4>

08007f6c <_free_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4605      	mov	r5, r0
 8007f70:	2900      	cmp	r1, #0
 8007f72:	d045      	beq.n	8008000 <_free_r+0x94>
 8007f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f78:	1f0c      	subs	r4, r1, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bfb8      	it	lt
 8007f7e:	18e4      	addlt	r4, r4, r3
 8007f80:	f000 f8ac 	bl	80080dc <__malloc_lock>
 8007f84:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <_free_r+0x98>)
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	4610      	mov	r0, r2
 8007f8a:	b933      	cbnz	r3, 8007f9a <_free_r+0x2e>
 8007f8c:	6063      	str	r3, [r4, #4]
 8007f8e:	6014      	str	r4, [r2, #0]
 8007f90:	4628      	mov	r0, r5
 8007f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f96:	f000 b8a2 	b.w	80080de <__malloc_unlock>
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	d90c      	bls.n	8007fb8 <_free_r+0x4c>
 8007f9e:	6821      	ldr	r1, [r4, #0]
 8007fa0:	1862      	adds	r2, r4, r1
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	bf04      	itt	eq
 8007fa6:	681a      	ldreq	r2, [r3, #0]
 8007fa8:	685b      	ldreq	r3, [r3, #4]
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	bf04      	itt	eq
 8007fae:	1852      	addeq	r2, r2, r1
 8007fb0:	6022      	streq	r2, [r4, #0]
 8007fb2:	6004      	str	r4, [r0, #0]
 8007fb4:	e7ec      	b.n	8007f90 <_free_r+0x24>
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	b10a      	cbz	r2, 8007fc0 <_free_r+0x54>
 8007fbc:	42a2      	cmp	r2, r4
 8007fbe:	d9fa      	bls.n	8007fb6 <_free_r+0x4a>
 8007fc0:	6819      	ldr	r1, [r3, #0]
 8007fc2:	1858      	adds	r0, r3, r1
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d10b      	bne.n	8007fe0 <_free_r+0x74>
 8007fc8:	6820      	ldr	r0, [r4, #0]
 8007fca:	4401      	add	r1, r0
 8007fcc:	1858      	adds	r0, r3, r1
 8007fce:	4282      	cmp	r2, r0
 8007fd0:	6019      	str	r1, [r3, #0]
 8007fd2:	d1dd      	bne.n	8007f90 <_free_r+0x24>
 8007fd4:	6810      	ldr	r0, [r2, #0]
 8007fd6:	6852      	ldr	r2, [r2, #4]
 8007fd8:	605a      	str	r2, [r3, #4]
 8007fda:	4401      	add	r1, r0
 8007fdc:	6019      	str	r1, [r3, #0]
 8007fde:	e7d7      	b.n	8007f90 <_free_r+0x24>
 8007fe0:	d902      	bls.n	8007fe8 <_free_r+0x7c>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	602b      	str	r3, [r5, #0]
 8007fe6:	e7d3      	b.n	8007f90 <_free_r+0x24>
 8007fe8:	6820      	ldr	r0, [r4, #0]
 8007fea:	1821      	adds	r1, r4, r0
 8007fec:	428a      	cmp	r2, r1
 8007fee:	bf04      	itt	eq
 8007ff0:	6811      	ldreq	r1, [r2, #0]
 8007ff2:	6852      	ldreq	r2, [r2, #4]
 8007ff4:	6062      	str	r2, [r4, #4]
 8007ff6:	bf04      	itt	eq
 8007ff8:	1809      	addeq	r1, r1, r0
 8007ffa:	6021      	streq	r1, [r4, #0]
 8007ffc:	605c      	str	r4, [r3, #4]
 8007ffe:	e7c7      	b.n	8007f90 <_free_r+0x24>
 8008000:	bd38      	pop	{r3, r4, r5, pc}
 8008002:	bf00      	nop
 8008004:	20000204 	.word	0x20000204

08008008 <_malloc_r>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	1ccd      	adds	r5, r1, #3
 800800c:	f025 0503 	bic.w	r5, r5, #3
 8008010:	3508      	adds	r5, #8
 8008012:	2d0c      	cmp	r5, #12
 8008014:	bf38      	it	cc
 8008016:	250c      	movcc	r5, #12
 8008018:	2d00      	cmp	r5, #0
 800801a:	4606      	mov	r6, r0
 800801c:	db01      	blt.n	8008022 <_malloc_r+0x1a>
 800801e:	42a9      	cmp	r1, r5
 8008020:	d903      	bls.n	800802a <_malloc_r+0x22>
 8008022:	230c      	movs	r3, #12
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	2000      	movs	r0, #0
 8008028:	bd70      	pop	{r4, r5, r6, pc}
 800802a:	f000 f857 	bl	80080dc <__malloc_lock>
 800802e:	4a21      	ldr	r2, [pc, #132]	; (80080b4 <_malloc_r+0xac>)
 8008030:	6814      	ldr	r4, [r2, #0]
 8008032:	4621      	mov	r1, r4
 8008034:	b991      	cbnz	r1, 800805c <_malloc_r+0x54>
 8008036:	4c20      	ldr	r4, [pc, #128]	; (80080b8 <_malloc_r+0xb0>)
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	b91b      	cbnz	r3, 8008044 <_malloc_r+0x3c>
 800803c:	4630      	mov	r0, r6
 800803e:	f000 f83d 	bl	80080bc <_sbrk_r>
 8008042:	6020      	str	r0, [r4, #0]
 8008044:	4629      	mov	r1, r5
 8008046:	4630      	mov	r0, r6
 8008048:	f000 f838 	bl	80080bc <_sbrk_r>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d124      	bne.n	800809a <_malloc_r+0x92>
 8008050:	230c      	movs	r3, #12
 8008052:	6033      	str	r3, [r6, #0]
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f842 	bl	80080de <__malloc_unlock>
 800805a:	e7e4      	b.n	8008026 <_malloc_r+0x1e>
 800805c:	680b      	ldr	r3, [r1, #0]
 800805e:	1b5b      	subs	r3, r3, r5
 8008060:	d418      	bmi.n	8008094 <_malloc_r+0x8c>
 8008062:	2b0b      	cmp	r3, #11
 8008064:	d90f      	bls.n	8008086 <_malloc_r+0x7e>
 8008066:	600b      	str	r3, [r1, #0]
 8008068:	50cd      	str	r5, [r1, r3]
 800806a:	18cc      	adds	r4, r1, r3
 800806c:	4630      	mov	r0, r6
 800806e:	f000 f836 	bl	80080de <__malloc_unlock>
 8008072:	f104 000b 	add.w	r0, r4, #11
 8008076:	1d23      	adds	r3, r4, #4
 8008078:	f020 0007 	bic.w	r0, r0, #7
 800807c:	1ac3      	subs	r3, r0, r3
 800807e:	d0d3      	beq.n	8008028 <_malloc_r+0x20>
 8008080:	425a      	negs	r2, r3
 8008082:	50e2      	str	r2, [r4, r3]
 8008084:	e7d0      	b.n	8008028 <_malloc_r+0x20>
 8008086:	428c      	cmp	r4, r1
 8008088:	684b      	ldr	r3, [r1, #4]
 800808a:	bf16      	itet	ne
 800808c:	6063      	strne	r3, [r4, #4]
 800808e:	6013      	streq	r3, [r2, #0]
 8008090:	460c      	movne	r4, r1
 8008092:	e7eb      	b.n	800806c <_malloc_r+0x64>
 8008094:	460c      	mov	r4, r1
 8008096:	6849      	ldr	r1, [r1, #4]
 8008098:	e7cc      	b.n	8008034 <_malloc_r+0x2c>
 800809a:	1cc4      	adds	r4, r0, #3
 800809c:	f024 0403 	bic.w	r4, r4, #3
 80080a0:	42a0      	cmp	r0, r4
 80080a2:	d005      	beq.n	80080b0 <_malloc_r+0xa8>
 80080a4:	1a21      	subs	r1, r4, r0
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 f808 	bl	80080bc <_sbrk_r>
 80080ac:	3001      	adds	r0, #1
 80080ae:	d0cf      	beq.n	8008050 <_malloc_r+0x48>
 80080b0:	6025      	str	r5, [r4, #0]
 80080b2:	e7db      	b.n	800806c <_malloc_r+0x64>
 80080b4:	20000204 	.word	0x20000204
 80080b8:	20000208 	.word	0x20000208

080080bc <_sbrk_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	; (80080d8 <_sbrk_r+0x1c>)
 80080c0:	2300      	movs	r3, #0
 80080c2:	4605      	mov	r5, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	f7f8 ff20 	bl	8000f0c <_sbrk>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_sbrk_r+0x1a>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_sbrk_r+0x1a>
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20001c30 	.word	0x20001c30

080080dc <__malloc_lock>:
 80080dc:	4770      	bx	lr

080080de <__malloc_unlock>:
 80080de:	4770      	bx	lr

080080e0 <_init>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr

080080ec <_fini>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr
